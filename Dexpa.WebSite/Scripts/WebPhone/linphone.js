/* Wrapper generated by lp-gen-wrappers, do not edit*/

/*globals linphone*/

/**
 * Enum for subscription direction (incoming or outgoing). 
 * @readonly
 * @enum {number}
**/
linphone.SubscriptionDir = {
	Incoming : 0,
	Outgoing : 1,
	InvalidDir : 2
};
/**
 * Get the name of a value of the SubscriptionDir enum as a string.
 * @function linphone#getSubscriptionDirText
 * @param { number } value - One of the values of the SubscriptionDir enum.
**/
linphone.getSubscriptionDirText = function(value) {
	switch (value) {
	case linphone.SubscriptionDir.Incoming:
		return "Incoming";
	case linphone.SubscriptionDir.Outgoing:
		return "Outgoing";
	case linphone.SubscriptionDir.InvalidDir:
		return "InvalidDir";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Object that represents a SIP address.
 * @external LinphoneAddress
**/
/**
 * Sets the display name. 
 * @member {string} external:LinphoneAddress#displayName
**/
/**
 * Sets the domain. 
 * @member {string} external:LinphoneAddress#domain
**/
/**
 * Sets the port number. 
 * @member {number} external:LinphoneAddress#port
**/
/**
 * Returns the address scheme, normally "sip". 
 * @member {string} external:LinphoneAddress#scheme
 * @readonly
**/
/**
 * Returns true if address refers to a secure location (sips) 
 * @member {boolean} external:LinphoneAddress#secure
 * @readonly
**/
/**
 * Set a transport. 
 * @member {linphone.TransportType} external:LinphoneAddress#transport
**/
/**
 * Sets the username. 
 * @member {string} external:LinphoneAddress#username
**/

/**
 * Returns the address as a string. The returned char * must be freed by the application. Use ms_free().
 * 
 * @function external:LinphoneAddress#asString
 * @returns {string} 
**/

/**
 * Returns the SIP uri only as a string, that is display name is removed. The returned char * must be freed
 * by the application. Use ms_free(). 
 * @function external:LinphoneAddress#asStringUriOnly
 * @returns {string} 
**/

/**
 * Removes address's tags and uri headers so that it is displayable to the user. 
 * @function external:LinphoneAddress#clean
 * @returns {void} 
**/

/**
 * Clones a LinphoneAddress object. 
 * @function external:LinphoneAddress#clone
 * @returns {external:LinphoneAddress} 
**/

/**
 * Compare two LinphoneAddress ignoring tags and headers, basically just domain, username, and port. Returns
 * TRUE if they are equal. 
 * @function external:LinphoneAddress#weakEqual
 * @param {external:LinphoneAddress} a2 - 
 * @returns {boolean} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * LinphoneRegistrationState describes proxy registration states. 
 * @readonly
 * @enum {number}
**/
linphone.RegistrationState = {
	/**
	 * Initial state for registrations 
	*/
	None : 0,
	/**
	 * Registration is in progress 
	*/
	Progress : 1,
	/**
	 * Registration is successful 
	*/
	Ok : 2,
	/**
	 * Unregistration succeeded 
	*/
	Cleared : 3,
	/**
	 * Registration failed 
	*/
	Failed : 4
};
/**
 * Get the name of a value of the RegistrationState enum as a string.
 * @function linphone#getRegistrationStateText
 * @param { number } value - One of the values of the RegistrationState enum.
**/
linphone.getRegistrationStateText = function(value) {
	switch (value) {
	case linphone.RegistrationState.None:
		return "None";
	case linphone.RegistrationState.Progress:
		return "Progress";
	case linphone.RegistrationState.Ok:
		return "Ok";
	case linphone.RegistrationState.Cleared:
		return "Cleared";
	case linphone.RegistrationState.Failed:
		return "Failed";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Represents a buddy, all presence actions like subscription and status change notification are performed on this object 
 * @external LinphoneFriend
**/
/**
 * Set 
 * @member {external:LinphoneAddress} external:LinphoneFriend#address
**/
/**
 * Returns the LinphoneCore object managing this friend, if any. 
 * @member {external:LinphoneCore} external:LinphoneFriend#core
 * @readonly
**/
/**
 * Configure incoming subscription policy for this friend. 
 * @member {linphone.SubscribePolicy} external:LinphoneFriend#incSubscribePolicy
**/
/**
 * Set the display name for this friend 
 * @member {string} external:LinphoneFriend#name
**/
/**
 * Get the presence model of a friend 
 * @member {external:LinphonePresenceModel} external:LinphoneFriend#presenceModel
 * @readonly
**/
/**
 * Set the reference key of a friend. 
 * @member {string} external:LinphoneFriend#refKey
**/
/**
 * Configure 
 * @member {boolean} external:LinphoneFriend#subscribesEnabled
**/

/**
 * Commits modification made to the friend configuration. 
 * @function external:LinphoneFriend#done
 * @returns {void} 
**/

/**
 * Starts editing a friend configuration.
 * @function external:LinphoneFriend#edit
 * @returns {void} 
**/

/**
 * Check that the given friend is in a friend list. 
 * @function external:LinphoneFriend#inList
 * @returns {boolean} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing ICE states. 
 * @readonly
 * @enum {number}
**/
linphone.IceState = {
	/**
	 * ICE has not been activated for this call 
	*/
	NotActivated : 0,
	/**
	 * ICE processing has failed 
	*/
	Failed : 1,
	/**
	 * ICE process is in progress 
	*/
	InProgress : 2,
	/**
	 * ICE has established a direct connection to the remote host 
	*/
	HostConnection : 3,
	/**
	 * ICE has established a connection to the remote host through one or several NATs 
	*/
	ReflexiveConnection : 4,
	/**
	 * ICE has established a connection through a relay 
	*/
	RelayConnection : 5
};
/**
 * Get the name of a value of the IceState enum as a string.
 * @function linphone#getIceStateText
 * @param { number } value - One of the values of the IceState enum.
**/
linphone.getIceStateText = function(value) {
	switch (value) {
	case linphone.IceState.NotActivated:
		return "NotActivated";
	case linphone.IceState.Failed:
		return "Failed";
	case linphone.IceState.InProgress:
		return "InProgress";
	case linphone.IceState.HostConnection:
		return "HostConnection";
	case linphone.IceState.ReflexiveConnection:
		return "ReflexiveConnection";
	case linphone.IceState.RelayConnection:
		return "RelayConnection";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum for subscription states. 
 * @readonly
 * @enum {number}
**/
linphone.SubscriptionState = {
	/**
	 * Initial state, should not be used. 
	*/
	None : 0,
	/**
	 * An outgoing subcription was created 
	*/
	OutgoingInit : 1,
	/**
	 * An incoming subcription is received 
	*/
	IncomingReceived : 2,
	/**
	 * Subscription is pending, waiting for user approval 
	*/
	Pending : 3,
	/**
	 * Subscription is accepted. 
	*/
	Active : 4,
	/**
	 * Subscription is terminated normally 
	*/
	Terminated : 5,
	/**
	 * Subscription encountered an error, indicated by 
	*/
	Error : 6,
	/**
	 * Subscription is about to expire, only sent if [sip]->refresh_generic_subscribe property is set to 0. 
	*/
	Expiring : 7
};
/**
 * Get the name of a value of the SubscriptionState enum as a string.
 * @function linphone#getSubscriptionStateText
 * @param { number } value - One of the values of the SubscriptionState enum.
**/
linphone.getSubscriptionStateText = function(value) {
	switch (value) {
	case linphone.SubscriptionState.None:
		return "None";
	case linphone.SubscriptionState.OutgoingInit:
		return "OutgoingInit";
	case linphone.SubscriptionState.IncomingReceived:
		return "IncomingReceived";
	case linphone.SubscriptionState.Pending:
		return "Pending";
	case linphone.SubscriptionState.Active:
		return "Active";
	case linphone.SubscriptionState.Terminated:
		return "Terminated";
	case linphone.SubscriptionState.Error:
		return "Error";
	case linphone.SubscriptionState.Expiring:
		return "Expiring";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * A chat room message to old content to be sent. 
 * @external LinphoneChatMessage
**/
/**
 * Returns the chatroom this message belongs to. 
 * @member {external:LinphoneChatRoom} external:LinphoneChatMessage#chatRoom
 * @readonly
**/
/**
 * Get full details about delivery error of a chat message. 
 * @member {external:LinphoneErrorInfo} external:LinphoneChatMessage#errorInfo
 * @readonly
**/
/**
 * Linphone message can carry external body as defined by rfc2017
 * @member {string} external:LinphoneChatMessage#externalBodyUrl
**/
/**
 * Set origin of the message 
 * @member {external:LinphoneAddress} external:LinphoneChatMessage#from
**/
/**
 * Returns the origin address of a message if it was a outgoing message, or the destination address if it
 * was an incoming message. 
 * @member {external:LinphoneAddress} external:LinphoneChatMessage#localAddress
 * @readonly
**/
/**
 * Returns TRUE if the message has been sent, returns FALSE if the message has been received. 
 * @member {boolean} external:LinphoneChatMessage#outgoing
 * @readonly
**/
/**
 * Returns the peer (remote) address for the message. 
 * @member {external:LinphoneAddress} external:LinphoneChatMessage#peerAddress
 * @readonly
**/
/**
 * Returns TRUE if the message has been read, otherwise returns FALSE. 
 * @member {boolean} external:LinphoneChatMessage#read
 * @readonly
**/
/**
 * Get the state of the message 
 * @member {linphone.ChatMessageState} external:LinphoneChatMessage#state
 * @readonly
**/
/**
 * Returns the id used to identify this message in the storage database 
 * @member {number} external:LinphoneChatMessage#storageId
 * @readonly
**/
/**
 * Get text part of this message 
 * @member {string} external:LinphoneChatMessage#text
 * @readonly
**/
/**
 * Get the time the message was sent. 
 * @member {external:time_t} external:LinphoneChatMessage#time
 * @readonly
**/
/**
 * Set destination of the message 
 * @member {external:LinphoneAddress} external:LinphoneChatMessage#to
**/

/**
 * Add custom headers to the message. 
 * @function external:LinphoneChatMessage#addCustomHeader
 * @param {string} header_name - name of the header_name 
 * @param {string} header_value - header value 
 * @returns {void} 
**/

/**
 * Duplicate a LinphoneChatMessage 
 * @function external:LinphoneChatMessage#clone
 * @returns {external:LinphoneChatMessage} 
**/

/**
 * Retrieve a custom header value given its name. 
 * @function external:LinphoneChatMessage#getCustomHeader
 * @param {string} header_name - header name searched 
 * @returns {string} 
**/

/**
 * Call back used to notify message delivery status 
 * @event external:LinphoneChatMessage#stateChanged
 * @type {object}
 * @property {external:LinphoneChatMessage} msg -  object 
 * @property {linphone.ChatMessageState} state - LinphoneChatMessageState 
 * @property {void} ud - application user data 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Structure representing a call log. 
 * @external LinphoneCallLog
**/
/**
 * Returns the direction of the call. 
 * @member {linphone.CallDir} external:LinphoneCallLog#dir
 * @readonly
**/
/**
 * Returns duration of the call. 
 * @member {number} external:LinphoneCallLog#duration
 * @readonly
**/
/**
 * Returns origin (ie from) address of the call. 
 * @member {external:LinphoneAddress} external:LinphoneCallLog#from
 * @readonly
**/
/**
 * Returns RTP statistics computed locally regarding the call. 
 * @member {external:rtp_stats_t} external:LinphoneCallLog#localStats
 * @readonly
**/
/**
 * Returns overall quality indication of the call. 
 * @member {number} external:LinphoneCallLog#quality
 * @readonly
**/
/**
 * Associate a persistent reference key to the call log.
 * @member {string} external:LinphoneCallLog#refKey
**/
/**
 * Returns remote address (that is from or to depending on call direction). 
 * @member {external:LinphoneAddress} external:LinphoneCallLog#remoteAddress
 * @readonly
**/
/**
 * Returns RTP statistics computed by remote end and sent back via RTCP.
 * @member {external:rtp_stats_t} external:LinphoneCallLog#remoteStats
 * @readonly
**/
/**
 * Returns the start date of the call, expressed as a POSIX time_t. 
 * @member {external:time_t} external:LinphoneCallLog#startDate
 * @readonly
**/
/**
 * Returns the status of the call. 
 * @member {linphone.CallStatus} external:LinphoneCallLog#status
 * @readonly
**/
/**
 * Returns destination address (ie to) of the call. 
 * @member {external:LinphoneAddress} external:LinphoneCallLog#to
 * @readonly
**/
/**
 * return true if video was enabled at the end of the call 
 * @member {boolean} external:LinphoneCallLog#videoEnabled
 * @readonly
**/

/**
 * Returns a human readable string describing the call.
 * @function external:LinphoneCallLog#toStr
 * @returns {string} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * LinphoneGlobalState describes the global state of the LinphoneCore object. It is notified via the 
 * @readonly
 * @enum {number}
**/
linphone.ConfiguringState = {
	Successful : 0,
	Failed : 1,
	Skipped : 2
};
/**
 * Get the name of a value of the ConfiguringState enum as a string.
 * @function linphone#getConfiguringStateText
 * @param { number } value - One of the values of the ConfiguringState enum.
**/
linphone.getConfiguringStateText = function(value) {
	switch (value) {
	case linphone.ConfiguringState.Successful:
		return "Successful";
	case linphone.ConfiguringState.Failed:
		return "Failed";
	case linphone.ConfiguringState.Skipped:
		return "Skipped";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum representing the direction of a call. 
 * @readonly
 * @enum {number}
**/
linphone.CallDir = {
	/**
	 * outgoing calls 
	*/
	Outgoing : 0,
	/**
	 * incoming calls 
	*/
	Incoming : 1
};
/**
 * Get the name of a value of the CallDir enum as a string.
 * @function linphone#getCallDirText
 * @param { number } value - One of the values of the CallDir enum.
**/
linphone.getCallDirText = function(value) {
	switch (value) {
	case linphone.CallDir.Outgoing:
		return "Outgoing";
	case linphone.CallDir.Incoming:
		return "Incoming";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Object representing an event state, which is subcribed or published. 
 * @external LinphoneEvent
**/
/**
 * Returns back pointer to the LinphoneCore that created this LinphoneEvent 
 * @member {external:LinphoneCore} external:LinphoneEvent#core
 * @readonly
**/
/**
 * Get full details about an error occured. 
 * @member {external:LinphoneErrorInfo} external:LinphoneEvent#errorInfo
 * @readonly
**/
/**
 * Get the "from" address of the subscription. 
 * @member {external:LinphoneAddress} external:LinphoneEvent#from
 * @readonly
**/
/**
 * Get the name of the event as specified in the event package RFC. 
 * @member {string} external:LinphoneEvent#name
 * @readonly
**/
/**
 * Get publish state. If the event object was not created by a publish mechanism, 
 * @member {linphone.PublishState} external:LinphoneEvent#publishState
 * @readonly
**/
/**
 * Return reason code (in case of error state reached). 
 * @member {linphone.Reason} external:LinphoneEvent#reason
 * @readonly
**/
/**
 * Get the resource address of the subscription or publish. 
 * @member {external:LinphoneAddress} external:LinphoneEvent#resource
 * @readonly
**/
/**
 * Get subscription direction. If the object wasn't created by a subscription mechanism, LinphoneSubscriptionInvalidDir
 * is returned. 
 * @member {linphone.SubscriptionDir} external:LinphoneEvent#subscriptionDir
 * @readonly
**/
/**
 * Get subscription state. If the event object was not created by a subscription mechanism, 
 * @member {linphone.SubscriptionState} external:LinphoneEvent#subscriptionState
 * @readonly
**/

/**
 * Accept an incoming subcription. 
 * @function external:LinphoneEvent#acceptSubscription
 * @returns {number} 
**/

/**
 * Add a custom header to an outgoing susbscription or publish. 
 * @function external:LinphoneEvent#addCustomHeader
 * @param {string} name - header's name 
 * @param {string} value - the header's value. 
 * @returns {void} 
**/

/**
 * Deny an incoming subscription with given reason. 
 * @function external:LinphoneEvent#denySubscription
 * @param {linphone.Reason} reason - 
 * @returns {number} 
**/

/**
 * Obtain the value of a given header for an incoming subscription. 
 * @function external:LinphoneEvent#getCustomHeader
 * @param {string} name - header's name 
 * @returns {string} 
**/

/**
 * Send a notification. 
 * @function external:LinphoneEvent#notify
 * @param {external:LinphoneContent} body - an optional body containing the actual notification data. 
 * @returns {number} 
**/

/**
 * Send a publish created by 
 * @function external:LinphoneEvent#sendPublish
 * @param {external:LinphoneContent} body - the new data to be published 
 * @returns {number} 
**/

/**
 * Send a subscription previously created by 
 * @function external:LinphoneEvent#sendSubscribe
 * @param {external:LinphoneContent} body - optional content to attach with the subscription. 
 * @returns {number} 
**/

/**
 * Terminate an incoming or outgoing subscription that was previously acccepted, or a previous publication.
 * This function does not unref the object. The core will unref() if it does not need this object anymore.
 * @function external:LinphoneEvent#terminate
 * @returns {void} 
**/

/**
 * Update (refresh) a publish. 
 * @function external:LinphoneEvent#updatePublish
 * @param {external:LinphoneContent} body - the new data to be published 
 * @returns {number} 
**/

/**
 * Update (refresh) an outgoing subscription. 
 * @function external:LinphoneEvent#updateSubscribe
 * @param {external:LinphoneContent} body - an optional body to include in the subscription update, may be NULL. 
 * @returns {number} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Presence activity type holding information about a presence activity. 
 * @external LinphonePresenceActivity
**/
/**
 * Sets the description of a presence activity. 
 * @member {string} external:LinphonePresenceActivity#description
**/
/**
 * Sets the type of activity of a presence activity. 
 * @member {linphone.PresenceActivityType} external:LinphonePresenceActivity#type
**/

/**
 * Gets the string representation of a presence activity. 
 * @function external:LinphonePresenceActivity#toString
 * @returns {string} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Policy to use to pass through firewalls. 
 * @readonly
 * @enum {number}
**/
linphone.FirewallPolicy = {
	/**
	 * Do not use any mechanism to pass through firewalls 
	*/
	NoFirewall : 0,
	/**
	 * Use the specified public adress 
	*/
	UseNatAddress : 1,
	/**
	 * Use a STUN server to get the public address 
	*/
	UseStun : 2,
	/**
	 * Use the ICE protocol 
	*/
	UseIce : 3,
	/**
	 * Use the uPnP protocol 
	*/
	UseUpnp : 4
};
/**
 * Get the name of a value of the FirewallPolicy enum as a string.
 * @function linphone#getFirewallPolicyText
 * @param { number } value - One of the values of the FirewallPolicy enum.
**/
linphone.getFirewallPolicyText = function(value) {
	switch (value) {
	case linphone.FirewallPolicy.NoFirewall:
		return "NoFirewall";
	case linphone.FirewallPolicy.UseNatAddress:
		return "UseNatAddress";
	case linphone.FirewallPolicy.UseStun:
		return "UseStun";
	case linphone.FirewallPolicy.UseIce:
		return "UseIce";
	case linphone.FirewallPolicy.UseUpnp:
		return "UseUpnp";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * This set of methods enhance LinphoneCore functionalities in order to provide an easy to use API to
 * @external LinphoneTunnelConfig
**/
/**
 * Set the udp packet round trip delay in ms for a tunnel configuration.
 * @member {number} external:LinphoneTunnelConfig#delay
**/
/**
 * Set address of server.
 * @member {string} external:LinphoneTunnelConfig#host
**/
/**
 * Set tls port of server.
 * @member {number} external:LinphoneTunnelConfig#port
**/
/**
 * Set the remote port on the tunnel server side used to test udp reachability.
 * @member {number} external:LinphoneTunnelConfig#remoteUdpMirrorPort
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Defines privacy policy to apply as described by rfc3323 
 * @readonly
 * @enum {number}
**/
linphone.Privacy = {
	/**
	 * Privacy services must not perform any privacy function 
	*/
	None : 0,
	/**
	 * Request that privacy services provide a user-level privacy function. With this mode, "from" header is
	 * hidden, usually replaced by From: "Anonymous" <sip:
	*/
	User : 1,
	/**
	 * Request that privacy services modify headers that cannot be set arbitrarily by the user (Contact/Via).
	 * 
	*/
	Header : 2,
	/**
	 * Request that privacy services provide privacy for session media 
	*/
	Session : 3,
	/**
	 * rfc3325 The presence of this privacy type in a Privacy header field indicates that the user would like
	 * the Network Asserted Identity to be kept private with respect to SIP entities outside the Trust Domain
	 * with which the user authenticated. Note that a user requesting multiple types of privacy MUST include
	 * all of the requested privacy types in its Privacy header field value 
	*/
	Id : 4,
	/**
	 * Privacy service must perform the specified services or fail the request 
	*/
	Critical : 5,
	/**
	 * Special keyword to use privacy as defined either globally or by proxy using 
	*/
	Default : 6
};
/**
 * Get the name of a value of the Privacy enum as a string.
 * @function linphone#getPrivacyText
 * @param { number } value - One of the values of the Privacy enum.
**/
linphone.getPrivacyText = function(value) {
	switch (value) {
	case linphone.Privacy.None:
		return "None";
	case linphone.Privacy.User:
		return "User";
	case linphone.Privacy.Header:
		return "Header";
	case linphone.Privacy.Session:
		return "Session";
	case linphone.Privacy.Id:
		return "Id";
	case linphone.Privacy.Critical:
		return "Critical";
	case linphone.Privacy.Default:
		return "Default";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * The LinphoneProxyConfig object represents a proxy configuration to be used by the LinphoneCore object. Its fields must not be used directly in favour of the accessors methods. Once created and filled properly the LinphoneProxyConfig can be given to LinphoneCore with 
 * @external LinphoneProxyConfig
**/
/**
 * Returns the proxy's SIP address. 
 * @member {string} external:LinphoneProxyConfig#addr
 * @readonly
**/
/**
 * Set optional contact parameters that will be added to the contact information sent in the registration.
 * 
 * @member {string} external:LinphoneProxyConfig#contactParameters
**/
/**
 * Set optional contact parameters that will be added to the contact information sent in the registration,
 * inside the URI. 
 * @member {string} external:LinphoneProxyConfig#contactUriParameters
**/
/**
 * Get the 
 * @member {external:LinphoneCore} external:LinphoneProxyConfig#core
 * @readonly
**/
/**
 * Sets whether liblinphone should replace "+" by international calling prefix in dialed numbers (passed
 * to 
 * @member {boolean} external:LinphoneProxyConfig#dialEscapePlus
**/
/**
 * Sets a dialing prefix to be automatically prepended when inviting a number with 
 * @member {string} external:LinphoneProxyConfig#dialPrefix
**/
/**
 * Get the domain name of the given proxy config. 
 * @member {string} external:LinphoneProxyConfig#domain
 * @readonly
**/
/**
 * Get the reason why registration failed when the proxy config state is LinphoneRegistrationFailed. 
 * @member {linphone.Reason} external:LinphoneProxyConfig#error
 * @readonly
**/
/**
 * Get detailed information why registration failed when the proxy config state is LinphoneRegistrationFailed.
 * 
 * @member {external:LinphoneErrorInfo} external:LinphoneProxyConfig#errorInfo
 * @readonly
**/
/**
 * Sets the registration expiration time in seconds. 
 * @member {number} external:LinphoneProxyConfig#expires
**/
/**
 * Sets the user identity as a SIP address.
 * @member {string} external:LinphoneProxyConfig#identity
**/
/**
 * Set default privacy policy for all calls routed through this proxy. 
 * @member {external:LinphonePrivacyMask} external:LinphoneProxyConfig#privacy
**/
/**
 * Indicates either or not, PUBLISH must be issued for this 
 * @member {boolean} external:LinphoneProxyConfig#publishEnabled
**/
/**
 * Indicates either or not, REGISTRATION must be issued for this 
 * @member {boolean} external:LinphoneProxyConfig#registerEnabled
**/
/**
 * Sets a SIP route. When a route is set, all outgoing calls will go to the route's destination if this proxy
 * is the default one (see 
 * @member {string} external:LinphoneProxyConfig#route
**/
/**
 * Sets the proxy address
 * @member {string} external:LinphoneProxyConfig#serverAddr
**/
/**
 * Get the registration state of the given proxy config. 
 * @member {linphone.RegistrationState} external:LinphoneProxyConfig#state
 * @readonly
**/

/**
 * Commits modification made to the proxy configuration. 
 * @function external:LinphoneProxyConfig#done
 * @returns {number} 
**/

/**
 * Starts editing a proxy configuration.
 * @function external:LinphoneProxyConfig#edit
 * @returns {void} 
**/

/**
 * normalize a human readable phone number into a basic string. 888-444-222 becomes 888444222 
 * @function external:LinphoneProxyConfig#normalizeNumber
 * @param {string} username - 
 * @param {string} result - 
 * @param {number} result_len - 
 * @returns {number} 
**/

/**
 * Refresh a proxy registration. This is useful if for example you resuming from suspend, thus IP address
 * may have changed. 
 * @function external:LinphoneProxyConfig#refreshRegister
 * @returns {void} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing type of media encryption types. 
 * @readonly
 * @enum {number}
**/
linphone.MediaEncryption = {
	/**
	 * No media encryption is used 
	*/
	None : 0,
	/**
	 * Use SRTP media encryption 
	*/
	SRTP : 1,
	/**
	 * Use ZRTP media encryption 
	*/
	ZRTP : 2
};
/**
 * Get the name of a value of the MediaEncryption enum as a string.
 * @function linphone#getMediaEncryptionText
 * @param { number } value - One of the values of the MediaEncryption enum.
**/
linphone.getMediaEncryptionText = function(value) {
	switch (value) {
	case linphone.MediaEncryption.None:
		return "None";
	case linphone.MediaEncryption.SRTP:
		return "SRTP";
	case linphone.MediaEncryption.ZRTP:
		return "ZRTP";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Basic status as defined in section 4.1.4 of RFC 3863 
 * @readonly
 * @enum {number}
**/
linphone.PresenceBasicStatus = {
	/**
	 * This value means that the associated contact element, if any, is ready to accept communication. 
	*/
	Open : 0,
	/**
	 * This value means that the associated contact element, if any, is unable to accept communication. 
	*/
	Closed : 1
};
/**
 * Get the name of a value of the PresenceBasicStatus enum as a string.
 * @function linphone#getPresenceBasicStatusText
 * @param { number } value - One of the values of the PresenceBasicStatus enum.
**/
linphone.getPresenceBasicStatusText = function(value) {
	switch (value) {
	case linphone.PresenceBasicStatus.Open:
		return "Open";
	case linphone.PresenceBasicStatus.Closed:
		return "Closed";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * The LinphoneCall object represents a call issued or received by the LinphoneCore 
 * @external LinphoneCall
**/
/**
 * Access last known statistics for audio stream, for a given call. 
 * @member {external:LinphoneCallStats} external:LinphoneCall#audioStats
 * @readonly
**/
/**
 * Returns call quality averaged over all the duration of the call.
 * @member {number} external:LinphoneCall#averageQuality
 * @readonly
**/
/**
 * Returns the call log associated to this call. 
 * @member {external:LinphoneCallLog} external:LinphoneCall#callLog
 * @readonly
**/
/**
 * Indicate whether camera input should be sent to remote end. 
 * @member {boolean} external:LinphoneCall#cameraEnabled
**/
/**
 * Returns current parameters associated to the call. 
 * @member {external:LinphoneCallParams} external:LinphoneCall#currentParams
 * @readonly
**/
/**
 * Obtain real-time quality rating of the call
 * @member {number} external:LinphoneCall#currentQuality
 * @readonly
**/
/**
 * Returns direction of the call (incoming or outgoing). 
 * @member {linphone.CallDir} external:LinphoneCall#dir
 * @readonly
**/
/**
 * Returns call's duration in seconds. 
 * @member {number} external:LinphoneCall#duration
 * @readonly
**/
/**
 * Enables or disable echo cancellation for this call 
 * @member {boolean} external:LinphoneCall#echoCancellationEnabled
**/
/**
 * Enables or disable echo limiter for this call 
 * @member {boolean} external:LinphoneCall#echoLimiterEnabled
**/
/**
 * Returns full details about call errors or termination reasons. 
 * @member {external:LinphoneErrorInfo} external:LinphoneCall#errorInfo
 * @readonly
**/
/**
 * Returns the measured sound volume played locally (received from remote). It is expressed in dbm0. 
 * @member {number} external:LinphoneCall#playVolume
 * @readonly
**/
/**
 * Returns the reason for a call termination (either error or normal termination) 
 * @member {linphone.Reason} external:LinphoneCall#reason
 * @readonly
**/
/**
 * Returns the measured sound volume recorded locally (sent to remote). It is expressed in dbm0. 
 * @member {number} external:LinphoneCall#recordVolume
 * @readonly
**/
/**
 * Returns the refer-to uri (if the call was transfered). 
 * @member {string} external:LinphoneCall#referTo
 * @readonly
**/
/**
 * Returns the remote address associated to this call 
 * @member {external:LinphoneAddress} external:LinphoneCall#remoteAddress
 * @readonly
**/
/**
 * Returns the remote address associated to this call as a string.
 * @member {string} external:LinphoneCall#remoteAddressAsString
 * @readonly
**/
/**
 * Returns the far end's sip contact as a string, if available. 
 * @member {string} external:LinphoneCall#remoteContact
 * @readonly
**/
/**
 * Returns call parameters proposed by remote.
 * @member {external:LinphoneCallParams} external:LinphoneCall#remoteParams
 * @readonly
**/
/**
 * Returns the far end's user agent description string, if available. 
 * @member {string} external:LinphoneCall#remoteUserAgent
 * @readonly
**/
/**
 * Returns the call object this call is replacing, if any. Call replacement can occur during call transfers.
 * By default, the core automatically terminates the replaced call and accept the new one. This function
 * allows the application to know whether a new incoming call is a one that replaces another one. 
 * @member {external:LinphoneCall} external:LinphoneCall#replacedCall
 * @readonly
**/
/**
 * Retrieves the call's current state. 
 * @member {linphone.CallState} external:LinphoneCall#state
 * @readonly
**/
/**
 * When this call has received a transfer request, returns the new call that was automatically created as
 * a result of the transfer. 
 * @member {external:LinphoneCall} external:LinphoneCall#transferTargetCall
 * @readonly
**/
/**
 * Returns the transferer if this call was started automatically as a result of an incoming transfer request.
 * The call in which the transfer request was received is returned in this case. 
 * @member {external:LinphoneCall} external:LinphoneCall#transfererCall
 * @readonly
**/
/**
 * Access last known statistics for video stream, for a given call. 
 * @member {external:LinphoneCallStats} external:LinphoneCall#videoStats
 * @readonly
**/

/**
 * Returns true if this calls has received a transfer that has not been executed yet. Pending transfers are
 * executed when this call is being paused or closed, locally or by remote endpoint. If the call is already
 * paused while receiving the transfer request, the transfer immediately occurs. 
 * @function external:LinphoneCall#hasTransferPending
 * @returns {boolean} 
**/

/**
 * Request remote side to send us a Video Fast Update. 
 * @function external:LinphoneCall#sendVfuRequest
 * @returns {void} 
**/

/**
 * Start call recording. The output file where audio is recorded must be previously specified with 
 * @function external:LinphoneCall#startRecording
 * @returns {void} 
**/

/**
 * Stop call recording. 
 * @function external:LinphoneCall#stopRecording
 * @returns {void} 
**/

/**
 * Take a photo of currently received video and write it into a jpeg file. 
 * @function external:LinphoneCall#takeVideoSnapshot
 * @param {string} file - 
 * @returns {number} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Presence model type holding information about the presence of a person. 
 * @external LinphonePresenceModel
**/
/**
 * Gets the first activity of a presence model (there is usually only one). 
 * @member {external:LinphonePresenceActivity} external:LinphonePresenceModel#activity
 * @readonly
**/
/**
 * Sets the basic status of a presence model. 
 * @member {linphone.PresenceBasicStatus} external:LinphonePresenceModel#basicStatus
**/
/**
 * Sets the contact of a presence model. 
 * @member {string} external:LinphonePresenceModel#contact
**/
/**
 * Gets the number of activities included in the presence model. 
 * @member {number} external:LinphonePresenceModel#nbActivities
 * @readonly
**/
/**
 * Gets the number of persons included in the presence model. 
 * @member {number} external:LinphonePresenceModel#nbPersons
 * @readonly
**/
/**
 * Gets the number of services included in the presence model. 
 * @member {number} external:LinphonePresenceModel#nbServices
 * @readonly
**/
/**
 * Gets the timestamp of a presence model. 
 * @member {external:time_t} external:LinphonePresenceModel#timestamp
 * @readonly
**/

/**
 * Adds an activity to a presence model. 
 * @function external:LinphonePresenceModel#addActivity
 * @param {external:LinphonePresenceActivity} activity - The 
 * @returns {number} 
**/

/**
 * Adds a note to a presence model. 
 * @function external:LinphonePresenceModel#addNote
 * @param {string} note_content - The note to be added to the presence model. 
 * @param {string} lang - The language of the note to be added. Can be NULL if no language is to be specified for the note. 
 * @returns {number} 
**/

/**
 * Adds a person to a presence model. 
 * @function external:LinphonePresenceModel#addPerson
 * @param {external:LinphonePresencePerson} person - The 
 * @returns {number} 
**/

/**
 * Adds a service to a presence model. 
 * @function external:LinphonePresenceModel#addService
 * @param {external:LinphonePresenceService} service - The 
 * @returns {number} 
**/

/**
 * Clears the activities of a presence model. 
 * @function external:LinphonePresenceModel#clearActivities
 * @returns {number} 
**/

/**
 * Clears all the notes of a presence model. 
 * @function external:LinphonePresenceModel#clearNotes
 * @returns {number} 
**/

/**
 * Clears the persons of a presence model. 
 * @function external:LinphonePresenceModel#clearPersons
 * @returns {number} 
**/

/**
 * Clears the services of a presence model. 
 * @function external:LinphonePresenceModel#clearServices
 * @returns {number} 
**/

/**
 * Gets the first note of a presence model (there is usually only one). 
 * @function external:LinphonePresenceModel#getNote
 * @param {string} lang - The language of the note to get. Can be NULL to get a note that has no language specified or to get the first note whatever language it is written into. 
 * @returns {external:LinphonePresenceNote} 
**/

/**
 * Gets the nth activity of a presence model. 
 * @function external:LinphonePresenceModel#getNthActivity
 * @param {number} idx - The index of the activity to get (the first activity having the index 0). 
 * @returns {external:LinphonePresenceActivity} 
**/

/**
 * Gets the nth person of a presence model. 
 * @function external:LinphonePresenceModel#getNthPerson
 * @param {number} idx - The index of the person to get (the first person having the index 0). 
 * @returns {external:LinphonePresencePerson} 
**/

/**
 * Gets the nth service of a presence model. 
 * @function external:LinphonePresenceModel#getNthService
 * @param {number} idx - The index of the service to get (the first service having the index 0). 
 * @returns {external:LinphonePresenceService} 
**/

/**
 * Sets the activity of a presence model (limits to only one activity). 
 * @function external:LinphonePresenceModel#setActivity
 * @param {linphone.PresenceActivityType} activity - The 
 * @param {string} description - An additional description of the activity to set for the model. Can be NULL if no additional description is to be added. 
 * @returns {number} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing various failure reasons or contextual information for some events. 
 * @readonly
 * @enum {number}
**/
linphone.Reason = {
	None : 0,
	/**
	 * No response received from remote 
	*/
	NoResponse : 1,
	/**
	 * Authentication failed due to bad credentials or resource forbidden 
	*/
	Forbidden : 2,
	/**
	 * The call has been declined 
	*/
	Declined : 3,
	/**
	 * Destination of the call was not found. 
	*/
	NotFound : 4,
	/**
	 * The call was not answered in time (request timeout) 
	*/
	NotAnswered : 5,
	/**
	 * Phone line was busy 
	*/
	Busy : 6,
	/**
	 * Unsupported content 
	*/
	UnsupportedContent : 7,
	/**
	 * Transport error: connection failures, disconnections etc... 
	*/
	IOError : 8,
	/**
	 * Do not disturb reason 
	*/
	DoNotDisturb : 9,
	/**
	 * Operation is unauthorized because missing credential 
	*/
	Unauthorized : 10,
	/**
	 * Operation like call update rejected by peer 
	*/
	NotAcceptable : 11,
	/**
	 * Operation could not be executed by server or remote client because it didn't have any context for it 
	*/
	NoMatch : 12,
	/**
	 * Resource moved permanently 
	*/
	MovedPermanently : 13,
	/**
	 * Resource no longer exists 
	*/
	Gone : 14,
	/**
	 * Temporarily unavailable 
	*/
	TemporarilyUnavailable : 15,
	/**
	 * Address incomplete 
	*/
	AddressIncomplete : 16,
	/**
	 * Not implemented 
	*/
	NotImplemented : 17,
	/**
	 * Bad gateway 
	*/
	BadGateway : 18,
	/**
	 * Server timeout 
	*/
	ServerTimeout : 19,
	/**
	 * Unknown reason 
	*/
	Unknown : 20
};
/**
 * Get the name of a value of the Reason enum as a string.
 * @function linphone#getReasonText
 * @param { number } value - One of the values of the Reason enum.
**/
linphone.getReasonText = function(value) {
	switch (value) {
	case linphone.Reason.None:
		return "None";
	case linphone.Reason.NoResponse:
		return "NoResponse";
	case linphone.Reason.Forbidden:
		return "Forbidden";
	case linphone.Reason.Declined:
		return "Declined";
	case linphone.Reason.NotFound:
		return "NotFound";
	case linphone.Reason.NotAnswered:
		return "NotAnswered";
	case linphone.Reason.Busy:
		return "Busy";
	case linphone.Reason.UnsupportedContent:
		return "UnsupportedContent";
	case linphone.Reason.IOError:
		return "IOError";
	case linphone.Reason.DoNotDisturb:
		return "DoNotDisturb";
	case linphone.Reason.Unauthorized:
		return "Unauthorized";
	case linphone.Reason.NotAcceptable:
		return "NotAcceptable";
	case linphone.Reason.NoMatch:
		return "NoMatch";
	case linphone.Reason.MovedPermanently:
		return "MovedPermanently";
	case linphone.Reason.Gone:
		return "Gone";
	case linphone.Reason.TemporarilyUnavailable:
		return "TemporarilyUnavailable";
	case linphone.Reason.AddressIncomplete:
		return "AddressIncomplete";
	case linphone.Reason.NotImplemented:
		return "NotImplemented";
	case linphone.Reason.BadGateway:
		return "BadGateway";
	case linphone.Reason.ServerTimeout:
		return "ServerTimeout";
	case linphone.Reason.Unknown:
		return "Unknown";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * The LinphoneCallStats objects carries various statistic informations regarding quality of audio or video streams.
 * @external LinphoneCallStats
**/
/**
 * Gets the remote reported loss rate since last report 
 * @member {number} external:LinphoneCallStats#receiverLossRate
 * @readonly
**/
/**
 * Get the local loss rate since last report 
 * @member {number} external:LinphoneCallStats#senderLossRate
 * @readonly
**/

/**
 * Gets the cumulative number of late packets 
 * @function external:LinphoneCallStats#getLatePacketsCumulativeNumber
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/

/**
 * Gets the remote reported interarrival jitter 
 * @function external:LinphoneCallStats#getReceiverInterarrivalJitter
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/

/**
 * Gets the local interarrival jitter 
 * @function external:LinphoneCallStats#getSenderInterarrivalJitter
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Linphone core main object created by function 
 * @external LinphoneCore
**/
/**
 * Enable adaptive rate control.
 * @member {boolean} external:LinphoneCore#adaptiveRateControlEnabled
**/
/**
 * Enable or disable the audio adaptive jitter compensation. 
 * @member {boolean} external:LinphoneCore#audioAdaptiveJittcompEnabled
**/
/**
 * Sets the list of audio codecs.
 * @member {Array.<Object>} external:LinphoneCore#audioCodecs
**/
/**
 * Set the DSCP field for outgoing audio streams.
 * @member {number} external:LinphoneCore#audioDscp
**/
/**
 * Sets the nominal audio jitter buffer size in milliseconds. 
 * @member {number} external:LinphoneCore#audioJittcomp
**/
/**
 * Sets the UDP port used for audio streaming. 
 * @member {number} external:LinphoneCore#audioPort
**/
/**
 * Returns an unmodifiable list of currently entered LinphoneAuthInfo. 
 * @member {Array.<Object>} external:LinphoneCore#authInfoList
 * @readonly
**/
/**
 * Get the list of call logs (past calls). 
 * @member {Array.<Object>} external:LinphoneCore#callLogs
 * @readonly
**/
/**
 * Returns the current list of calls.
 * @member {Array.<Object>} external:LinphoneCore#calls
 * @readonly
**/
/**
 * Get the number of Call 
 * @member {number} external:LinphoneCore#callsNb
 * @readonly
**/
/**
 * Sets the sound device used for capture.
 * @member {string} external:LinphoneCore#captureDevice
**/
/**
 * Sets the database filename where chat messages will be stored. If the file does not exist, it will be
 * created.
 * @member {string} external:LinphoneCore#chatDatabasePath
**/
/**
 * Returns whether chat is enabled. 
 * @member {boolean} external:LinphoneCore#chatEnabled
 * @readonly
**/
/**
 * Returns an array of chat rooms 
 * @member {Array.<Object>} external:LinphoneCore#chatRooms
 * @readonly
**/
/**
 * Returns the sound volume (mic input) of the local participant of the conference. 
 * @member {number} external:LinphoneCore#conferenceLocalInputVolume
 * @readonly
**/
/**
 * Returns the number of participants to the conference, including the local participant. 
 * @member {number} external:LinphoneCore#conferenceSize
 * @readonly
**/
/**
 * Returns the LpConfig object used to manage the storage (config) file.
 * @member {external:LpConfig} external:LinphoneCore#config
 * @readonly
**/
/**
 * Returns The _LinphoneCall struct of the current call if one is in call 
 * @member {external:LinphoneCall} external:LinphoneCore#currentCall
 * @readonly
**/
/**
 * Sets the default proxy.
 * @member {external:LinphoneProxyConfig} external:LinphoneCore#defaultProxy
**/
/**
 * Set the in delayed timeout in seconds.
 * @member {number} external:LinphoneCore#delayedTimeout
**/
/**
 * Tells the core the device current orientation. This can be used by capture filters on mobile devices to
 * select between portrait/landscape mode and to produce properly oriented images. The exact meaning of
 * the value in rotation if left to each device specific implementations. 
 * @member {number} external:LinphoneCore#deviceRotation
**/
/**
 * Enable or disable DNS SRV resolution. 
 * @member {boolean} external:LinphoneCore#dnsSrvEnabled
**/
/**
 * Sets maximum available download bandwidth This is IP bandwidth, in kbit/s. This information is used signaled
 * to other parties during calls (within SDP messages) so that the remote end can have sufficient knowledge
 * to properly configure its audio & video codec output bitrate to not overflow available bandwidth.
 * @member {number} external:LinphoneCore#downloadBandwidth
**/
/**
 * Set audio packetization time linphone expects to receive from peer. A value of zero means that ptime is
 * not specified. 
 * @member {number} external:LinphoneCore#downloadPtime
**/
/**
 * Enables or disable echo cancellation. Value is saved an used for subsequent calls 
 * @member {boolean} external:LinphoneCore#echoCancellationEnabled
**/
/**
 * Enables or disable echo limiter. 
 * @member {boolean} external:LinphoneCore#echoLimiterEnabled
**/
/**
 * Set the policy to use to pass through firewalls. 
 * @member {linphone.FirewallPolicy} external:LinphoneCore#firewallPolicy
**/
/**
 * Get Buddy list of LinphoneFriend 
 * @member {Array.<Object>} external:LinphoneCore#friendList
 * @readonly
**/
/**
 * Tells LinphoneCore to guess local hostname automatically in primary contact. 
 * @member {boolean} external:LinphoneCore#guessHostname
**/
/**
 * Returns the default identity SIP address.
 * @member {string} external:LinphoneCore#identity
 * @readonly
**/
/**
 * Set the in call timeout in seconds.
 * @member {number} external:LinphoneCore#inCallTimeout
**/
/**
 * Indicates whether the local participant is part of the conference. 
 * @member {boolean} external:LinphoneCore#inConference
 * @readonly
**/
/**
 * Set the incoming call timeout in seconds.
 * @member {number} external:LinphoneCore#incTimeout
**/
/**
 * Turns IPv6 support on or off.
 * @member {boolean} external:LinphoneCore#ipv6Enabled
**/
/**
 * enable signaling keep alive. small udp packet sent periodically to keep udp NAT association
 * @member {boolean} external:LinphoneCore#keepAliveEnabled
**/
/**
 * Set the maximum number of simultaneous calls Linphone core can manage at a time. All new call above this
 * limit are declined with a busy answer
 * @member {number} external:LinphoneCore#maxCalls
**/
/**
 * Choose the media encryption policy to be used for RTP packets. 
 * @member {linphone.MediaEncryption} external:LinphoneCore#mediaEncryption
**/
/**
 * Define behaviour when encryption parameters negociation fails on outgoing call. 
 * @member {boolean} external:LinphoneCore#mediaEncryptionMandatory
**/
/**
 * Enable or disable the microphone. 
 * @member {boolean} external:LinphoneCore#micEnabled
**/
/**
 * Allow to control microphone level: gain in db 
 * @member {number} external:LinphoneCore#micGainDb
**/
/**
 * Get the number of missed calls. Once checked, this counter can be reset with 
 * @member {number} external:LinphoneCore#missedCallsCount
 * @readonly
**/
/**
 * Sets the maximum transmission unit size in bytes. This information is useful for sending RTP packets.
 * Default value is 1500. 
 * @member {number} external:LinphoneCore#mtu
**/
/**
 * Set the public IP address of NAT when using the firewall policy is set to use NAT. 
 * @member {string} external:LinphoneCore#natAddress
**/
/**
 * Set the native window id where the preview video (local camera) is to be displayed. This has to be used
 * in conjonction with 
 * @member {external:unsignedlong} external:LinphoneCore#nativePreviewWindowId
**/
/**
 * Set the native video window id where the video is to be displayed. For MacOS, Linux, Windows: if not set
 * or zero the core will create its own window, unless the special id -1 is given. 
 * @member {external:unsignedlong} external:LinphoneCore#nativeVideoWindowId
**/
/**
 * This method is called by the application to notify the linphone core library when network is reachable.
 * Calling this method with true trigger linphone to initiate a registration process for all proxies. Calling
 * this method disables the automatic network detection mode. It means you must call this method after each
 * network state changes. 
 * @member {boolean} external:LinphoneCore#networkReachable
**/
/**
 * Sets the no-rtp timeout value in seconds.
 * @member {number} external:LinphoneCore#nortpTimeout
**/
/**
 * Set sound playback level in 0-100 scale 
 * @member {number} external:LinphoneCore#playLevel
**/
/**
 * Sets the sound device used for playback.
 * @member {string} external:LinphoneCore#playbackDevice
**/
/**
 * Allow to control play level before entering sound card: gain in db 
 * @member {number} external:LinphoneCore#playbackGainDb
**/
/**
 * Sets the preferred video size.
 * @member {external:MSVideoSize} external:LinphoneCore#preferredVideoSize
**/
/**
 * Sets the preferred video size by its name.
 * @member {string} external:LinphoneCore#preferredVideoSizeByName
**/
/**
 * Set my presence model 
 * @member {external:LinphonePresenceModel} external:LinphoneCore#presenceModel
**/
/**
 * Sets the local "from" identity.
 * @member {string} external:LinphoneCore#primaryContact
**/
/**
 * Same as 
 * @member {external:LinphoneAddress} external:LinphoneCore#primaryContactParsed
 * @readonly
**/
/**
 * Set URI where to download xml configuration file at startup. This can also be set from configuration file
 * or factory config file, from [misc] section, item "config-uri". Calling this function does not load the
 * configuration. It will write the value into configuration so that configuration from remote URI will
 * take place at next LinphoneCore start. 
 * @member {string} external:LinphoneCore#provisioningUri
**/
/**
 * Returns an unmodifiable list of entered proxy configurations. 
 * @member {Array.<Object>} external:LinphoneCore#proxyConfigList
 * @readonly
**/
/**
 * Set sound capture level in 0-100 scale 
 * @member {number} external:LinphoneCore#recLevel
**/
/**
 * Sets the path to a wav file used for ringing.
 * @member {string} external:LinphoneCore#ring
**/
/**
 * Set sound ring level in 0-100 scale 
 * @member {number} external:LinphoneCore#ringLevel
**/
/**
 * Sets the path to a wav file used for ringing back.
 * @member {string} external:LinphoneCore#ringback
**/
/**
 * Sets the sound device used for ringing.
 * @member {string} external:LinphoneCore#ringerDevice
**/
/**
 * Sets the path to a file or folder containing trusted root CAs (PEM format)
 * @member {string} external:LinphoneCore#rootCa
**/
/**
 * Control when media offer is sent in SIP INVITE. 
 * @member {boolean} external:LinphoneCore#sdp200AckEnabled
**/
/**
 * Enables or disable self view during calls.
 * @member {boolean} external:LinphoneCore#selfViewEnabled
**/
/**
 * Set the DSCP field for SIP signaling channel.
 * @member {number} external:LinphoneCore#sipDscp
**/
/**
 * Sets the UDP port to be used by SIP.
 * @member {number} external:LinphoneCore#sipPort
**/
/**
 * Sets the ports to be used for each of transport (UDP or TCP)
 * @member {external:LCSipTransports} external:LinphoneCore#sipTransports
**/
/**
 * Returns an unmodifiable array of available sound devices.
 * @member {string} external:LinphoneCore#soundDevices
 * @readonly
**/
/**
 * Set the path to the image file to stream when "Static picture" is set as the video device. 
 * @member {string} external:LinphoneCore#staticPicture
**/
/**
 * Set the frame rate for static picture. 
 * @member {number} external:LinphoneCore#staticPictureFps
**/
/**
 * Set the STUN server address to use when the firewall policy is set to STUN. 
 * @member {string} external:LinphoneCore#stunServer
**/
/**
 * Returns the zero terminated table of supported video resolutions. 
 * @member {external:MSVideoSizeDef} external:LinphoneCore#supportedVideoSizes
 * @readonly
**/
/**
 * Sets maximum available upload bandwidth This is IP bandwidth, in kbit/s. This information is used by liblinphone
 * together with remote side available bandwidth signaled in SDP messages to properly configure audio &
 * video codec's output bitrate.
 * @member {number} external:LinphoneCore#uploadBandwidth
**/
/**
 * Set audio packetization time linphone will send (in absence of requirement from peer) A value of 0 stands
 * for the current codec default packetization time. 
 * @member {number} external:LinphoneCore#uploadPtime
**/
/**
 * Return the external ip address of router. In some cases the uPnP can have an external ip address but not
 * a usable uPnP (state different of Ok).
 * @member {string} external:LinphoneCore#upnpExternalIpaddress
 * @readonly
**/
/**
 * Return the internal state of uPnP.
 * @member {linphone.UpnpState} external:LinphoneCore#upnpState
 * @readonly
**/
/**
 * Sets whether SIP INFO is to be used for sending digits. 
 * @member {boolean} external:LinphoneCore#useInfoForDtmf
**/
/**
 * Sets whether RFC2833 is to be used for sending digits. 
 * @member {boolean} external:LinphoneCore#useRfc2833ForDtmf
**/
/**
 * Enable or disable the video adaptive jitter compensation. 
 * @member {boolean} external:LinphoneCore#videoAdaptiveJittcompEnabled
**/
/**
 * Enable or disable video capture.
 * @member {boolean} external:LinphoneCore#videoCaptureEnabled
**/
/**
 * Sets the list of video codecs.
 * @member {Array.<Object>} external:LinphoneCore#videoCodecs
**/
/**
 * Sets the active video device.
 * @member {string} external:LinphoneCore#videoDevice
**/
/**
 * Returns an unmodifiable array of available video capture devices.
 * @member {string} external:LinphoneCore#videoDevices
 * @readonly
**/
/**
 * Enable or disable video display.
 * @member {boolean} external:LinphoneCore#videoDisplayEnabled
**/
/**
 * Set the name of the mediastreamer2 filter to be used for rendering video. This is for advanced users of
 * the library, mainly to workaround hardware/driver bugs. 
 * @member {string} external:LinphoneCore#videoDisplayFilter
**/
/**
 * Set the DSCP field for outgoing video streams.
 * @member {number} external:LinphoneCore#videoDscp
**/
/**
 * Sets the nominal video jitter buffer size in milliseconds. 
 * @member {number} external:LinphoneCore#videoJittcomp
**/
/**
 * Sets the default policy for video. This policy defines whether:
 * @member {external:LinphoneVideoPolicy} external:LinphoneCore#videoPolicy
**/
/**
 * Sets the UDP port used for video streaming. 
 * @member {number} external:LinphoneCore#videoPort
**/
/**
 * Controls video preview enablement.
 * @member {boolean} external:LinphoneCore#videoPreviewEnabled
**/
/**
 * Set the path to the file storing the zrtp secrets cache. 
 * @member {string} external:LinphoneCore#zrtpSecretsFile
**/

/**
 * This method is used to abort a user authentication request initiated by LinphoneCore from the auth_info_requested
 * callback of LinphoneCoreVTable. 
 * @function external:LinphoneCore#abortAuthentication
 * @param {external:LinphoneAuthInfo} info - 
 * @returns {void} 
**/

/**
 * Accept an incoming call.
 * @function external:LinphoneCore#acceptCall
 * @param {external:LinphoneCall} call - the LinphoneCall object representing the call to be answered. 
 * @returns {number} 
**/

/**
 * Accept call modifications initiated by other end.
 * @function external:LinphoneCore#acceptCallUpdate
 * @param {external:LinphoneCall} call - the LinphoneCall object 
 * @param {external:LinphoneCallParams} params - a LinphoneCallParams object describing the call parameters to accept. 
 * @returns {number} 
**/

/**
 * Accept an incoming call, with parameters.
 * @function external:LinphoneCore#acceptCallWithParams
 * @param {external:LinphoneCall} call - the LinphoneCall object representing the call to be answered. 
 * @param {external:LinphoneCallParams} params - the specific parameters for this call, for example whether video is accepted or not. Use NULL to use default parameters. 
 * @returns {number} 
**/

/**
 * Accept an early media session for an incoming call. This is identical as calling 
 * @function external:LinphoneCore#acceptEarlyMedia
 * @param {external:LinphoneCall} call - the incoming call 
 * @returns {number} 
**/

/**
 * When receiving an incoming, accept to start a media session as early-media. This means the call is not
 * accepted but audio & video streams can be established if the remote party supports early media. However,
 * unlike after call acceptance, mic and camera input are not sent during early-media, though received audio
 * & video are played normally. The call can then later be fully accepted using 
 * @function external:LinphoneCore#acceptEarlyMediaWithParams
 * @param {external:LinphoneCall} call - the call 
 * @param {external:LinphoneCallParams} params - the call params, can be NULL. 
 * @returns {number} 
**/

/**
 * Add all calls into a conference. 
 * @function external:LinphoneCore#addAllToConference
 * @returns {number} 
**/

/**
 * Adds authentication information to the LinphoneCore.
 * @function external:LinphoneCore#addAuthInfo
 * @param {external:LinphoneAuthInfo} info - 
 * @returns {void} 
**/

/**
 * Add a friend to the current buddy list, if 
 * @function external:LinphoneCore#addFriend
 * @param {external:LinphoneFriend} fr -  to add 
 * @returns {void} 
**/

/**
 * Add a proxy configuration. This will start registration on the proxy, if registration is enabled. 
 * @function external:LinphoneCore#addProxyConfig
 * @param {external:LinphoneProxyConfig} config - 
 * @returns {number} 
**/

/**
 * Merge a call into a conference. 
 * @function external:LinphoneCore#addToConference
 * @param {external:LinphoneCall} call - an established call, either in LinphoneCallStreamsRunning or LinphoneCallPaused state.
 * @returns {number} 
**/

/**
 * Check if we do not have exceed the number of simultaneous call 
 * @function external:LinphoneCore#canWeAddCall
 * @returns {boolean} 
**/

/**
 * Clear all authentication information. 
 * @function external:LinphoneCore#clearAllAuthInfo
 * @returns {void} 
**/

/**
 * Erase the call log. 
 * @function external:LinphoneCore#clearCallLogs
 * @returns {void} 
**/

/**
 * Erase all proxies from config. 
 * @function external:LinphoneCore#clearProxyConfig
 * @returns {void} 
**/

/**
 * Decline a pending incoming call, with a reason.
 * @function external:LinphoneCore#declineCall
 * @param {external:LinphoneCall} call - the LinphoneCall, must be in the IncomingReceived state. 
 * @param {linphone.Reason} reason - the reason for rejecting the call: LinphoneReasonDeclined or LinphoneReasonBusy 
 * @returns {number} 
**/

/**
 * When receiving a 
 * @function external:LinphoneCore#deferCallUpdate
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/

/**
 * Inconditionnaly disable incoming chat messages. 
 * @function external:LinphoneCore#disableChat
 * @param {linphone.Reason} deny_reason - the deny reason (LinphoneReasonNone has no effect). 
 * @returns {void} 
**/

/**
 * Enable reception of incoming chat messages. By default it is enabled but it can be disabled with 
 * @function external:LinphoneCore#enableChat
 * @returns {void} 
**/

/**
 * Enable or disable the use of the specified payload type. 
 * @function external:LinphoneCore#enablePayloadType
 * @param {external:PayloadType} pt - The PayloadType to enable or disable. It can be retrieved using 
 * @param {boolean} enable - TRUE to enable the payload type, FALSE to disable it. 
 * @returns {number} 
**/

/**
 * Moves the local participant inside the conference. 
 * @function external:LinphoneCore#enterConference
 * @returns {number} 
**/

/**
 * Find authentication info matching realm, username, domain criterias. First of all, (realm,username) pair
 * are searched. If multiple results (which should not happen because realm are supposed to be unique),
 * then domain is added to the search. 
 * @function external:LinphoneCore#findAuthInfo
 * @param {string} realm - the authentication 'realm' (optional) 
 * @param {string} username - the SIP username to be authenticated (mandatory) 
 * @param {string} sip_domain - the SIP domain name (optional) 
 * @returns {external:LinphoneAuthInfo} 
**/

/**
 * Search from the list of current calls if a remote address match uri
 * @function external:LinphoneCore#findCallFromUri
 * @param {string} uri - which should match call remote uri 
 * @returns {external:LinphoneCall} 
**/

/**
 * Search a LinphoneFriend by its address. 
 * @function external:LinphoneCore#findFriend
 * @param {external:LinphoneAddress} addr - The address to use to search the friend. 
 * @returns {external:LinphoneFriend} 
**/

/**
 * Get payload type from mime type and clock rate
 * @function external:LinphoneCore#findPayloadType
 * @param {string} type - payload mime type (I.E SPEEX, PCMU, VP8) 
 * @param {number} rate - can be 
 * @param {number} channels - number of channels, can be 
 * @returns {external:PayloadType} 
**/

/**
 * Get the audio port range from which is randomly chosen the UDP port used for audio streaming. 
 * @function external:LinphoneCore#getAudioPortRange
 * @param {number} min_port - 
 * @param {number} max_port - 
 * @returns {void} 
**/

/**
 * Get the call with the remote_address specified 
 * @function external:LinphoneCore#getCallByRemoteAddress
 * @param {string} remote_address - 
 * @returns {external:LinphoneCall} 
**/

/**
 * Retrieve an existing chat room whose peer is the supplied address, if exists. 
 * @function external:LinphoneCore#getChatRoom
 * @param {external:LinphoneAddress} addr - a linphone address. 
 * @returns {external:LinphoneChatRoom} 
**/

/**
 * Returns the default proxy configuration, that is the one used to determine the current identity. 
 * @function external:LinphoneCore#getDefaultProxy
 * @param {external:LinphoneProxyConfig} config - 
 * @returns {number} 
**/

/**
 * Search a LinphoneFriend by its reference key. 
 * @function external:LinphoneCore#getFriendByRefKey
 * @param {string} key - The reference key to use to search the friend. 
 * @returns {external:LinphoneFriend} 
**/

/**
 * Create a new chat room for messaging from a sip uri like sip:
 * @function external:LinphoneCore#getOrCreateChatRoom
 * @param {string} to - destination address for messages 
 * @returns {external:LinphoneChatRoom} 
**/

/**
 * Retrieves the port configuration used for each transport (udp, tcp, tls). A zero value port for a given
 * transport means the transport is not used. A value of LC_SIP_TRANSPORT_RANDOM (-1) means the port is
 * to be choosen randomly by the system. 
 * @function external:LinphoneCore#getSipTransports
 * @param {external:LCSipTransports} transports - 
 * @returns {number} 
**/

/**
 * Retrieves the real port number assigned for each sip transport (udp, tcp, tls). A zero value means that
 * the transport is not activated. If LC_SIP_TRANSPORT_RANDOM was passed to 
 * @function external:LinphoneCore#getSipTransportsUsed
 * @param {external:LCSipTransports} tr - 
 * @returns {void} 
**/

/**
 * Get the video port range from which is randomly chosen the UDP port used for video streaming. 
 * @function external:LinphoneCore#getVideoPortRange
 * @param {number} min_port - 
 * @param {number} max_port - 
 * @returns {void} 
**/

/**
 * Returns TRUE if there is a call running. 
 * @function external:LinphoneCore#inCall
 * @returns {boolean} 
**/

/**
 * Interpret a call destination as supplied by the user, and returns a fully qualified LinphoneAddress.
 * @function external:LinphoneCore#interpretUrl
 * @param {string} url - 
 * @returns {external:LinphoneAddress} 
**/

/**
 * Initiates an outgoing call
 * @function external:LinphoneCore#invite
 * @param {string} url - the destination of the call (sip address, or phone number).
 * @returns {external:LinphoneCall} 
**/

/**
 * Initiates an outgoing call given a destination LinphoneAddress
 * @function external:LinphoneCore#inviteAddress
 * @param {external:LinphoneAddress} addr - the destination of the call (sip address).
 * @returns {external:LinphoneCall} 
**/

/**
 * Initiates an outgoing call given a destination LinphoneAddress
 * @function external:LinphoneCore#inviteAddressWithParams
 * @param {external:LinphoneAddress} addr - the destination of the call (sip address). 
 * @param {external:LinphoneCallParams} params - call parameters
 * @returns {external:LinphoneCall} 
**/

/**
 * Initiates an outgoing call according to supplied call parameters
 * @function external:LinphoneCore#inviteWithParams
 * @param {string} url - the destination of the call (sip address, or phone number). 
 * @param {external:LinphoneCallParams} params - call parameters
 * @returns {external:LinphoneCall} 
**/

/**
 * Main loop function. It is crucial that your application call it periodically.
 * @function external:LinphoneCore#iterate
 * @returns {void} 
**/

/**
 * Moves the local participant out of the conference. 
 * @function external:LinphoneCore#leaveConference
 * @returns {number} 
**/

/**
 * Migrate configuration so that all SIP transports are enabled. Versions of linphone < 3.7 did not support
 * using multiple SIP transport simultaneously. This function helps application to migrate the configuration
 * so that all transports are enabled. Existing proxy configuration are added a transport parameter so that
 * they continue using the unique transport that was set previously. This function must be used just after
 * creating the core, before any call to 
 * @function external:LinphoneCore#migrateToMultiTransport
 * @returns {number} 
**/

/**
 * Create a 
 * @function external:LinphoneCore#newAddress
 * @param {string} address - String containing the user supplied address 
 * @returns {external:LinphoneAddress} 
**/

/**
 * Create an authentication information with default values from Linphone core. 
 * @function external:LinphoneCore#newAuthInfo
 * @param {string} username - String containing the username part of the authentication credentials 
 * @param {string} userid - String containing the username to use to calculate the authentication digest (optional) 
 * @param {string} passwd - String containing the password of the authentication credentials (optional, either passwd or ha1 must be set) 
 * @param {string} ha1 - String containing a ha1 hash of the password (optional, either passwd or ha1 must be set) 
 * @param {string} realm - String used to discriminate different SIP authentication domains (optional) 
 * @param {string} domain - 
 * @returns {external:LinphoneAuthInfo} 
**/

/**
 * Create a new chat room for messaging from a sip uri like sip:
 * @function external:LinphoneCore#newChatRoom
 * @param {string} to - destination address for messages 
 * @returns {external:LinphoneChatRoom} 
**/

/**
 * Get default call parameters reflecting current linphone core configuration 
 * @function external:LinphoneCore#newDefaultCallParameters
 * @returns {external:LinphoneCallParams} 
**/

/**
 * Create a default LinphoneFriend. 
 * @function external:LinphoneCore#newFriend
 * @returns {external:LinphoneFriend} 
**/

/**
 * Create a LinphoneFriend from the given address. 
 * @function external:LinphoneCore#newFriendWithAddress
 * @param {string} address - A string containing the address to create the LinphoneFriend from 
 * @returns {external:LinphoneFriend} 
**/

/**
 * Create a LpConfig object from a user config file. 
 * @function external:LinphoneCore#newLpConfig
 * @param {string} filename - The filename of the config file to read to fill the instantiated LpConfig 
 * @returns {external:LpConfig} 
**/

/**
 * Create a LinphonePresenceActivity with the given type and description. 
 * @function external:LinphoneCore#newPresenceActivity
 * @param {linphone.PresenceActivityType} acttype - The 
 * @param {string} description - An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. 
 * @returns {external:LinphonePresenceActivity} 
**/

/**
 * Create a default LinphonePresenceModel. 
 * @function external:LinphoneCore#newPresenceModel
 * @returns {external:LinphonePresenceModel} 
**/

/**
 * Create a LinphonePresenceModel with the given activity type and activity description. 
 * @function external:LinphoneCore#newPresenceModelWithActivity
 * @param {linphone.PresenceActivityType} acttype - The 
 * @param {string} description - An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. 
 * @returns {external:LinphonePresenceModel} 
**/

/**
 * Create a LinphonePresenceModel with the given activity type, activity description, note content and note
 * language. 
 * @function external:LinphoneCore#newPresenceModelWithActivityAndNote
 * @param {linphone.PresenceActivityType} acttype - The 
 * @param {string} description - An additional description of the activity to set for the activity. Can be NULL if no additional description is to be added. 
 * @param {string} note - The content of the note to be added to the created model. 
 * @param {string} lang - The language of the note to be added to the created model. 
 * @returns {external:LinphonePresenceModel} 
**/

/**
 * Create a LinphonePresenceNote with the given content and language. 
 * @function external:LinphoneCore#newPresenceNote
 * @param {string} content - The content of the note to be created. 
 * @param {string} lang - The language of the note to be created. 
 * @returns {external:LinphonePresenceNote} 
**/

/**
 * Create a LinphonePresencePerson with the given id. 
 * @function external:LinphoneCore#newPresencePerson
 * @param {string} id - The id of the person to be created. 
 * @returns {external:LinphonePresencePerson} 
**/

/**
 * Create a LinphonePresenceService with the given id, basic status and contact. 
 * @function external:LinphoneCore#newPresenceService
 * @param {string} id - The id of the service to be created. 
 * @param {linphone.PresenceBasicStatus} basic_status - The basic status of the service to be created. 
 * @param {string} contact - A string containing a contact information corresponding to the service to be created. 
 * @returns {external:LinphonePresenceService} 
**/

/**
 * Create a proxy config with default values from Linphone core. 
 * @function external:LinphoneCore#newProxyConfig
 * @returns {external:LinphoneProxyConfig} 
**/

/**
 * Create a publish context for an event state. After being created, the publish must be sent using 
 * @function external:LinphoneCore#newPublish
 * @param {external:LinphoneAddress} resource - the resource uri for the event 
 * @param {string} event - the event name 
 * @param {number} expires - the lifetime of the publication 
 * @returns {external:LinphoneEvent} 
**/

/**
 * Create an outgoing subscription, specifying the destination resource, the event name, and an optional
 * content body. If accepted, the subscription runs for a finite period, but is automatically renewed if
 * not terminated before. Unlike 
 * @function external:LinphoneCore#newSubscribe
 * @param {external:LinphoneAddress} resource - the destination resource 
 * @param {string} event - the event name 
 * @param {number} expires - the whished duration of the subscription 
 * @returns {external:LinphoneEvent} 
**/

/**
 * Notify all friends that have subscribed 
 * @function external:LinphoneCore#notifyAllFriends
 * @param {external:LinphonePresenceModel} presence -  to notify 
 * @returns {void} 
**/

/**
 * Pause all currently running calls. 
 * @function external:LinphoneCore#pauseAllCalls
 * @returns {number} 
**/

/**
 * Pauses the call. If a music file has been setup using linphone_core_set_play_file(), this file will be
 * played to the remote user. 
 * @function external:LinphoneCore#pauseCall
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/

/**
 * Tells whether the specified payload type is enabled. 
 * @function external:LinphoneCore#payloadTypeEnabled
 * @param {external:PayloadType} pt - The PayloadType we want to know is enabled or not. 
 * @returns {boolean} 
**/

/**
 * Plays a dtmf sound to the local user. 
 * @function external:LinphoneCore#playDtmf
 * @param {external:char} dtmf - DTMF to play ['0'..'16'] | '#' | '#' 
 * @param {number} duration_ms - duration in ms, -1 means play until next further call to 
 * @returns {void} 
**/

/**
 * Plays an audio file to the local user. This function works at any time, during calls, or when no calls
 * are running. It doesn't request the underlying audio system to support multiple playback streams. 
 * @function external:LinphoneCore#playLocal
 * @param {string} audiofile - path to audio file in wav PCM 16 bit format. 
 * @returns {number} 
**/

/**
 * Publish an event state. This first create a LinphoneEvent with 
 * @function external:LinphoneCore#publish
 * @param {external:LinphoneAddress} resource - the resource uri for the event 
 * @param {string} event - the event name 
 * @param {number} expires - the lifetime of the publication 
 * @param {external:LinphoneContent} body - the actual published data 
 * @returns {external:LinphoneEvent} 
**/

/**
 * Redirect the specified call to the given redirect URI. 
 * @function external:LinphoneCore#redirectCall
 * @param {external:LinphoneCall} call - The 
 * @param {string} redirect_uri - The URI to redirect the call to. 
 * @returns {number} 
**/

/**
 * force registration refresh to be initiated upon next iterate 
 * @function external:LinphoneCore#refreshRegisters
 * @returns {void} 
**/

/**
 * Black list a friend. same as 
 * @function external:LinphoneCore#rejectSubscriber
 * @param {external:LinphoneFriend} lf -  to add 
 * @returns {void} 
**/

/**
 * Update detection of sound devices.
 * @function external:LinphoneCore#reloadSoundDevices
 * @returns {void} 
**/

/**
 * Update detection of camera devices.
 * @function external:LinphoneCore#reloadVideoDevices
 * @returns {void} 
**/

/**
 * Removes an authentication information object. 
 * @function external:LinphoneCore#removeAuthInfo
 * @param {external:LinphoneAuthInfo} info - 
 * @returns {void} 
**/

/**
 * Remove a specific call log from call history list. This function destroys the call log object. It must
 * not be accessed anymore by the application after calling this function. 
 * @function external:LinphoneCore#removeCallLog
 * @param {external:LinphoneCallLog} call_log -  object to remove. 
 * @returns {void} 
**/

/**
 * remove a friend from the buddy list 
 * @function external:LinphoneCore#removeFriend
 * @param {external:LinphoneFriend} fr -  to add 
 * @returns {void} 
**/

/**
 * Remove a call from the conference. 
 * @function external:LinphoneCore#removeFromConference
 * @param {external:LinphoneCall} call - a call that has been previously merged into the conference.
 * @returns {number} 
**/

/**
 * Removes a proxy configuration.
 * @function external:LinphoneCore#removeProxyConfig
 * @param {external:LinphoneProxyConfig} config - 
 * @returns {void} 
**/

/**
 * Reset the counter of missed calls. 
 * @function external:LinphoneCore#resetMissedCallsCount
 * @returns {void} 
**/

/**
 * Resumes the call. 
 * @function external:LinphoneCore#resumeCall
 * @param {external:LinphoneCall} call - 
 * @returns {number} 
**/

/**
 * Send the specified dtmf.
 * @function external:LinphoneCore#sendDtmf
 * @param {external:char} dtmf - The dtmf name specified as a char, such as '0', '#' etc... 
 * @returns {void} 
**/

/**
 * Sets the UDP port range from which to randomly select the port used for audio streaming. 
 * @function external:LinphoneCore#setAudioPortRange
 * @param {number} min_port - 
 * @param {number} max_port - 
 * @returns {void} 
**/

/**
 * Assign an audio file to be played locally upon call failure, for a given reason. 
 * @function external:LinphoneCore#setCallErrorTone
 * @param {linphone.Reason} reason - the 
 * @param {string} audiofile - a wav file to be played when such call failure happens. 
 * @returns {void} 
**/

/**
 * Sets the user agent string used in SIP messages. 
 * @function external:LinphoneCore#setUserAgent
 * @param {string} ua_name - 
 * @param {string} version - 
 * @returns {void} 
**/

/**
 * Sets the UDP port range from which to randomly select the port used for video streaming. 
 * @function external:LinphoneCore#setVideoPortRange
 * @param {number} min_port - 
 * @param {number} max_port - 
 * @returns {void} 
**/

/**
 * Returns true if the specified sound device can capture sound.
 * @function external:LinphoneCore#soundDeviceCanCapture
 * @param {string} device - the device name as returned by 
 * @returns {boolean} 
**/

/**
 * Returns true if the specified sound device can play sound.
 * @function external:LinphoneCore#soundDeviceCanPlayback
 * @param {string} device - the device name as returned by 
 * @returns {boolean} 
**/

/**
 * Check if a call will need the sound resources.
 * @function external:LinphoneCore#soundResourcesLocked
 * @returns {boolean} 
**/

/**
 * Special function to warm up dtmf feeback stream. 
 * @function external:LinphoneCore#startDtmfStream
 * @returns {void} 
**/

/**
 * Stops playing a dtmf started by 
 * @function external:LinphoneCore#stopDtmf
 * @returns {void} 
**/

/**
 * Special function to stop dtmf feed back function. Must be called before entering BG mode 
 * @function external:LinphoneCore#stopDtmfStream
 * @returns {void} 
**/

/**
 * Whenever the liblinphone is playing a ring to advertise an incoming call or ringback of an outgoing call,
 * this function stops the ringing. Typical use is to stop ringing when the user requests to ignore the
 * call.
 * @function external:LinphoneCore#stopRinging
 * @returns {void} 
**/

/**
 * Create an outgoing subscription, specifying the destination resource, the event name, and an optional
 * content body. If accepted, the subscription runs for a finite period, but is automatically renewed if
 * not terminated before. 
 * @function external:LinphoneCore#subscribe
 * @param {external:LinphoneAddress} resource - the destination resource 
 * @param {string} event - the event name 
 * @param {number} expires - the whished duration of the subscription 
 * @param {external:LinphoneContent} body - an optional body, may be NULL. 
 * @returns {external:LinphoneEvent} 
**/

/**
 * Terminates all the calls.
 * @function external:LinphoneCore#terminateAllCalls
 * @returns {number} 
**/

/**
 * Terminates a call.
 * @function external:LinphoneCore#terminateCall
 * @param {external:LinphoneCall} call - the LinphoneCall object representing the call to be terminated. 
 * @returns {number} 
**/

/**
 * Terminates the conference and the calls associated with it. 
 * @function external:LinphoneCore#terminateConference
 * @returns {number} 
**/

/**
 * Performs a simple call transfer to the specified destination.
 * @function external:LinphoneCore#transferCall
 * @param {external:LinphoneCall} call - 
 * @param {string} refer_to - 
 * @returns {number} 
**/

/**
 * Transfer a call to destination of another running call. This is used for "attended transfer" scenarios.
 * 
 * @function external:LinphoneCore#transferCallToAnother
 * @param {external:LinphoneCall} call - a running call you want to transfer 
 * @param {external:LinphoneCall} dest - a running call whose remote person will receive the transfer
 * @returns {number} 
**/

/**
 * Updates a running call according to supplied call parameters or parameters changed in the LinphoneCore.
 * @function external:LinphoneCore#updateCall
 * @param {external:LinphoneCall} call - the call to be updated 
 * @param {external:LinphoneCallParams} params - the new call parameters to use. (may be NULL) 
 * @returns {number} 
**/

/**
 * Tells the core to use a separate window for local camera preview video, instead of inserting local view
 * within the remote video window. 
 * @function external:LinphoneCore#usePreviewWindow
 * @param {boolean} yesno - TRUE to use a separate window, FALSE to insert the preview in the remote video window. 
 * @returns {void} 
**/

/**
 * Specify whether the tls server certificate must be verified when connecting to a SIP/TLS server. 
 * @function external:LinphoneCore#verifyServerCertificates
 * @param {boolean} yesno - 
 * @returns {void} 
**/

/**
 * Specify whether the tls server certificate common name must be verified when connecting to a SIP/TLS server.
 * 
 * @function external:LinphoneCore#verifyServerCn
 * @param {boolean} yesno - 
 * @returns {void} 
**/

/**
 * event for requesting authentication information to application or user. 
 * @event external:LinphoneCore#authInfoRequested
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {string} realm - the realm (domain) on which authentication is required. 
 * @property {string} username - the username that needs to be authenticated. Application shall reply to this callback using 
 * @property {string} domain - 
**/

/**
 * event prototype 
 * @event external:LinphoneCore#buddyInfoUpdated
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {external:LinphoneFriend} lf - 
**/

/**
 * Call encryption changed event. 
 * @event external:LinphoneCore#callEncryptionChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCall} call - the call on which encryption is changed. 
 * @property {boolean} on - whether encryption is activated. 
 * @property {string} authenticationToken - an authentication_token, currently set for ZRTP kind of encryption only. 
**/

/**
 * event to notify a new call-log entry has been added. This is done typically when a call terminates. 
 * @event external:LinphoneCore#callLogUpdated
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCallLog} newcl - the new call log entry added. 
**/

/**
 * Call state notification event. 
 * @event external:LinphoneCore#callStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCall} call - the call object whose state is changed. 
 * @property {linphone.CallState} cstate - the new state of the call 
 * @property {string} message - an informational message about the state. 
**/

/**
 * event for receiving quality statistics for calls. 
 * @event external:LinphoneCore#callStatsUpdated
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCall} call - the call 
 * @property {external:LinphoneCallStats} stats - the call statistics. 
**/

/**
 * event prototype 
 * @event external:LinphoneCore#cbFunc
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {void} userData - 
**/

/**
 * event prototype for configuring status changes notification 
 * @event external:LinphoneCore#configuringStatus
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {linphone.ConfiguringState} status - informational message. 
 * @property {string} message - 
**/

/**
 * event for being notified of DTMFs received. 
 * @event external:LinphoneCore#dtmfReceived
 * @type {object}
 * @property {external:LinphoneCore} lc - the linphone core 
 * @property {external:LinphoneCall} call - the call that received the dtmf 
 * @property {number} dtmf - the ascii code of the dtmf 
**/

/**
 * Global state notification event. 
 * @event external:LinphoneCore#globalStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {linphone.GlobalState} gstate - the global state 
 * @property {string} message - informational message. 
**/

/**
 * event prototype for receiving info messages. 
 * @event external:LinphoneCore#infoReceived
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCall} call - the call whose info message belongs to. 
 * @property {external:LinphoneInfoMessage} msg - the info message. 
**/

/**
 * Is composing notification event prototype.
 * @event external:LinphoneCore#isComposingReceived
 * @type {object}
 * @property {external:LinphoneCore} lc -  object 
 * @property {external:LinphoneChatRoom} room -  involved in the conversation. 
**/

/**
 * Chat message event prototype
 * @event external:LinphoneCore#messageReceived
 * @type {object}
 * @property {external:LinphoneCore} lc -  object 
 * @property {external:LinphoneChatRoom} room -  involved in this conversation. Can be be created by the framework in case 
 * @property {external:LinphoneChatMessage} message - incoming message 
**/

/**
 * Reports that a new subscription request has been received and wait for a decision. Status on this subscription
 * request is notified by 
 * @event external:LinphoneCore#newSubscriptionRequested
 * @type {object}
 * @property {external:LinphoneCore} lc -  object 
 * @property {external:LinphoneFriend} lf -  corresponding to the subscriber 
 * @property {string} url - of the subscriber Callback prototype 
**/

/**
 * Report status change for a friend previously 
 * @event external:LinphoneCore#notifyPresenceReceived
 * @type {object}
 * @property {external:LinphoneCore} lc -  object . 
 * @property {external:LinphoneFriend} lf - Updated 
**/

/**
 * event prototype for notifying the application about notification received from the network. 
 * @event external:LinphoneCore#notifyReceived
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {external:LinphoneEvent} lev - 
 * @property {string} notifiedEvent - 
 * @property {external:LinphoneContent} body - 
**/

/**
 * event prototype for notifying the application about changes of publish states. 
 * @event external:LinphoneCore#publishStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {external:LinphoneEvent} lev - 
 * @property {linphone.PublishState} state - 
**/

/**
 * event prototype 
 * @event external:LinphoneCore#referReceived
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {string} referTo - 
**/

/**
 * Registration state notification event prototype 
 * @event external:LinphoneCore#registrationStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {external:LinphoneProxyConfig} cfg - 
 * @property {linphone.RegistrationState} cstate - 
 * @property {string} message - 
**/

/**
 * event prototype for notifying the application about changes of subscription states, including arrival
 * of new subscriptions. 
 * @event external:LinphoneCore#subscriptionStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - 
 * @property {external:LinphoneEvent} lev - 
 * @property {linphone.SubscriptionState} state - 
**/

/**
 * event for notifying progresses of transfers. 
 * @event external:LinphoneCore#transferStateChanged
 * @type {object}
 * @property {external:LinphoneCore} lc - the LinphoneCore 
 * @property {external:LinphoneCall} transfered - the call that was transfered 
 * @property {linphone.CallState} newCallState - the state of the call to transfer target at the far end. 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum representing the status of a call 
 * @readonly
 * @enum {number}
**/
linphone.CallStatus = {
	/**
	 * The call was sucessful 
	*/
	Success : 0,
	/**
	 * The call was aborted 
	*/
	Aborted : 1,
	/**
	 * The call was missed (unanswered) 
	*/
	Missed : 2,
	/**
	 * The call was declined, either locally or by remote end 
	*/
	Declined : 3
};
/**
 * Get the name of a value of the CallStatus enum as a string.
 * @function linphone#getCallStatusText
 * @param { number } value - One of the values of the CallStatus enum.
**/
linphone.getCallStatusText = function(value) {
	switch (value) {
	case linphone.CallStatus.Success:
		return "Success";
	case linphone.CallStatus.Aborted:
		return "Aborted";
	case linphone.CallStatus.Missed:
		return "Missed";
	case linphone.CallStatus.Declined:
		return "Declined";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Object holding authentication information.
 * @external LinphoneAuthInfo
**/
/**
 * Set domain for which this authentication is valid. This should not be necessary because realm is supposed
 * to be unique and sufficient. However, many SIP servers don't set realm correctly, then domain has to
 * be used to distinguish between several SIP account bearing the same username. 
 * @member {string} external:LinphoneAuthInfo#domain
**/
/**
 * Sets ha1. 
 * @member {string} external:LinphoneAuthInfo#ha1
**/
/**
 * Sets the password. 
 * @member {string} external:LinphoneAuthInfo#passwd
**/
/**
 * Set realm. 
 * @member {string} external:LinphoneAuthInfo#realm
**/
/**
 * Sets userid. 
 * @member {string} external:LinphoneAuthInfo#userid
**/
/**
 * Sets the username. 
 * @member {string} external:LinphoneAuthInfo#username
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Object representing full details about a signaling error or status. All LinphoneErrorInfo object returned by the liblinphone API are readonly and transcients. For safety they must be used immediately after obtaining them. Any other function call to the liblinphone may change their content or invalidate the pointer. 
 * @external LinphoneErrorInfo
**/
/**
 * Provides additional information regarding the failure. With SIP protocol, the "Reason" and "Warning" headers
 * are returned. 
 * @member {string} external:LinphoneErrorInfo#details
 * @readonly
**/
/**
 * Get textual phrase from the error info. This is the text that is provided by the peer in the protocol
 * (SIP). 
 * @member {string} external:LinphoneErrorInfo#phrase
 * @readonly
**/
/**
 * Get the status code from the low level protocol (ex a SIP status code). 
 * @member {number} external:LinphoneErrorInfo#protocolCode
 * @readonly
**/
/**
 * Get reason code from the error info. 
 * @member {linphone.Reason} external:LinphoneErrorInfo#reason
 * @readonly
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * A chat room is the place where text messages are exchanged. 
 * @external LinphoneChatRoom
**/
/**
 * Returns back pointer to LinphoneCore object. 
 * @member {external:LinphoneCore} external:LinphoneChatRoom#lc
 * @readonly
**/
/**
 * get peer address 
 * @member {external:LinphoneAddress} external:LinphoneChatRoom#peerAddress
 * @readonly
**/
/**
 * Tells whether the remote is currently composing a message. 
 * @member {boolean} external:LinphoneChatRoom#remoteComposing
 * @readonly
**/

/**
 * Notify the destination of the chat message being composed that the user is typing a new message. 
 * @function external:LinphoneChatRoom#compose
 * @returns {void} 
**/

/**
 * Create a message attached to a dedicated chat room; 
 * @function external:LinphoneChatRoom#newMessage
 * @param {string} message - text message, NULL if absent. 
 * @returns {external:LinphoneChatMessage} 
**/

/**
 * Create a message attached to a dedicated chat room; 
 * @function external:LinphoneChatRoom#newMessage2
 * @param {string} message - text message, NULL if absent. 
 * @param {string} external_body_url - the URL given in external body or NULL. 
 * @param {linphone.ChatMessageState} state - the LinphoneChatMessage.State of the message. 
 * @param {external:time_t} time - the time_t at which the message has been received/sent. 
 * @param {boolean} is_read - TRUE if the message should be flagged as read, FALSE otherwise. 
 * @param {boolean} is_incoming - TRUE if the message has been received, FALSE otherwise. 
 * @returns {external:LinphoneChatMessage} 
**/

/**
 * Send a message to peer member of this chat room. 
 * @function external:LinphoneChatRoom#sendMessage2
 * @param {external:LinphoneChatMessage} msg -  message to be sent 
 * @param {external:LinphoneChatMessageStateChangedCb} status_cb - LinphoneChatMessageStateChangeCb status callback invoked when message is delivered or could not be delivered. May be NULL 
 * @param {void} ud - user data for the status cb. 
 * @returns {void} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Presence note type holding information about a presence note. 
 * @external LinphonePresenceNote
**/
/**
 * Sets the content of a presence note. 
 * @member {string} external:LinphonePresenceNote#content
**/
/**
 * Sets the language of a presence note. 
 * @member {string} external:LinphonePresenceNote#lang
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * LinphoneGlobalState describes the global state of the LinphoneCore object. It is notified via the 
 * @readonly
 * @enum {number}
**/
linphone.GlobalState = {
	Off : 0,
	Startup : 1,
	On : 2,
	Shutdown : 3,
	Configuring : 4
};
/**
 * Get the name of a value of the GlobalState enum as a string.
 * @function linphone#getGlobalStateText
 * @param { number } value - One of the values of the GlobalState enum.
**/
linphone.getGlobalStateText = function(value) {
	switch (value) {
	case linphone.GlobalState.Off:
		return "Off";
	case linphone.GlobalState.Startup:
		return "Startup";
	case linphone.GlobalState.On:
		return "On";
	case linphone.GlobalState.Shutdown:
		return "Shutdown";
	case linphone.GlobalState.Configuring:
		return "Configuring";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Presence person holding information about a presence person. 
 * @external LinphonePresencePerson
**/
/**
 * Sets the id of a presence person. 
 * @member {string} external:LinphonePresencePerson#id
**/
/**
 * Gets the number of activities included in the presence person. 
 * @member {number} external:LinphonePresencePerson#nbActivities
 * @readonly
**/
/**
 * Gets the number of activities notes included in the presence person. 
 * @member {number} external:LinphonePresencePerson#nbActivitiesNotes
 * @readonly
**/
/**
 * Gets the number of notes included in the presence person. 
 * @member {number} external:LinphonePresencePerson#nbNotes
 * @readonly
**/

/**
 * Adds an activities note to a presence person. 
 * @function external:LinphonePresencePerson#addActivitiesNote
 * @param {external:LinphonePresenceNote} note - The 
 * @returns {number} 
**/

/**
 * Adds an activity to a presence person. 
 * @function external:LinphonePresencePerson#addActivity
 * @param {external:LinphonePresenceActivity} activity - The 
 * @returns {number} 
**/

/**
 * Adds a note to a presence person. 
 * @function external:LinphonePresencePerson#addNote
 * @param {external:LinphonePresenceNote} note - The 
 * @returns {number} 
**/

/**
 * Clears the activities of a presence person. 
 * @function external:LinphonePresencePerson#clearActivities
 * @returns {number} 
**/

/**
 * Clears the activities notes of a presence person. 
 * @function external:LinphonePresencePerson#clearActivitiesNotes
 * @returns {number} 
**/

/**
 * Clears the notes of a presence person. 
 * @function external:LinphonePresencePerson#clearNotes
 * @returns {number} 
**/

/**
 * Gets the nth activities note of a presence person. 
 * @function external:LinphonePresencePerson#getNthActivitiesNote
 * @param {number} idx - The index of the activities note to get (the first note having the index 0). 
 * @returns {external:LinphonePresenceNote} 
**/

/**
 * Gets the nth activity of a presence person. 
 * @function external:LinphonePresencePerson#getNthActivity
 * @param {number} idx - The index of the activity to get (the first activity having the index 0). 
 * @returns {external:LinphonePresenceActivity} 
**/

/**
 * Gets the nth note of a presence person. 
 * @function external:LinphonePresencePerson#getNthNote
 * @param {number} idx - The index of the note to get (the first note having the index 0). 
 * @returns {external:LinphonePresenceNote} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * 
 * @external LinphoneTunnel
**/
/**
 * Tells whether tunnel auto detection is enabled. 
 * @member {boolean} external:LinphoneTunnel#autoDetectEnabled
 * @readonly
**/

/**
 * Add tunnel server configuration
 * @function external:LinphoneTunnel#addServer
 * @param {external:LinphoneTunnelConfig} tunnel_config - object 
 * @returns {void} 
**/

/**
 * Start tunnel need detection. 
 * @function external:LinphoneTunnel#autoDetect
 * @returns {void} 
**/

/**
 * Sets whether tunneling of SIP and RTP is required. 
 * @function external:LinphoneTunnel#enable
 * @param {boolean} enabled - If true enter in tunneled mode, if false exits from tunneled mode. The TunnelManager takes care of refreshing SIP registration when switching on or off the tunneled mode. 
 * @returns {void} 
**/

/**
 * Retrieve optional http proxy configuration previously set with 
 * @function external:LinphoneTunnel#getHttpProxy
 * @param {string} host - Http proxy host. 
 * @param {number} port - http proxy port. 
 * @param {string} username - optional http proxy username if the proxy request authentication. Currently only basic authentication is supported. Use NULL if not needed. 
 * @param {string} passwd - optional http proxy password. Use NULL if not needed. 
 * @returns {void} 
**/

/**
 * Remove tunnel server configuration
 * @function external:LinphoneTunnel#removeServer
 * @param {external:LinphoneTunnelConfig} tunnel_config - object 
 * @returns {void} 
**/

/**
 * Set an optional http proxy to go through when connecting to tunnel server. 
 * @function external:LinphoneTunnel#setHttpProxy
 * @param {string} host - Http proxy host. 
 * @param {number} port - http proxy port. 
 * @param {string} username - optional http proxy username if the proxy request authentication. Currently only basic authentication is supported. Use NULL if not needed. 
 * @param {string} passwd - optional http proxy password. Use NULL if not needed. 
 * @returns {void} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum for publish states. 
 * @readonly
 * @enum {number}
**/
linphone.PublishState = {
	/**
	 * Initial state, do not use 
	*/
	None : 0,
	/**
	 * An outgoing publish was created and submitted 
	*/
	Progress : 1,
	/**
	 * Publish is accepted. 
	*/
	Ok : 2,
	/**
	 * Publish encoutered an error, 
	*/
	Error : 3,
	/**
	 * Publish is about to expire, only sent if [sip]->refresh_generic_publish property is set to 0. 
	*/
	Expiring : 4,
	/**
	 * Event has been un published 
	*/
	Cleared : 5
};
/**
 * Get the name of a value of the PublishState enum as a string.
 * @function linphone#getPublishStateText
 * @param { number } value - One of the values of the PublishState enum.
**/
linphone.getPublishStateText = function(value) {
	switch (value) {
	case linphone.PublishState.None:
		return "None";
	case linphone.PublishState.Progress:
		return "Progress";
	case linphone.PublishState.Ok:
		return "Ok";
	case linphone.PublishState.Error:
		return "Error";
	case linphone.PublishState.Expiring:
		return "Expiring";
	case linphone.PublishState.Cleared:
		return "Cleared";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing transport type for LinphoneAddress. 
 * @readonly
 * @enum {number}
**/
linphone.TransportType = {
	Udp : 0,
	Tcp : 1,
	Tls : 2,
	Dtls : 3
};
/**
 * Get the name of a value of the TransportType enum as a string.
 * @function linphone#getTransportTypeText
 * @param { number } value - One of the values of the TransportType enum.
**/
linphone.getTransportTypeText = function(value) {
	switch (value) {
	case linphone.TransportType.Udp:
		return "Udp";
	case linphone.TransportType.Tcp:
		return "Tcp";
	case linphone.TransportType.Tls:
		return "Tls";
	case linphone.TransportType.Dtls:
		return "Dtls";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * The LinphoneCallParams is an object containing various call related parameters. It can be used to retrieve parameters from a currently running call or modify the call's characteristics dynamically. 
 * @external LinphoneCallParams
**/
/**
 * Refine bandwidth settings for this call by setting a bandwidth limit for audio streams. As a consequence,
 * codecs whose bitrates are not compatible with this limit won't be used. 
 * @member {number} external:LinphoneCallParams#audioBandwidthLimit
**/
/**
 * Enable sending of real early media (during outgoing calls). 
 * @member {boolean} external:LinphoneCallParams#earlyMediaSendingEnabled
**/
/**
 * Indicate low bandwith mode. Configuring a call to low bandwidth mode will result in the core to activate
 * several settings for the call in order to ensure that bitrate usage is lowered to the minimum possible.
 * Typically, ptime (packetization time) will be increased, audio codec's output bitrate will be targetted
 * to 20kbit/s provided that it is achievable by the codec selected after SDP handshake. Video is automatically
 * disabled. 
 * @member {boolean} external:LinphoneCallParams#lowBandwidthEnabled
**/
/**
 * Set requested media encryption for a call. 
 * @member {linphone.MediaEncryption} external:LinphoneCallParams#mediaEncryption
**/
/**
 * Set requested level of privacy for the call.  
 * @member {external:LinphonePrivacyMask} external:LinphoneCallParams#privacy
**/
/**
 * Gets the size of the video that is received. 
 * @member {external:MSVideoSize} external:LinphoneCallParams#receivedVideoSize
 * @readonly
**/
/**
 * Enable recording of the call (voice-only). This function must be used before the call parameters are assigned
 * to the call. The call recording can be started and paused after the call is established with 
 * @member {string} external:LinphoneCallParams#recordFile
**/
/**
 * Gets the size of the video that is sent. 
 * @member {external:MSVideoSize} external:LinphoneCallParams#sentVideoSize
 * @readonly
**/
/**
 * Set the session name of the media session (ie in SDP). Subject from the SIP message (which is different)
 * can be set using linphone_call_params_set_custom_header(). 
 * @member {string} external:LinphoneCallParams#sessionName
**/
/**
 * Returns the audio codec used in the call, described as a PayloadType structure. 
 * @member {external:PayloadType} external:LinphoneCallParams#usedAudioCodec
 * @readonly
**/
/**
 * Returns the video codec used in the call, described as a PayloadType structure. 
 * @member {external:PayloadType} external:LinphoneCallParams#usedVideoCodec
 * @readonly
**/
/**
 * Enable video stream. 
 * @member {boolean} external:LinphoneCallParams#videoEnabled
**/

/**
 * Add a custom SIP header in the INVITE for a call. 
 * @function external:LinphoneCallParams#addCustomHeader
 * @param {string} header_name - The name of the header to add. 
 * @param {string} header_value - The content of the header to add. 
 * @returns {void} 
**/

/**
 * Copy existing LinphoneCallParams to a new LinphoneCallParams object. 
 * @function external:LinphoneCallParams#copy
 * @returns {external:LinphoneCallParams} 
**/

/**
 * Get a custom SIP header. 
 * @function external:LinphoneCallParams#getCustomHeader
 * @param {string} header_name - The name of the header to get. 
 * @returns {string} 
**/

/**
 * Returns true if the call is part of the locally managed conference. 
 * @function external:LinphoneCallParams#localConferenceMode
 * @returns {boolean} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing uPnP states. 
 * @readonly
 * @enum {number}
**/
linphone.UpnpState = {
	/**
	 * uPnP is not activate 
	*/
	Idle : 0,
	/**
	 * uPnP process is in progress 
	*/
	Pending : 1,
	/**
	 * Internal use: Only used by port binding 
	*/
	Adding : 2,
	/**
	 * Internal use: Only used by port binding 
	*/
	Removing : 3,
	/**
	 * uPnP is not available 
	*/
	NotAvailable : 4,
	/**
	 * uPnP is enabled 
	*/
	Ok : 5,
	/**
	 * uPnP processing has failed 
	*/
	Ko : 6,
	/**
	 * IGD router is blacklisted 
	*/
	Blacklisted : 7
};
/**
 * Get the name of a value of the UpnpState enum as a string.
 * @function linphone#getUpnpStateText
 * @param { number } value - One of the values of the UpnpState enum.
**/
linphone.getUpnpStateText = function(value) {
	switch (value) {
	case linphone.UpnpState.Idle:
		return "Idle";
	case linphone.UpnpState.Pending:
		return "Pending";
	case linphone.UpnpState.Adding:
		return "Adding";
	case linphone.UpnpState.Removing:
		return "Removing";
	case linphone.UpnpState.NotAvailable:
		return "NotAvailable";
	case linphone.UpnpState.Ok:
		return "Ok";
	case linphone.UpnpState.Ko:
		return "Ko";
	case linphone.UpnpState.Blacklisted:
		return "Blacklisted";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * LinphoneCallState enum represents the different state a call can reach into. The application is notified
 * of state changes through the 
 * @readonly
 * @enum {number}
**/
linphone.CallState = {
	/**
	 * Initial call state 
	*/
	Idle : 0,
	/**
	 * This is a new incoming call 
	*/
	IncomingReceived : 1,
	/**
	 * An outgoing call is started 
	*/
	OutgoingInit : 2,
	/**
	 * An outgoing call is in progress 
	*/
	OutgoingProgress : 3,
	/**
	 * An outgoing call is ringing at remote end 
	*/
	OutgoingRinging : 4,
	/**
	 * An outgoing call is proposed early media 
	*/
	OutgoingEarlyMedia : 5,
	/**
	 * Connected, the call is answered 
	*/
	Connected : 6,
	/**
	 * The media streams are established and running 
	*/
	StreamsRunning : 7,
	/**
	 * The call is pausing at the initiative of local end 
	*/
	Pausing : 8,
	/**
	 * The call is paused, remote end has accepted the pause 
	*/
	Paused : 9,
	/**
	 * The call is being resumed by local end 
	*/
	Resuming : 10,
	/**
	 * The call is being transfered to another party, resulting in a new outgoing call to follow immediately
	 * 
	*/
	Refered : 11,
	/**
	 * The call encountered an error 
	*/
	Error : 12,
	/**
	 * The call ended normally 
	*/
	End : 13,
	/**
	 * The call is paused by remote end 
	*/
	PausedByRemote : 14,
	/**
	 * The call's parameters change is requested by remote end, used for example when video is added by remote
	 * 
	*/
	UpdatedByRemote : 15,
	/**
	 * We are proposing early media to an incoming call 
	*/
	IncomingEarlyMedia : 16,
	/**
	 * A call update has been initiated by us 
	*/
	Updating : 17,
	/**
	 * The call object is no more retained by the core 
	*/
	Released : 18
};
/**
 * Get the name of a value of the CallState enum as a string.
 * @function linphone#getCallStateText
 * @param { number } value - One of the values of the CallState enum.
**/
linphone.getCallStateText = function(value) {
	switch (value) {
	case linphone.CallState.Idle:
		return "Idle";
	case linphone.CallState.IncomingReceived:
		return "IncomingReceived";
	case linphone.CallState.OutgoingInit:
		return "OutgoingInit";
	case linphone.CallState.OutgoingProgress:
		return "OutgoingProgress";
	case linphone.CallState.OutgoingRinging:
		return "OutgoingRinging";
	case linphone.CallState.OutgoingEarlyMedia:
		return "OutgoingEarlyMedia";
	case linphone.CallState.Connected:
		return "Connected";
	case linphone.CallState.StreamsRunning:
		return "StreamsRunning";
	case linphone.CallState.Pausing:
		return "Pausing";
	case linphone.CallState.Paused:
		return "Paused";
	case linphone.CallState.Resuming:
		return "Resuming";
	case linphone.CallState.Refered:
		return "Refered";
	case linphone.CallState.Error:
		return "Error";
	case linphone.CallState.End:
		return "End";
	case linphone.CallState.PausedByRemote:
		return "PausedByRemote";
	case linphone.CallState.UpdatedByRemote:
		return "UpdatedByRemote";
	case linphone.CallState.IncomingEarlyMedia:
		return "IncomingEarlyMedia";
	case linphone.CallState.Updating:
		return "Updating";
	case linphone.CallState.Released:
		return "Released";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Activities as defined in section 3.2 of RFC 4480 
 * @readonly
 * @enum {number}
**/
linphone.PresenceActivityType = {
	/**
	 * This value is not defined in the RFC, it corresponds to no activity with a basic status of "closed". 
	*/
	Offline : 0,
	/**
	 * This value is not defined in the RFC, it corresponds to no activity with a basic status of "open". 
	*/
	Online : 1,
	/**
	 * The person has a calendar appointment, without specifying exactly of what type. This activity is indicated
	 * if more detailed information is not available or the person chooses not to reveal more information. 
	*/
	Appointment : 2,
	/**
	 * The person is physically away from all interactive communication devices. 
	*/
	Away : 3,
	/**
	 * The person is eating the first meal of the day, usually eaten in the morning. 
	*/
	Breakfast : 4,
	/**
	 * The person is busy, without further details. 
	*/
	Busy : 5,
	/**
	 * The person is having his or her main meal of the day, eaten in the evening or at midday. 
	*/
	Dinner : 6,
	/**
	 * This is a scheduled national or local holiday. 
	*/
	Holiday : 7,
	/**
	 * The person is riding in a vehicle, such as a car, but not steering. 
	*/
	InTransit : 8,
	/**
	 * The person is looking for (paid) work. 
	*/
	LookingForWork : 9,
	/**
	 * The person is eating his or her midday meal. 
	*/
	Lunch : 10,
	/**
	 * The person is scheduled for a meal, without specifying whether it is breakfast, lunch, or dinner, or some
	 * other meal. 
	*/
	Meal : 11,
	/**
	 * The person is in an assembly or gathering of people, as for a business, social, or religious purpose.
	 * A meeting is a sub-class of an appointment. 
	*/
	Meeting : 12,
	/**
	 * The person is talking on the telephone. 
	*/
	OnThePhone : 13,
	/**
	 * The person is engaged in an activity with no defined representation. A string describing the activity
	 * in plain text SHOULD be provided. 
	*/
	Other : 14,
	/**
	 * A performance is a sub-class of an appointment and includes musical, theatrical, and cinematic performances
	 * as well as lectures. It is distinguished from a meeting by the fact that the person may either be lecturing
	 * or be in the audience, with a potentially large number of other people, making interruptions particularly
	 * noticeable. 
	*/
	Performance : 15,
	/**
	 * The person will not return for the foreseeable future, e.g., because it is no longer working for the company.
	 * 
	*/
	PermanentAbsence : 16,
	/**
	 * The person is occupying himself or herself in amusement, sport, or other recreation. 
	*/
	Playing : 17,
	/**
	 * The person is giving a presentation, lecture, or participating in a formal round-table discussion. 
	*/
	Presentation : 18,
	/**
	 * The person is visiting stores in search of goods or services. 
	*/
	Shopping : 19,
	/**
	 * The person is sleeping. 
	*/
	Sleeping : 20,
	/**
	 * The person is observing an event, such as a sports event. 
	*/
	Spectator : 21,
	/**
	 * The person is controlling a vehicle, watercraft, or plane. 
	*/
	Steering : 22,
	/**
	 * The person is on a business or personal trip, but not necessarily in-transit. 
	*/
	Travel : 23,
	/**
	 * The person is watching television. 
	*/
	TV : 24,
	/**
	 * The activity of the person is unknown. 
	*/
	Unknown : 25,
	/**
	 * A period of time devoted to pleasure, rest, or relaxation. 
	*/
	Vacation : 26,
	/**
	 * The person is engaged in, typically paid, labor, as part of a profession or job. 
	*/
	Working : 27,
	/**
	 * The person is participating in religious rites. 
	*/
	Worship : 28
};
/**
 * Get the name of a value of the PresenceActivityType enum as a string.
 * @function linphone#getPresenceActivityTypeText
 * @param { number } value - One of the values of the PresenceActivityType enum.
**/
linphone.getPresenceActivityTypeText = function(value) {
	switch (value) {
	case linphone.PresenceActivityType.Offline:
		return "Offline";
	case linphone.PresenceActivityType.Online:
		return "Online";
	case linphone.PresenceActivityType.Appointment:
		return "Appointment";
	case linphone.PresenceActivityType.Away:
		return "Away";
	case linphone.PresenceActivityType.Breakfast:
		return "Breakfast";
	case linphone.PresenceActivityType.Busy:
		return "Busy";
	case linphone.PresenceActivityType.Dinner:
		return "Dinner";
	case linphone.PresenceActivityType.Holiday:
		return "Holiday";
	case linphone.PresenceActivityType.InTransit:
		return "InTransit";
	case linphone.PresenceActivityType.LookingForWork:
		return "LookingForWork";
	case linphone.PresenceActivityType.Lunch:
		return "Lunch";
	case linphone.PresenceActivityType.Meal:
		return "Meal";
	case linphone.PresenceActivityType.Meeting:
		return "Meeting";
	case linphone.PresenceActivityType.OnThePhone:
		return "OnThePhone";
	case linphone.PresenceActivityType.Other:
		return "Other";
	case linphone.PresenceActivityType.Performance:
		return "Performance";
	case linphone.PresenceActivityType.PermanentAbsence:
		return "PermanentAbsence";
	case linphone.PresenceActivityType.Playing:
		return "Playing";
	case linphone.PresenceActivityType.Presentation:
		return "Presentation";
	case linphone.PresenceActivityType.Shopping:
		return "Shopping";
	case linphone.PresenceActivityType.Sleeping:
		return "Sleeping";
	case linphone.PresenceActivityType.Spectator:
		return "Spectator";
	case linphone.PresenceActivityType.Steering:
		return "Steering";
	case linphone.PresenceActivityType.Travel:
		return "Travel";
	case linphone.PresenceActivityType.TV:
		return "TV";
	case linphone.PresenceActivityType.Unknown:
		return "Unknown";
	case linphone.PresenceActivityType.Vacation:
		return "Vacation";
	case linphone.PresenceActivityType.Working:
		return "Working";
	case linphone.PresenceActivityType.Worship:
		return "Worship";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum describing what has been updated in a LinphoneCallStats object. 
 * @readonly
 * @enum {number}
**/
linphone.CallStatsRTCPUpdate = {
	/**
	 * received_rtcp field of LinphoneCallStats object has been updated 
	*/
	ReceivedRTCPUpdate : 0,
	/**
	 * sent_rtcp field of LinphoneCallStats object has been updated 
	*/
	SentRTCPUpdate : 1
};
/**
 * Get the name of a value of the CallStatsRTCPUpdate enum as a string.
 * @function linphone#getCallStatsRTCPUpdateText
 * @param { number } value - One of the values of the CallStatsRTCPUpdate enum.
**/
linphone.getCallStatsRTCPUpdateText = function(value) {
	switch (value) {
	case linphone.CallStatsRTCPUpdate.ReceivedRTCPUpdate:
		return "ReceivedRTCPUpdate";
	case linphone.CallStatsRTCPUpdate.SentRTCPUpdate:
		return "SentRTCPUpdate";
	default:
		return "?";
	}
};

/**
 * Namespace for non-external variables and objects.
 * @namespace linphone
**/

/**
 * The FileManager object is used to perform operation on local and/or remote files.
 * @external FileManager
**/

/**
 * Create a FileTransfer object to handle the copy of a file.
 * @function external:FileManager#copy
 * @param {string} sourceUrl - The URL of the file to copy
 * @param {string} targetUrl - The URL where to copy the file
 * @param {object} callback - The javascript function to be called when the operation is finished or on error.
 * This function will receive a boolean value telling whether the operation has been successful as its first argument.
 * If the operation failed, it will receive an error string as its second parameter.
 * @returns {external:FileTransfer} The FileTransfer object to handle the copy.
**/

/**
 * Test the existence of a file.
 * @function external:FileManager#exists
 * @param {string} url - The URL of the file to check
 * @param {object} callback - The javascript function to be called when the operation is finished or on error.
 * This function will receive a boolean value telling whether the file exists as its first argument.
 * If there was an error, it will receive an error string as its second parameter.
**/

/**
 * Create a directory.
 * @function external:FileManager#mkdir
 * @param {string} url - The URL of the directory to create
 * @param {object} callback - The javascript function to be called when the operation is finished or on error.
 * This function will receive a boolean value telling whether the directory has been created as its first argument.
 * If there was an error, it will receive an error string as its second parameter.
**/

/**
 * Remove a file or a directory.
 * @function external:FileManager#remove
 * @param {string} url - The URL of the file or directory to remove
 * @param {object} callback - The javascript function to be called when the operation is finished or on error.
 * This function will receive a boolean value telling whether the file or directory has been removed as its first argument.
 * If there was an error, it will receive an error string as its second parameter.
**/



/**
 * The FileTransfer object is used to handle the copy of files. It is created by a call to {@link external:FileManager#copy}.
 * @external FileTransfer
**/

/**
 * Get the error message when a file transfer has failed.
 * @member {string} external:FileTransfer#error
 * @readonly
**/

/**
 * Tells whether a file transfer is finished.
 * @member {boolean} external:FileTransfer#done
 * @readonly
**/

/**
 * Get the number of bytes that have been received.
 * @member {number} external:FileTransfer#receivedBytes
 * @readonly
**/

/**
 * Get the total number of bytes of the file transfer.
 * @member {number} external:FileTransfer#totalBytes
 * @readonly
**/

/**
 * The URL of the source of the file transfer.
 * @member {string} external:FileTransfer#sourceUrl
 * @readonly
**/

/**
 * The URL of the target of the file transfer.
 * @member {string} external:FileTransfer#targetUrl
 * @readonly
**/

/**
 * Start the file transfer
 * @function external:FileTransfer#start
**/

/**
 * Cancel the file transfer
 * @function external:FileTransfer#cancel
**/



/**
 * Get the file manager.
 * @member {external:FileManager} external:LinphoneCore#fileManager
**/

/**
 * Enable/disable the iteration process of the LinphoneCore.
 * @member {boolean} external:LinphoneCore#iterateEnabled
**/

/**
 * Set the interval between two iterations of the LinphoneCore process (in milliseconds).
 * @member {number} external:LinphoneCore#iterateInterval
**/

/**
 * Set the javascript function to be used as the log handler.
 * This function will received the log level as its first parameter and the log message as its second parameter.
 * @member {object} external:LinphoneCore#logHandler
**/

/**
 * Value to be used to identify the instance of the plugin.
 * @member {string} external:LinphoneCore#magic
**/

/**
 * Gets the version of the plugin.
 * @member {string} external:LinphoneCore#pluginVersion
 * @readonly
**/

/**
 * Gets the version of the core.
 * @member {string} external:LinphoneCore#version
 * @readonly
**/


/**
 * Initializes and launches the execution of the LinphoneCore.
 * @function external:LinphoneCore#init
 * @param {string} config - Path to the user config file. If it does not exists it will be created.
 * The config file is used to store all settings, call logs, friends, proxies... so that all these settings become persistent over the life of the LinphoneCore object.
 * It is allowed to set a null config file. In that case LinphoneCore will not store any settings.
 * @param {string} factory - Path to the read-only factory config file. It can be used to store hard-coded preference such as proxy settings or internal preferences.
 * The settings in this factory file always override the one in the normal config file.
 * It is OPTIONAL, use null if unneeded.
 * @returns {number} 0 if successful, any other value on error
**/

/**
 * Stops the execution and uninitializes the LinphoneCore.
 * @function external:LinphoneCore#uninit
 * @return {number} 0 if successful, any other value on error
**/

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Presence service type holding information about a presence service. 
 * @external LinphonePresenceService
**/
/**
 * Sets the basic status of a presence service. 
 * @member {linphone.PresenceBasicStatus} external:LinphonePresenceService#basicStatus
**/
/**
 * Sets the contact of a presence service. 
 * @member {string} external:LinphonePresenceService#contact
**/
/**
 * Sets the id of a presence service. 
 * @member {string} external:LinphonePresenceService#id
**/
/**
 * Gets the number of notes included in the presence service. 
 * @member {number} external:LinphonePresenceService#nbNotes
 * @readonly
**/

/**
 * Adds a note to a presence service. 
 * @function external:LinphonePresenceService#addNote
 * @param {external:LinphonePresenceNote} note - The 
 * @returns {number} 
**/

/**
 * Clears the notes of a presence service. 
 * @function external:LinphonePresenceService#clearNotes
 * @returns {number} 
**/

/**
 * Gets the nth note of a presence service. 
 * @function external:LinphonePresenceService#getNthNote
 * @param {number} idx - The index of the note to get (the first note having the index 0). 
 * @returns {external:LinphonePresenceNote} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * Enum controlling behavior for incoming subscription request. 
 * @readonly
 * @enum {number}
**/
linphone.SubscribePolicy = {
	/**
	 * Does not automatically accept an incoming subscription request. This policy implies that a decision has
	 * to be taken for each incoming subscription request notified by callback 
	*/
	Wait : 0,
	/**
	 * Rejects incoming subscription request. 
	*/
	Deny : 1,
	/**
	 * Automatically accepts a subscription request. 
	*/
	Accept : 2
};
/**
 * Get the name of a value of the SubscribePolicy enum as a string.
 * @function linphone#getSubscribePolicyText
 * @param { number } value - One of the values of the SubscribePolicy enum.
**/
linphone.getSubscribePolicyText = function(value) {
	switch (value) {
	case linphone.SubscribePolicy.Wait:
		return "Wait";
	case linphone.SubscribePolicy.Deny:
		return "Deny";
	case linphone.SubscribePolicy.Accept:
		return "Accept";
	default:
		return "?";
	}
};

/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * The LpConfig object is used to manipulate a configuration file.
 * @external LpConfig
**/

/**
 * Removes every pair of key,value in a section and remove the section. 
 * @function external:LpConfig#cleanSection
 * @param {string} section - 
 * @returns {void} 
**/

/**
 * Retrieves a default configuration item as a float, given its section, key, and default value.
 * @function external:LpConfig#getDefaultFloat
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a default configuration item as an integer, given its section, key, and default value.
 * @function external:LpConfig#getDefaultInt
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a default configuration item as a 64 bit integer, given its section, key, and default value.
 * @function external:LpConfig#getDefaultInt64
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a default configuration item as a string, given its section, key, and default value.
 * @function external:LpConfig#getDefaultString
 * @param {string} section - 
 * @param {string} key - 
 * @param {string} default_value - 
 * @returns {string} 
**/

/**
 * Retrieves a configuration item as a float, given its section, key, and default value.
 * @function external:LpConfig#getFloat
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a configuration item as an integer, given its section, key, and default value.
 * @function external:LpConfig#getInt
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a configuration item as a 64 bit integer, given its section, key, and default value.
 * @function external:LpConfig#getInt64
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} default_value - 
 * @returns {number} 
**/

/**
 * Retrieves a configuration item as a range, given its section, key, and default min and max values.
 * @function external:LpConfig#getRange
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} min - 
 * @param {number} max - 
 * @param {number} default_min - 
 * @param {number} default_max - 
 * @returns {boolean} 
**/

/**
 * Retrieves a section parameter item as a string, given its section and key.
 * @function external:LpConfig#getSectionParamString
 * @param {string} section - 
 * @param {string} key - 
 * @param {string} default_value - 
 * @returns {string} 
**/

/**
 * Retrieves a configuration item as a string, given its section, key, and default value.
 * @function external:LpConfig#getString
 * @param {string} section - 
 * @param {string} key - 
 * @param {string} default_string - 
 * @returns {string} 
**/

/**
 * Returns 1 if a given section is present in the configuration. 
 * @function external:LpConfig#hasSection
 * @param {string} section - 
 * @returns {number} 
**/

/**
 * Loads a dictionary into a section of the lpconfig. If the section doesn't exist it is created. Overwrites
 * existing keys, creates non-existing keys. 
 * @function external:LpConfig#loadDictToSection
 * @param {string} section - 
 * @param {external:LinphoneDictionary} dict - 
 * @returns {void} 
**/

/**
 * Reads a user config file and fill the LpConfig with the read config values.
 * @function external:LpConfig#readFile
 * @param {string} filename - The filename of the config file to read to fill the LpConfig 
 * @returns {number} 
**/

/**
 * Converts a config section into a dictionary. 
 * @function external:LpConfig#sectionToDict
 * @param {string} section - 
 * @returns {external:LinphoneDictionary} 
**/

/**
 * Sets a float config item 
 * @function external:LpConfig#setFloat
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} value - 
 * @returns {void} 
**/

/**
 * Sets an integer config item 
 * @function external:LpConfig#setInt
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} value - 
 * @returns {void} 
**/

/**
 * Sets a 64 bits integer config item 
 * @function external:LpConfig#setInt64
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} value - 
 * @returns {void} 
**/

/**
 * Sets an integer config item, but store it as hexadecimal 
 * @function external:LpConfig#setIntHex
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} value - 
 * @returns {void} 
**/

/**
 * Sets a range config item 
 * @function external:LpConfig#setRange
 * @param {string} section - 
 * @param {string} key - 
 * @param {number} min_value - 
 * @param {number} max_value - 
 * @returns {void} 
**/

/**
 * Sets a string config item 
 * @function external:LpConfig#setString
 * @param {string} section - 
 * @param {string} key - 
 * @param {string} value - 
 * @returns {void} 
**/

/**
 * Writes the config file to disk. 
 * @function external:LpConfig#sync
 * @returns {number} 
**/



/* Wrapper generated by lp-gen-wrappers, do not edit*/

/**
 * LinphoneChatMessageState is used to notify if messages have been succesfully delivered or not. 
 * @readonly
 * @enum {number}
**/
linphone.ChatMessageState = {
	/**
	 * Initial state 
	*/
	Idle : 0,
	/**
	 * Delivery in progress 
	*/
	InProgress : 1,
	/**
	 * Message succesffully delivered an acknoleged by remote end point 
	*/
	Delivered : 2,
	/**
	 * Message was not delivered 
	*/
	NotDelivered : 3
};
/**
 * Get the name of a value of the ChatMessageState enum as a string.
 * @function linphone#getChatMessageStateText
 * @param { number } value - One of the values of the ChatMessageState enum.
**/
linphone.getChatMessageStateText = function(value) {
	switch (value) {
	case linphone.ChatMessageState.Idle:
		return "Idle";
	case linphone.ChatMessageState.InProgress:
		return "InProgress";
	case linphone.ChatMessageState.Delivered:
		return "Delivered";
	case linphone.ChatMessageState.NotDelivered:
		return "NotDelivered";
	default:
		return "?";
	}
};

