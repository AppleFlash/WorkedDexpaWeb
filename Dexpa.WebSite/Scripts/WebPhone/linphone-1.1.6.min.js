/*!
 * Linphone Web 2 - v1.1.6 - 2014-08-20
 * Copyright (c) 2014 Belledonne Communications
 * All rights reserved.
 */

var linphone = {}; linphone.core = { log: function (a) { "undefined" != typeof window.console && window.console.log(a) }, warn: function (a) { "undefined" != typeof window.console && window.console.warn(a) }, error: function (a) { "undefined" != typeof window.console && window.console.error(a) }, info: function (a) { "undefined" != typeof window.console && window.console.info(a) }, debug: function (a) { "undefined" != typeof window.console && window.console.debug(a) }, isValid: function (a) { return a && "undefined" != typeof a && a.valid && "undefined" != typeof a.valid } }, linphone.core.enums = { reason: { None: 0, NoResponse: 1, BadCredentials: 2, Declined: 3, NotFound: 4, NotAnswered: 5, Busy: 6, Media: 7, IOError: 8, DoNotDisturb: 9, Unauthorized: 10 }, getReasonText: function (a) { switch (a) { case linphone.core.enums.reason.None: return "None"; case linphone.core.enums.reason.NoResponse: return "NoResponse"; case linphone.core.enums.reason.BadCredentials: return "BadCredentials"; case linphone.core.enums.reason.Declined: return "Declined"; case linphone.core.enums.reason.NotFound: return "NotFound"; case linphone.core.enums.reason.NotAnswered: return "NotAnswered"; case linphone.core.enums.reason.Busy: return "Busy"; case linphone.core.enums.reason.Media: return "Media"; case linphone.core.enums.reason.IOError: return "IOError"; case linphone.core.enums.reason.DoNotDisturb: return "DoNotDisturb"; case linphone.core.enums.reason.Unauthorized: return "Unauthorized"; default: return "?" } }, subscribePolicy: { Wait: 0, Deny: 1, Accept: 2 }, getSubscribePolicyText: function (a) { switch (a) { case linphone.core.enums.subscribePolicy.Wait: return "Wait"; case linphone.core.enums.subscribePolicy.Deny: return "Deny"; case linphone.core.enums.subscribePolicy.Accept: return "Accept"; default: return "?" } }, presenceBasicStatus: { Open: 0, Closed: 1 }, getPresenceBasicStatus: function (a) { switch (a) { case linphone.core.enums.presenceBasicStatus.Open: return "Open"; case linphone.core.enums.presenceBasicStatus.Closed: return "Closed"; default: return "?" } }, presenceActivityType: { Offline: 0, Online: 1, Appointment: 2, Away: 3, Breakfast: 4, Busy: 5, Dinner: 6, Holiday: 7, InTransit: 8, LookingForWork: 9, Lunch: 10, Meal: 11, Meeting: 12, OnThePhone: 13, Other: 14, Performance: 15, PermanentAbsence: 16, Playing: 17, Presentation: 18, Shopping: 19, Sleeping: 20, Spectator: 21, Steering: 22, Travel: 23, TV: 24, Unknown: 25, Vacation: 26, Working: 27, Worship: 28 }, getPresenceActivityType: function (a) { switch (a) { case linphone.core.enums.presenceActivityType.Offline: return "Offline"; case linphone.core.enums.presenceActivityType.Online: return "Online"; case linphone.core.enums.presenceActivityType.Appointment: return "Appointment"; case linphone.core.enums.presenceActivityType.Away: return "Away"; case linphone.core.enums.presenceActivityType.Breakfast: return "Breakfast"; case linphone.core.enums.presenceActivityType.Busy: return "Busy"; case linphone.core.enums.presenceActivityType.Dinner: return "Dinner"; case linphone.core.enums.presenceActivityType.Holiday: return "Holiday"; case linphone.core.enums.presenceActivityType.InTransit: return "InTransit"; case linphone.core.enums.presenceActivityType.LookingForWork: return "LookingForWork"; case linphone.core.enums.presenceActivityType.Lunch: return "Lunch"; case linphone.core.enums.presenceActivityType.Meal: return "Meal"; case linphone.core.enums.presenceActivityType.Meeting: return "Meeting"; case linphone.core.enums.presenceActivityType.OnThePhone: return "OnThePhone"; case linphone.core.enums.presenceActivityType.Other: return "Other"; case linphone.core.enums.presenceActivityType.Performance: return "Performance"; case linphone.core.enums.presenceActivityType.PermanentAbsence: return "PermanentAbsence"; case linphone.core.enums.presenceActivityType.Playing: return "Playing"; case linphone.core.enums.presenceActivityType.Presentation: return "Presentation"; case linphone.core.enums.presenceActivityType.Shopping: return "Shopping"; case linphone.core.enums.presenceActivityType.Sleeping: return "Sleeping"; case linphone.core.enums.presenceActivityType.Spectator: return "Spectator"; case linphone.core.enums.presenceActivityType.Steering: return "Steering"; case linphone.core.enums.presenceActivityType.Travel: return "Travel"; case linphone.core.enums.presenceActivityType.TV: return "TV"; case linphone.core.enums.presenceActivityType.Unknown: return "Unknown"; case linphone.core.enums.presenceActivityType.Vacation: return "Vacation"; case linphone.core.enums.presenceActivityType.Working: return "Working"; case linphone.core.enums.presenceActivityType.Worship: return "Worship"; default: return "?" } }, firewallPolicy: { NoFirewall: 0, UseNatAddress: 1, UseStun: 2, UseIce: 3, UseUpnp: 4 }, getFirewallPolicyText: function (a) { switch (a) { case linphone.core.enums.firewallPolicy.NoFirewall: return "NoFirewall"; case linphone.core.enums.firewallPolicy.UseNatAddress: return "UseNatAddress"; case linphone.core.enums.firewallPolicy.UseStun: return "UseStun"; case linphone.core.enums.firewallPolicy.UseIce: return "UseIce"; case linphone.core.enums.firewallPolicy.UseUpnp: return "UseUpnp"; default: return "?" } }, mediaEncryption: { None: 0, SRTP: 1, ZRTP: 2 }, getMediaEncryption: function (a) { switch (a) { case linphone.core.enums.mediaEncryption.None: return "None"; case linphone.core.enums.mediaEncryption.SRTP: return "SRTP"; case linphone.core.enums.mediaEncryption.ZRTP: return "ZRTP"; default: return "?" } }, registrationState: { None: 0, Progress: 1, Ok: 2, Cleared: 3, Failed: 4 }, getRegistrationStateText: function (a) { switch (a) { case linphone.core.enums.registrationState.None: return "None"; case linphone.core.enums.registrationState.Progress: return "Progress"; case linphone.core.enums.registrationState.Ok: return "Ok"; case linphone.core.enums.registrationState.Cleared: return "Cleared"; case linphone.core.enums.registrationState.Failed: return "Failed"; default: return "?" } }, globalState: { Off: 0, Startup: 1, On: 2, Shutdown: 3 }, getGlobalStateText: function (a) { switch (a) { case linphone.core.enums.globalState.Off: return "Off"; case linphone.core.enums.globalState.Startup: return "Startup"; case linphone.core.enums.globalState.On: return "On"; case linphone.core.enums.globalState.Shutdown: return "Shutdown"; default: return "?" } }, callDir: { Outgoing: 0, Incoming: 1 }, getCallDirText: function (a) { switch (a) { case linphone.core.enums.callDir.Outgoing: return "Outgoing"; case linphone.core.enums.callDir.Incoming: return "Incoming"; default: return "?" } }, callStatus: { Success: 0, Aborted: 1, Missed: 2, Declined: 3 }, getCallStatusText: function (a) { switch (a) { case linphone.core.enums.callStatus.Success: return "Success"; case linphone.core.enums.callStatus.Aborted: return "Aborted"; case linphone.core.enums.callStatus.Missed: return "Missed"; case linphone.core.enums.callStatus.Declined: return "Declined"; default: return "?" } }, callState: { Idle: 0, IncomingReceived: 1, OutgoingInit: 2, OutgoingProgress: 3, OutgoingRinging: 4, OutgoingEarlyMedia: 5, Connected: 6, StreamsRunning: 7, Pausing: 8, Paused: 9, Resuming: 10, Refered: 11, Error: 12, End: 13, PausedByRemote: 14, UpdatedByRemote: 15, IncomingEarlyMedia: 16, Updated: 17, Released: 18 }, getCallStateText: function (a) { switch (a) { case linphone.core.enums.callState.Idle: return "Idle"; case linphone.core.enums.callState.IncomingReceived: return "IncomingReceived"; case linphone.core.enums.callState.OutgoingInit: return "OutgoingInit"; case linphone.core.enums.callState.OutgoingProgress: return "OutgoingProgress"; case linphone.core.enums.callState.OutgoingRinging: return "OutgoingRinging"; case linphone.core.enums.callState.OutgoingEarlyMedia: return "OutgoingEarlyMedia"; case linphone.core.enums.callState.Connected: return "Connected"; case linphone.core.enums.callState.StreamsRunning: return "StreamsRunning"; case linphone.core.enums.callState.Pausing: return "Pausing"; case linphone.core.enums.callState.Paused: return "Paused"; case linphone.core.enums.callState.Resuming: return "Resuming"; case linphone.core.enums.callState.Refered: return "Refered"; case linphone.core.enums.callState.Error: return "Error"; case linphone.core.enums.callState.End: return "End"; case linphone.core.enums.callState.PausedByRemote: return "PausedByRemote"; case linphone.core.enums.callState.UpdatedByRemote: return "UpdatedByRemote"; case linphone.core.enums.callState.IncomingEarlyMedia: return "IncomingEarlyMedia"; case linphone.core.enums.callState.Updated: return "Updated"; case linphone.core.enums.callState.Released: return "Released"; default: return "?" } } }, linphone.models = {}, linphone.models.contacts = {}, linphone.models.history = { object: { remote: null, local: null, date: null, duration: null, direction: null, status: null }, events: { create: 0, update: 1, remove: 2 }, constructor: function () { this.onUpdate = jQuery.Callbacks() } }, linphone.models.contacts.localStorage = { object: { id: null, lastname: null, firstname: null, address: null, status: null, img: null }, engine: function (a, b) { var c = a + " Contacts"; this.ps = new PersistentStorage(c, { list: {}, index: 0 }, 1e4, b), this.data = this.ps.config } }, linphone.models.contacts.localStorage.engine.prototype.count = function (a, b) { var c, d = 0; for (c in this.data.list) this.data.list.hasOwnProperty(c) && d++; "undefined" != typeof b && b(null, d) }, linphone.models.contacts.localStorage.engine.prototype.list = function (a, b) { var c, d = this.data.list; c = "string" == typeof a && a.length ? jsonsql.query("SELECT * FROM json " + a, d) : d, "undefined" != typeof b && b(null, c) }, linphone.models.contacts.localStorage.engine.prototype.read = function (a, b) { "undefined" != typeof b && b(null, this.data.list[a]) }, linphone.models.contacts.localStorage.engine.prototype.create = function (a, b) { this.data.index = this.data.index + 1, a.id = this.data.index, this.data.list[this.data.index] = a, "undefined" != typeof b && b(null, !0) }, linphone.models.contacts.localStorage.engine.prototype.update = function (a, b) { var c = jQuery.extend(!0, {}, a); delete c.id, this.data.list[a.id] = c, "undefined" != typeof b && b(null, !0) }, linphone.models.contacts.localStorage.engine.prototype.remove = function (a, b) { delete this.data.list[a], "undefined" != typeof b && b(null, !0) }, linphone.models.contacts.core = { engine: function (a, b) { this.base = a, this.debug = b } }, linphone.models.contacts.core.engine.prototype.count = function (a, b) { var c = linphone.ui.getCore(this.base), d = c.friendList; "undefined" != typeof b && b(null, d.length) }, linphone.models.contacts.core.engine.prototype.list = function (a, b) { var c, d = linphone.ui.getCore(this.base), e = d.friendList; c = e, "undefined" != typeof b && b(null, c) }, linphone.models.contacts.core.engine.prototype.read = function (a, b) { "undefined" != typeof b && b(null, linphone.models.contacts.core.engine.internal2external(a)) }, linphone.models.contacts.core.engine.prototype.create = function (a, b) { var c, d = linphone.ui.getCore(this.base), e = a.address, f = a.name; e.displayName = f, c = d.newFriend(e.asString()), c.edit(), c.address = e, c.name = f, c.subscribesEnabled = a.showPresence, c.incSubscribePolicy = a.allowPresence, c.done(), d.addFriend(c), "undefined" != typeof b && b(null, !0) }, linphone.models.contacts.core.engine.prototype.update = function (a, b) { var c = a.friend, d = a.address, e = a.name; c.edit(), d.displayName = e, c.address = d, c.name = e, c.subscribesEnabled = a.showPresence, c.incSubscribePolicy = a.allowPresence, c.done(), "undefined" != typeof b && b("Not implemented", null) }, linphone.models.contacts.core.engine.prototype.remove = function (a, b) { var c = linphone.ui.getCore(this.base); c.removeFriend(a), "undefined" != typeof b && b(null, !0) }, linphone.models.history.localStorage = { object: {}, engine: function (a, b) { var c = a + " History"; this.ps = new PersistentStorage(c, { list: [] }, 1e4, b), this.data = this.ps.config } }, linphone.models.history.localStorage.engine.prototype.count = function (a, b) { "undefined" != typeof b && b(null, this.data.list.length) }, linphone.models.history.localStorage.engine.prototype.list = function (a, b) { "undefined" != typeof b && b(null, this.data.list) }, linphone.models.history.localStorage.engine.prototype.read = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.localStorage.engine.prototype.create = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.localStorage.engine.prototype.update = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.localStorage.engine.prototype.remove = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.core = { engine: function (a, b) { linphone.models.history.constructor.call(this), this.base = a, this.debug = b, a.on("callStateChanged", { engine: this }, linphone.models.history.core.onCallStateChanged) }, onCallStateChanged: function (a, b, c) { var d = a.data.engine; (c === linphone.CallState.End || c === linphone.CallState.Error) && d.onUpdate.fire(linphone.models.history.events.create, b.callLog) } }, linphone.models.history.core.engine.internal2external = function (a) { var b = a; return { id: a, from: b.from.asString(), to: b.to.asString(), remote: b.remoteAddress.asString(), date: b.startDate, duration: b.duration, direction: b.dir, status: b.status } }, linphone.models.history.core.engine.prototype.count = function (a, b) { var c = linphone.ui.getCore(this.base), d = c.callLogs; "undefined" != typeof b && b(null, d.length) }, linphone.models.history.core.engine.prototype.list = function (a, b) { var c, d = linphone.ui.getCore(this.base), e = d.callLogs; "string" == typeof a && a.length ? (a = a.replace(/direction/g, "dir"), a = a.replace(/date/g, "startDate"), c = jsonsql.query("SELECT * FROM json " + a, e)) : c = e, "undefined" != typeof b && b(null, c.map(linphone.models.history.core.engine.internal2external)) }, linphone.models.history.core.engine.prototype.read = function (a, b) { "undefined" != typeof b && b(null, linphone.models.history.core.engine.internal2external(a)) }, linphone.models.history.core.engine.prototype.create = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.core.engine.prototype.update = function (a, b) { "undefined" != typeof b && b("Not implemented", null) }, linphone.models.history.core.engine.prototype.remove = function (a, b) { var c = linphone.ui.getCore(this.base); c.removeCallLog(a), this.onUpdate.fire(linphone.models.history.events.remove, a), "undefined" != typeof b && b(null, !0) }, linphone.ui = { defaultConfiguration: { debug: !1, heartbeat: { enabled: !1, url: "hb", timeout: 5e3 }, core: { running: !1 } }, networkState: { Undefined: -1, Online: 0, Offline: 1 }, getCore: function (a) { var b = linphone.ui.getCoreNull(a); if (null === b) throw "Can't find Core"; return b }, getCoreNull: function (a) { for (var b = linphone.ui.getBase(a), c = b.find("> .objecttable"), d = c.get(0).childNodes, e = 0; e < d.length; ++e) { var f = d[e], g = jQuery(f); if (g.hasClass("core")) return f } return null }, getBase: function (a) { return "undefined" == typeof a && (a = jQuery(this)), a.is(".linphoneweb") ? a : a.parents(".linphoneweb") }, persistent: function (a) { return a.data("LinphoneWebPersistent").config }, configuration: function (a) { return a.data("LinphoneWebConfig") }, template: function (a, b, c, d) { "undefined" == typeof d && (d = !0); var e, f = { base: a, helpers: linphone.ui.helpers, context: c }; if (linphone.ui.configuration(a).debug) { b = "#linphone.ui." + b, b = b.replace(/\./g, "\\."); var g = jQuery(b).html(), h = Handlebars.compile(g); e = h(f) } else e = linphone.ui.templates[b](f); return d && (e = jQuery(e), jQuery.i18n.update(e, !0)), e }, slider: function (a) { setSlider(a) }, init: function (a, b) { var c = jQuery.extend(!0, {}, linphone.ui.defaultConfiguration); if (jQuery.extend(c, b), a.data("LinphoneWebConfig", c), a.data("LinphoneWebPersistent", new PersistentStorage(c.name, {}, 1e4, c.debug)), jQuery.fn.disableSelection = function () { return this.each(function () { jQuery(this).attr("unselectable", "on").css({ "-moz-user-select": "none", "-webkit-user-select": "none", "user-select": "none", "-ms-user-select": "none" }).each(function () { this.onselectstart = function () { return !1 } }) }) }, jQuery.fn.mouseenternear = function (a, b) { function c(a, b, c) { var d = a.offset().left - b, e = a.offset().top - b, f = d + a.width() + 2 * b, g = e + a.height() + 2 * b, h = c.pageX, i = c.pageY; return h > d && f > h && i > e && g > i } function d() { var d = !1; jQuery("body").mousemove(function (f) { var g = c(e, b, f); !d && g && a(f), d = g }) } "undefined" == typeof b && (b = 0); var e = this; return d() }, jQuery.fn.mouseleavenear = function (a, b) { function c(a, b, c) { var d = a.offset().left - b, e = a.offset().top - b, f = d + a.width() + 2 * b, g = e + a.height() + 2 * b, h = c.pageX, i = c.pageY; return h > d && f > h && i > e && g > i } function d() { var d = !1; jQuery("body").mousemove(function (f) { var g = c(e, b, f); d && !g && a(f), d = g }) } "undefined" == typeof b && (b = 0); var e = this; return d() }, jQuery.fn.visible = function () { return this.css("visibility", "visible") }, jQuery.fn.invisible = function () { return this.css("visibility", "hidden") }, jQuery.fn.isOrParent = function (a) { return this.is(a) || 0 !== this.parent(a).length }, jQuery.fn.isOrParents = function (a) { return this.is(a) || 0 !== this.parents(a).length }, jQuery.fn.getSelfAndParent = function (a) { return this.parent("*").andSelf().filter(a) }, jQuery.fn.getSelfAndParents = function (a) { return this.parents("*").andSelf().filter(a) }, linphone.ui.helpers = linphone.ui, Handlebars.registerHelper("LinphoneWeb-Call", function (a) { return a.apply(this, [this.base].concat(Array.prototype.slice.call(arguments, 1))) }), linphone.ui.configuration(a).heartbeat.enabled) linphone.ui.startHeartBeat(a); else { var d = linphone.ui.configuration(a).heartbeat; d.networkState = linphone.ui.networkState.Online } linphone.ui.exceptionHandler(a, function () { linphone.ui.uiInit(a), linphone.ui.core.init(a), linphone.ui.video.init(a), linphone.ui.locale.init(a), linphone.ui.header.init(a), linphone.ui.menu.init(a), linphone.ui.mainbar.init(a), linphone.ui.dialer.init(a), linphone.ui.view.init(a), linphone.ui.popup.init(a), linphone.ui.locale.update(a) })(), a.on("callStateChanged", linphone.ui.onCallStateChanged), a.on("networkStateChanged", linphone.ui.onNetworkStateChanged), a.on("notifyPresenceReceived", linphone.ui.onNotifyPresenceReceived), a.on("newSubscriptionRequested", linphone.ui.onSubscriptionRequested) }, uiInit: function (a) { a.find(".button").disableSelection() }, translate: function (a) { linphone.ui.locale.translate(a), linphone.ui.header.translate(a), linphone.ui.menu.translate(a), linphone.ui.mainbar.translate(a), linphone.ui.dialer.translate(a), linphone.ui.view.translate(a), linphone.ui.popup.translate(a) }, login: function (a, b) { var c = linphone.ui.configuration(a); c.login = !0, linphone.ui.mainbar.show(a), (!c.login && "undefined" == typeof b || b) && (linphone.ui.popup.clear(a), linphone.ui.view.show(a, "main")) }, logout: function (a) { var b = linphone.ui.configuration(a), c = new Date; c.setTime(c.getTime() - 1), linphone.ui.utils.setCookie("linphone-configfilename", "", c, "/"), linphone.ui.mainbar.hide(a), b.login && (linphone.ui.popup.clear(a), linphone.ui.view.show(a, "login")), b.login = !1 }, isLogged: function (a) { var b = linphone.ui.configuration(a); return b.login }, reset: function (a) { a.find("> .content .loading").show(), a.find("> .header .settings").addClass("disabled"), linphone.ui.view.show(a, "empty"), linphone.ui.mainbar.hide(a), linphone.ui.menu.hide(a) }, startHeartBeat: function (a) { var b = linphone.ui.configuration(a).heartbeat; b.running || (b.networkState = linphone.ui.networkState.Undefined, b.running = !0, linphone.ui.heartBeat(a, b)) }, stopHeartBeat: function (a) { var b = linphone.ui.configuration(a).heartbeat; if (b.running && (b.running = !1, b.__timeout)) { var c = b.__timeout; b.__timeout = null, window.clearInterval(c) } }, getNetworkState: function (a) { var b = linphone.ui.configuration(a).heartbeat; return b.networkState }, isHeartBeatRunning: function (a) { var b = linphone.ui.configuration(a).heartbeat; return b.running }, heartBeat: function (a, b) { linphone.ui.logger.debug(a, "Hearbeat"), jQuery.ajax(b.url, { cache: !1, timeout: b.timeout }).done(function () { b.networkState !== linphone.ui.networkState.Online && (b.networkState = linphone.ui.networkState.Online, linphone.ui.logger.debug(a, "Network state changed: Online"), linphone.ui.exceptionHandler(a, function () { a.trigger("networkStateChanged", [linphone.ui.networkState.Online]) })()), linphone.ui._heartBeat(a) }).error(function () { b.networkState !== linphone.ui.networkState.Offline && (b.networkState = linphone.ui.networkState.Offline, linphone.ui.logger.debug(a, "Network state changed: Offline"), linphone.ui.exceptionHandler(a, function () { a.trigger("networkStateChanged", [linphone.ui.networkState.Offline]) })()), linphone.ui._heartBeat(a) }) }, _heartBeat: function (a) { var b = linphone.ui.configuration(a).heartbeat; b.__timeout = window.setTimeout(function () { var c = b.__timeout; b.__timeout = null, window.clearInterval(c), linphone.ui.heartBeat(a, b) }, b.timeout) }, onNetworkStateChanged: function (a, b) { var c = jQuery(this); b === linphone.ui.networkState.Online ? c.find("> .content .offline").hide() : c.find("> .content .offline").show() }, onNotifyPresenceReceived: function (a, b) { var c = jQuery(this), d = b.presenceModel; null !== d && linphone.ui.view.contacts.show(c) }, onNewSubscriptionRequested: function () { }, onCallStateChanged: function (a, b, c, d) { var e = jQuery(this), f = linphone.ui.getCore(e); if (c === linphone.CallState.IncomingReceived && linphone.ui.popup.incall.show(e, b), c === linphone.CallState.OutgoingInit && linphone.ui.popup.outcall.show(e, b), c === linphone.CallState.Connected && (linphone.ui.popup.incall.hide(e, b), linphone.ui.popup.outcall.hide(e, b), linphone.ui.view.show(e, "call", b) === !1 && linphone.ui.view.call.update(e, b)), c === linphone.CallState.UpdatedByRemote) if (b.remoteParams.videoEnabled === !0 && b.currentParams.videoEnabled === !1 && f.videoPolicy.automaticallyAccept === !1) { linphone.ui.popup.video.show(e, b); var g = setTimeout(function () { clearInterval(g), linphone.ui.popup.video.hide(e, b) }, 5e3) } else b.remoteParams.videoEnabled === !0 && b.currentParams.videoEnabled === !0 ? linphone.ui.utils.acceptUpdate(e, b, !0) : (linphone.ui.view.call.removeVideo(e, b), linphone.ui.utils.acceptUpdate(e, b, !1)), linphone.ui.view.call.update(e, b); if (c === linphone.CallState.StreamsRunning && (linphone.ui.view.call.activateVideoButton(e, b, !0), b.currentParams.videoEnabled === !0 && (linphone.ui.view.call.addVideo(e, b), linphone.ui.view.call.updateVideoButton(e, !0))), c === linphone.CallState.PausedByRemote && b.remoteParams.videoEnabled === !0 && b.currentParams.videoEnabled === !0 && linphone.ui.view.call.removeVideo(e, b), c === linphone.CallState.Paused && b.remoteParams.videoEnabled === !0 && b.currentParams.videoEnabled === !0 && linphone.ui.view.call.removeVideo(e, b), c === linphone.CallState.End) { linphone.ui.popup.incall.hide(e, b), linphone.ui.popup.outcall.hide(e, b), linphone.ui.view.call.terminateCall(e, b), linphone.ui.view.call.removeVideo(e, b); var h = f.calls; 0 === h.length ? linphone.ui.view.hide(e, "call") : linphone.ui.view.show(e, "call", h[0]) === !1 && linphone.ui.view.call.update(e, h[0]) } if (c === linphone.CallState.Error) { linphone.ui.popup.outcall.hide(e, b); var i = "global.errors.call." + linphone.ui.utils.formatToKey(d), j = null; jQuery.i18n.defined(i) ? ("global.errors.call.busy_here" === i || "global.errors.call.not_found" === i) && (j = [linphone.ui.utils.getUsername(e, b.remoteAddress)]) : i = "global.errors.call.unknown", linphone.ui.popup.error.show(e, i, j) } }, exceptionHandler: function (a, b) { return function () { if (linphone.ui.configuration(a).debug) b.apply(this, arguments); else try { b.apply(this, arguments) } catch (c) { linphone.ui.error(a, "errors.exception.unhandled") } } }, error: function (a, b, c) { a.find("> .content .loading").hide(), linphone.ui.view.show(a, "error", b, c) }, isValid: function (a) { return "undefined" != typeof a && null !== a }, logger: { coreHandler: function (a) { return function (b, c) { "error" === b || "fatal" === b ? linphone.ui.logger.error(a, c) : "warning" === b ? linphone.ui.logger.warn(a, c) : linphone.ui.logger.log(a, c) } }, log: function (a, b) { var c = { debug: !0 }; a && (c = linphone.ui.configuration(a)), c.logs && "undefined" != typeof window.console && window.console.log(b) }, warn: function (a, b) { var c = { debug: !0 }; a && (c = linphone.ui.configuration(a)), c.logs && "undefined" != typeof window.console && window.console.warn(b) }, error: function (a, b) { var c = { debug: !0 }; a && (c = linphone.ui.configuration(a)), c.logs && "undefined" != typeof window.console && window.console.error(b) }, info: function (a, b) { var c = { debug: !0 }; a && (c = linphone.ui.configuration(a)), c.logs && "undefined" != typeof window.console && window.console.info(b) }, debug: function (a) { var b = { debug: !0 }; a && (b = linphone.ui.configuration(a)), b.logs && "undefined" != typeof window.console } }, helpers: {} }, linphone.ui.utils = { status: { online: { value: 1, cls: "imageStatusOnline", i18n: "Online" }, busy: { value: 5, cls: "imageStatusBusy", i18n: "Busy" }, away: { value: 3, cls: "imageStatusAway", i18n: "Away" }, onThePhone: { value: 13, cls: "imageStatusAway", i18n: "OnThePhone" }, offline: { value: 0, cls: "imageStatusOffline", i18n: "Offline" } }, regex: { sip: { username: "([0-9a-zA-Z-_.!~*'()&=+$,;?/]+)", domain: "([0-9a-zA-Z.-]+)", complete: "([0-9a-zA-Z-_.!~*'()&=+$,;?/]+)@([0-9a-zA-Z.-]+)" } }, formatToKey: function (a) { return a.toLowerCase().replace(/ /g, "_").replace(/\./g, "") }, getTimeFormat: function (a) { function b(a, b) { for (var c = "" + a; c.length < b;) c = "0" + c; return c } var c = new Date(1e3 * parseInt(a, 10)), d = [c.getFullYear(), c.getMonth() + 1, c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds(), c.getMilliseconds(), c.getTimezoneOffset()], e = function (a) { return a = -(a / 60), a = a > 0 ? "+" + a.toString() : 0 > a ? a.toString() : "", "UTC" + a }, f = jQuery.i18n.translate("global.stringFormat.time"); return f = f.replace(/yyyy/g, b(d[0], 4)), f = f.replace(/sss/g, b(d[7], 3)), f = f.replace(/MM/g, b(d[1], 2)), f = f.replace(/dd/g, b(d[2], 2)), f = f.replace(/HH/g, b(d[3], 2)), f = f.replace(/mm/g, b(d[4], 2)), f = f.replace(/ss/g, b(d[5], 2)), f = f.replace(/Z/g, e(d[6])) }, getTime: function (a, b) { var c = jQuery.i18n.skeleton(jQuery.i18n.functionKey("linphone.ui.utils.getTimeFormat"), parseInt(b, 10)); return c }, getDurationFormat: function (a) { function b(a, b) { for (var c = "" + a; c.length < b;) c = "0" + c; return c } var c = jQuery.i18n.translate("global.stringFormat.duration"), d = parseInt(a, 10), e = d % 60, f = Math.floor(d / 60), g = f % 60, h = Math.floor(f / 60), i = h; return c = 0 !== i ? c.replace(/\([^\(]*HH[^\)]*\)/g, function (a) { return a.slice(1, -1) }) : c.replace(/\([^\(]*HH[^\)]*\)/g, ""), c = c.replace(/HH/g, b(i, 2)), c = 0 !== i || 0 !== g ? c.replace(/\([^\(]*mm[^\)]*\)/g, function (a) { return a.slice(1, -1) }) : c.replace(/\([^\(]*mm[^\)]*\)/g, ""), c = c.replace(/mm/g, b(g, 2)), c = c.replace(/\([^\(]*ss[^\)]*\)/g, function (a) { return a.slice(1, -1) }), c = c.replace(/ss/g, b(e, 2)) }, getDuration: function (a, b) { var c = jQuery.i18n.skeleton(jQuery.i18n.functionKey("linphone.ui.utils.getDurationFormat"), parseInt(b, 10)); return c }, formatAddress: function (a, b) { var c = linphone.ui.getCore(a); return c.interpretUrl(b) }, getStatus: function (a, b) { if (b.subscribesEnabled) { var c = b.presenceModel; if (null !== c) for (var d in linphone.ui.utils.status) { var e = linphone.ui.utils.status[d]; if (e.value === c.activity.type) return e } } return linphone.ui.utils.status.offline }, getContact: function (a, b, c) { var d, e = linphone.ui.configuration(a); if ("string" == typeof b) { var f = linphone.ui.getCore(a); b = f.newAddress(b), d = b.asStringUriOnly() } else d = b.asStringUriOnly(); d && e.models.contacts.list('WHERE ("' + d + '" IN address)', function (a, b) { for (var e in b) return b[e].address.asStringUriOnly() === d ? c(null, b[e]) : c("Not found", null); return c("Not found", null) }), c("Not found", null) }, getContactName: function (a, b) { return b ? b.name : null }, getUsername: function (a, b) { var c; if ("string" == typeof b) { var d = linphone.ui.getCore(a); c = d.newAddress(b) } else c = b; if (!c) return String(b); var e = c.displayName; if (e) return e; var f = c.username; return f ? f : "Unknown" }, getAddress: function (a, b, c) { var d; if ("undefined" == typeof c && (c = !0), "string" == typeof b) { var e = linphone.ui.getCore(a); d = e.newAddress(b) } else d = b; if (c) { var f = linphone.ui.utils.getMainProxyConfig(a); if (f && f.domain === d.domain) return d.username } var g = d.asStringUriOnly(); return g ? g : "Unknown" }, getAvatar: function () { return "style/img/avatar.jpg" }, getMainProxyConfig: function (a) { var b = null; if (linphone.ui.core.isRunning(a)) { var c = linphone.ui.getCore(a); b = c.defaultProxy } return b }, acceptUpdate: function (a, b, c) { var d = linphone.ui.getCore(a), e = b.currentParams; e.videoEnabled = c === !0 ? !0 : !1, d.acceptCallUpdate(b, e) }, call: function (a, b, c, d) { var e; if (e = "string" == typeof b ? linphone.ui.utils.formatAddress(a, b) : b) { var f = linphone.ui.getCore(a); f.inviteAddress(e), linphone.ui.logger.log(a, "Call: " + e.asString()), "undefined" != typeof c && c() } else "undefined" != typeof d && d() }, setCookie: function (a, b, c, d, e, f) { document.cookie = a + " = " + b + "  " + (void 0 === c ? "" : "; expires = " + c.toGMTString()) + (void 0 === d ? "" : "; path = " + d) + (void 0 === e ? "" : "; domain = " + e) + (f === !0 ? "; secure" : "") }, readCookie: function (a) { if (0 === document.cookie.length) return null; for (var b = new RegExp("(; )", "g"), c = document.cookie.split(b), d = 0; d < c.length; d++) { var e = new RegExp("=", "g"), f = c[d].split(e); if (f[0] === a) return f[1] } return null } }, linphone.ui.core = {
    instanceCount: 1, instances: [], detectionStatus: { Installed: 0, NotInstalled: 1, Outdated: 2 }, _addEvent: null, addEvent: function (a, b, c) { linphone.ui.core._addEvent(a, b, c) }, init: function (a) { var b = !!navigator.userAgent.match(/Trident\/7\./); linphone.ui.core._addEvent = "Explorer" !== jQuery.client.browser ? function (a, b, c) { a.addEventListener(b, c, !1) } : b ? function (a, b, c) { a["on" + b] = c } : function (a, b, c) { a.attachEvent("on" + b, c) }; var c = linphone.ui.configuration(a), d = c.forceVersion; "undefined" == typeof d && (d = !0), c.file = {}, "undefined" != typeof c.files[jQuery.client.os] && "undefined" != typeof c.files[jQuery.client.os][jQuery.client.arch] && ("undefined" != typeof c.files[jQuery.client.os][jQuery.client.arch][jQuery.client.browser] ? (c.file.description = c.files[jQuery.client.os][jQuery.client.arch][jQuery.client.browser], c.file.browser = jQuery.client.browser) : (c.file.description = c.files[jQuery.client.os][jQuery.client.arch].DEFAULT, c.file.browser = "DEFAULT")), c.file.codebase = "", "undefined" != typeof c.file.description && "Explorer" === c.file.browser && (c.file.codebase = c.file.description.file, d && (c.file.codebase += "#Version=" + c.file.description.version)), a.on("networkStateChanged", linphone.ui.core.onNetworkStateChanged) }, translate: function () { }, _globalStateChanged: function (a, b, c) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_globalStateChanged fail: 'core' object is invalid"); var d = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(d) ? (linphone.ui.logger.log(d, a + "| State: " + b + ", " + c), void linphone.ui.exceptionHandler(d, function () { d.trigger("globalStateChanged", [b, c]) })()) : void linphone.ui.logger.error(null, "_globalStateChanged fail: can't retrieve data associated to the 'core' object") }, _registrationStateChanged: function (a, b, c, d) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_registrationStateChanged fail: 'core' object is invalid"); var e = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(e) ? (linphone.ui.logger.log(e, a + "| (" + b + "): " + c + ", " + d), void linphone.ui.exceptionHandler(e, function () { e.trigger("registrationStateChanged", [b, c, d]) })()) : void linphone.ui.logger.error(null, "_registrationStateChanged fail: can't retrieve data associated to the 'core' object") }, _callStateChanged: function (a, b, c, d) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_callStateChanged fail: 'core' object is invalid"); var e = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(e) ? (linphone.ui.logger.log(e, a + "| (" + b + "): " + c + ", " + d), void linphone.ui.exceptionHandler(e, function () { e.trigger("callStateChanged", [b, c, d]) })()) : void linphone.ui.logger.error(null, "_callStateChanged fail: can't retrieve data associated to the 'core' object") }, _authInfoRequested: function (a, b, c, d) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayStatus fail: 'core' object is invalid"); var e = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(e) ? (linphone.ui.logger.log(e, a + "| Auth: " + b + ", " + c + ", " + d), void linphone.ui.exceptionHandler(e, function () { e.trigger("authInfoRequested", [b, c, d]) })()) : void linphone.ui.logger.error(null, "_authInfoRequested fail: can't retrieve data associated to the 'core' object") }, _notifyPresenceReceived: function (a, b) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayStatus fail: 'core' object is invalid"); var c = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(c) ? void linphone.ui.exceptionHandler(c, function () { c.trigger("notifyPresenceReceived", [a, b]) })() : void linphone.ui.logger.error(null, "_notifyPresenceReceived fail: can't retrieve data associated to the 'core' object") }, _newSubscriptionRequested: function (a, b, c) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayStatus fail: 'core' object is invalid"); var d = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(d) ? void linphone.ui.exceptionHandler(d, function () { d.trigger("newSubscriptionRequested", [a, b, c]) })() : void linphone.ui.logger.error(null, "_newSubscriptionRequested fail: can't retrieve data associated to the 'core' object") }, _displayStatus: function (a, b) {
        if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayStatus fail: 'core' object is invalid"); var c = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(c) ? (linphone.ui.logger.log(c, a + "| Status: " + b), void linphone.ui.exceptionHandler(c, function () {
            c.trigger("displayStatus", [b])
        })()) : void linphone.ui.logger.error(null, "_displayStatus fail: can't retrieve data associated to the 'core' object")
    }, _displayMessage: function (a, b) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayMessage fail: 'core' object is invalid"); var c = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(c) ? (linphone.ui.logger.log(c, a + "| Message: " + b), void linphone.ui.exceptionHandler(c, function () { c.trigger("displayMessage", [b]) })()) : void linphone.ui.logger.error(null, "_displayMessage fail: can't retrieve data associated to the 'core' objecta") }, _displayWarning: function (a, b) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayWarning fail: 'core' object is invalid"); var c = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(c) ? (linphone.ui.logger.log(c, a + "| Warning: " + b), void linphone.ui.exceptionHandler(c, function () { c.trigger("displayWarning", [b]) })()) : void linphone.ui.logger.error(null, "_displayWarning fail: can't retrieve data associated to the 'core' object") }, _displayUrl: function (a, b, c) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_displayUrl fail: 'core' object is invalid"); var d = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(d) ? (linphone.ui.logger.log(d, a + "| Url: " + b + " - " + c), void linphone.ui.exceptionHandler(d, function () { d.trigger("displayUrl", [b, c]) })()) : void linphone.ui.logger.error(null, "_displayUrl fail: can't retrieve data associated to the 'core' object") }, _callStatsUpdated: function (a, b, c) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "_callStatsUpdated fail: 'core' object is invalid"); var d = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(d) ? (linphone.ui.logger.log(d, a + "| (" + b + "): " + c), void linphone.ui.exceptionHandler(d, function () { d.trigger("callStatsUpdated", [b, c]) })()) : void linphone.ui.logger.error(null, "_callStatsUpdated fail: can't retrieve data associated to the 'core' object") }, outdated: function (a, b) { for (var c = a.split("."), d = b.split("."), e = 0; e < c.length && e < d.length; ++e) { if (e >= c.length) return !1; if (e >= d.length) return !0; var f = parseInt(c[e], 10), g = parseInt(d[e], 10); if (f > g) return !0; if (g > f) return !1 } return !1 }, detect: function (a) { linphone.ui.logger.log(a, "Core detection ..."); var b = linphone.ui.getCore(a), c = linphone.ui.configuration(a); return linphone.core.isValid(b) ? linphone.ui.core.outdated(c.version, b.pluginVersion) ? (linphone.ui.logger.log(a, "Core detection: Outdated"), linphone.ui.core.unload(a), "Firefox" === c.file.browser ? InstallTrigger.updateEnabled() && InstallTrigger.install({ "Linphone-Web": { URL: c.file.description.file, IconURL: c.file.description.icon } }) : "Chrome" === c.file.browser && chrome.webstore.install(c.file.description.file, function () { linphone.ui.core.unload(a), linphone.ui.core.load(a) }, function () { }), linphone.ui.core.detectionStatus.Outdated) : (linphone.ui.logger.log(a, "Core detection: Ok"), linphone.ui.core.detectionStatus.Installed) : ("undefined" != typeof c.file.description && (linphone.ui.logger.log(a, "Core detection: Not installed"), "Firefox" === c.file.browser ? InstallTrigger.updateEnabled() && InstallTrigger.install({ "Linphone-Web": { URL: c.file.description.file, IconURL: c.file.description.icon } }) : "Chrome" === c.file.browser && chrome.webstore.install(c.file.description.file, function () { linphone.ui.core.unload(a), linphone.ui.core.load(a) }, function () { })), linphone.ui.core.detectionStatus.NotInstalled) }, unload: function (a) { linphone.ui.exceptionHandler(a, function () { linphone.ui.logger.log(a, "Unload Core"), a.find("> .content .loading").show(); for (var b = a.get(0).childNodes, c = 0; c < b.length; ++c) { var d = b[c], e = jQuery(d); e.hasClass("core") && (a.get(0).removeChild(d), delete linphone.ui.core.instances[d.magic]) } var f = linphone.ui.configuration(a); f.core.running = !1 })() }, load: function (a) { linphone.ui.exceptionHandler(a, function () { linphone.ui.logger.log(a, "Loading Core..."), navigator.plugins.refresh(!1); var b = linphone.ui.configuration(a), c = "__linphone_ui_core_loadHandler" + linphone.ui.core.instanceCount; window[c] = function (a) { linphone.ui.core._loadHandler(a) }; var d = linphone.ui.template(a, "object.core", { fct: c, magic: linphone.ui.core.instanceCount, codebase: b.file.codebase }); linphone.ui.core.instances[linphone.ui.core.instanceCount] = a, linphone.ui.core.instanceCount = linphone.ui.core.instanceCount + 1; var e = a.find("> .objecttable"); e.append(d); var f = linphone.ui.core.detect(a); f !== linphone.ui.core.detectionStatus.Installed && linphone.ui.core.error(a, f) })() }, reload: function (a) { linphone.ui.reset(a), linphone.ui.core.unload(a), linphone.ui.core.load(a) }, error: function (a, b) { a.find("> .content .loading").hide(), linphone.ui.view.show(a, "plugin", b) }, loaded: function (a) { a.find("> .content .loading").hide(), linphone.ui.view.show(a, "login") }, started: function (a) { var b = linphone.ui.configuration(a); b.core.running = !0 }, stopped: function (a) { var b = linphone.ui.configuration(a); b.core.running = !1 }, isRunning: function (a) { var b = linphone.ui.configuration(a); return b.core.running }, _loadHandler: function (a) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "Core _loadHandler fail: 'core' object is invalid"); var b = linphone.ui.core.instances[a.magic]; return linphone.ui.isValid(b) ? (linphone.ui.logger.log(b, "Core handler"), void linphone.ui.exceptionHandler(b, function () { b.find(".window .install").hide(); var c = linphone.ui.configuration(b); c.logs && (linphone.ui.logger.log(b, "Enable core logging"), a.logHandler = linphone.ui.logger.coreHandler(b)), linphone.ui.core.loaded(b, a) })()) : void linphone.ui.logger.error(null, "Core _loadHandler fail: can't retrieve data associated to the 'core' object") }, start: function (a, b) { var c = linphone.ui.core.instances[a.magic]; linphone.ui.exceptionHandler(c, function () { linphone.ui.core.addEvent(a, "globalStateChanged", linphone.ui.core._globalStateChanged), linphone.ui.core.addEvent(a, "callStateChanged", linphone.ui.core._callStateChanged), linphone.ui.core.addEvent(a, "registrationStateChanged", linphone.ui.core._registrationStateChanged), linphone.ui.core.addEvent(a, "authInfoRequested", linphone.ui.core._authInfoRequested), linphone.ui.core.addEvent(a, "notifyPresenceReceived", linphone.ui.core._notifyPresenceReceived), linphone.ui.core.addEvent(a, "newSubscriptionRequested", linphone.ui.core._newSubscriptionRequested), linphone.ui.core.addEvent(a, "displayStatus", linphone.ui.core._displayStatus), linphone.ui.core.addEvent(a, "displayMessage", linphone.ui.core._displayMessage), linphone.ui.core.addEvent(a, "displayWarning", linphone.ui.core._displayWarning), linphone.ui.core.addEvent(a, "displayUrl", linphone.ui.core._displayUrl), linphone.ui.core.addEvent(a, "callStatsUpdated", linphone.ui.core._callStatsUpdated); var d = "undefined" != typeof linphone.ui.persistent(c).init_count ? linphone.ui.persistent(c).init_count : 0, e = a.init(b); 0 !== e ? (linphone.ui.logger.log(c, "Core init error: " + e), linphone.ui.error(c, "errors.core." + e)) : (d++, linphone.ui.persistent(c).init_count = d, a.rootCa = "internal:///share/linphone/rootca.pem", linphone.ui.isHeartBeatRunning(c) && (a.networkReachable = linphone.ui.getNetworkState(c) === linphone.ui.networkState.Online), linphone.ui.logger.log(c, "Core started"), linphone.ui.core.started(c, a)) })() }, stop: function (a) { var b = linphone.ui.core.instances[a.magic]; linphone.ui.exceptionHandler(b, function () { linphone.ui.core.stopped(b, a), a.uninit(), linphone.ui.logger.log(b, "Core stopped") })() }, onNetworkStateChanged: function (a, b) { var c = jQuery(this), d = linphone.ui.getCoreNull(c), e = linphone.ui.configuration(c); linphone.core.isValid(d) && e.core.running && (d.networkReachable = b === linphone.ui.networkState.Online ? !0 : !1) }
}, linphone.ui.video = { instanceCount: 1, instances: [], init: function () { }, translate: function () { }, addVideoView: function (a, b) { linphone.ui.video.hasView(a, b) || linphone.ui.video.createView(a, b, function (a, b) { var c = linphone.ui.getCore(a); b.setBackgroundColor(0, 0, 0), c.nativeVideoWindowId = b.window }, function (a) { var b = linphone.ui.getCore(a); b.nativeVideoWindowId = 0 }) }, addSelfView: function (a, b) { linphone.ui.video.hasView(a, b) || linphone.ui.video.createView(a, b, function (a, b) { var c = linphone.ui.getCore(a); b.setBackgroundColor(0, 0, 0), c.nativePreviewWindowId = b.window }, function (a) { var b = linphone.ui.getCore(a); b.nativePreviewWindowId = 0 }) }, getView: function (a, b) { var c = b.find("object"); return c.length > 0 ? c.get(0) : null }, hasView: function (a, b) { return null !== linphone.ui.video.getView(a, b) }, removeView: function (a, b) { var c = linphone.ui.video.getView(a, b); if (null !== c) { if (!linphone.core.isValid(c)) return void linphone.ui.logger.error(a, "Video removeView fail: 'video' object is invalid"); var d = linphone.ui.video.instances[c.magic]; d.onClose(a, c), b.empty() } }, createView: function (a, b, c, d) { var e = "__linphone_ui_video_loadHandler" + linphone.ui.video.instanceCount; window[e] = function (a) { linphone.ui.video._loadHandler(a) }; var f = linphone.ui.template(a, "object.video", { fct: e, magic: linphone.ui.video.instanceCount }); linphone.core.log("Create VideoView " + linphone.ui.video.instanceCount), linphone.ui.video.instances[linphone.ui.video.instanceCount] = { base: a, onOpen: c, onClose: d }, linphone.ui.video.instanceCount = linphone.ui.video.instanceCount + 1, b.append(f) }, _loadHandler: function (a) { if (!linphone.core.isValid(a)) return void linphone.ui.logger.error(null, "Video _loadHandler fail: 'video' object is invalid"); var b = linphone.ui.video.instances[a.magic], c = b.base; return linphone.ui.isValid(c) ? (linphone.ui.logger.log(c, "Video handler"), void b.onOpen(c, a)) : void linphone.ui.logger.error(null, "Video _loadHandler fail: can't retrieve data associated to the 'video' object") } }, linphone.ui.i18n = { content: { dialer: { address: { en_US: "SIP address or phone number", fr_FR: "Adresse SIP ou numéro de téléphone" }, call: { en_US: "Call", fr_FR: "Appel" }, chat: { en_US: "Chat", fr_FR: "Chat" } }, mainbar: { ringtone: { en_US: "Ring", fr_FR: "Sonnerie" } }, menu: { calls: { en_US: "Calls", fr_FR: "Appels" }, chats: { en_US: "Chats", fr_FR: "Chats" }, contacts: { en_US: "Contacts", fr_FR: "Contacts" }, history: { en_US: "History", fr_FR: "Historique" } }, offline: { title: { en_US: "You are not connected to Internet.", fr_FR: "Vous n'êtes pas connecté à Internet." } }, popup: { error: { title: { en_US: "Error", fr_FR: "Erreur" } }, incall: { title: { en_US: "Incoming Call", fr_FR: "Appel entrant" } }, outcall: { title: { en_US: "Outgoing Call", fr_FR: "Appel sortant" } }, video: { title: { en_US: "Video", fr_FR: "Vidéo" }, message: { en_US: "proposed to start video. Do you accept ?", fr_FR: "propose de démarrer la vidéo avec vous. Acceptez-vous ?" } } }, view: { about: { links: { sales: { en_US: "Sales service", fr_FR: "Service commercial" }, support: { en_US: "Support service", fr_FR: "Service support" }, license: { en_US: "License", fr_FR: "Licence" } }, title: { en_US: "About", fr_FR: "À Propos" }, versions: { core: { en_US: "Core version", fr_FR: "Version du cœur" }, webapp: { en_US: "Web app version", fr_FR: "Version de l'application web" }, plugin: { en_US: "Plugin version", fr_FR: "Version du plugin" }, rootfs: { en_US: "Rootfs version", fr_FR: "Version du rootfs" } } }, call: { conference: { en_US: "Conference", fr_FR: "Conférence" }, hangup: { en_US: "Hang-up", fr_FR: "Raccrocher" }, micro: { en_US: "Micro", fr_FR: "Micro" }, pause: { en_US: "Pause", fr_FR: "Pause" }, video: { en_US: "Video", fr_FR: "Vidéo" } }, chat: { send: { en_US: "Send", fr_FR: "Envoyer" }, send_file: { en_US: "Send file", fr_FR: "Envoyer un fichier" } }, conference: { conference: { en_US: "Conference", fr_FR: "Conférence" }, micro: { en_US: "Micro", fr_FR: "Micro" }, pause: { en_US: "Pause", fr_FR: "Pause" }, video: { en_US: "Video", fr_FR: "Vidéo" } }, contact: { addressContact: { en_US: "SIP or phone number", fr_FR: "SIP ou numéro de télephone" }, firstname: { en_US: "First name", fr_FR: "Prénom" }, lastname: { en_US: "Last name", fr_FR: "Nom" }, remove: { en_US: "Remove contact", fr_FR: "Supprimer le contact" }, presence: { en_US: "Presence", fr_FR: "Présence" }, showPresence: { en_US: "Show this contact presence status", fr_FR: "Voir l'état de présence de ce contact" }, allowPresence: { en_US: "Allow this contact to see my presence status", fr_FR: "Autoriser ce contact à voir ma présence" } }, contacts: { add: { en_US: "Add a contact", fr_FR: "Ajouter un contact" }, filter: { all: { en_US: "All", fr_FR: "Tous" }, online: { en_US: "Online", fr_FR: "Disponible" } } }, error: { title: { en_US: "Error", fr_FR: "Erreur" }, reload: { en_US: "Reload", fr_FR: "Recharger" } }, help: { title: { en_US: "Help", fr_FR: "Aide" }, firstLine: { en_US: "Linphone web is web app to place both audio and video calls to anyone with a sip address through internet.", fr_FR: "Linphone web est une application internet permettant de passer des appels audio et vidéo en utilisant une adresse SIP." }, gettingStarted: { en_US: "Getting started", fr_FR: "Pour commencer" }, linphoneWebPlugin: { en_US: "Linphone web requires the Linphone-Web plugin to be installed. Just follow installation instructions.", fr_FR: "Pour utiliser Linphone Web, le plugin Linphone-Web doit être installé. Il suffit de suivre les instructions d'installation." }, SIPAccount: { en_US: "Login with a SIP account", fr_FR: "Se connecter avec un compte SIP" }, SIPAccountInstr: { en_US: "You can simply create a sip account from", fr_FR: "Vous pouvez facilement créer un compte SIP à partir du lien  " }, SIPAccountInstrEnd: { en_US: "Advanced users can use their own sip account from any sip service.", fr_FR: "Les utilisateurs avancés peuvent utiliser leur propre compte SIP." }, call: { en_US: "Place call", fr_FR: "Passer un appel" }, callInstruction: { en_US: "After logging in, just type either a sip address (sip:john@sip.linphone.org)  or just your friend login name if on the same domain (I.E just ‘john’) ", fr_FR: "Une fois connecté, il suffit de taper dans la barre d'adresse soit une adresse SIP (sip: john@sip.linphone.org) soit le nom d'utilisateur de votre contact s'il s'agit du même domaine (ex: juste ‘john’)" }, lastLine: { en_US: "For more information, visit our web site at", fr_FR: "Pour plus d'information, visitez notre site web à l'adresse " } }, history: { direction: { title: { en_US: "Direction", fr_FR: "Direction" }, values: { outgoing: { en_US: "Outgoing", fr_FR: "Sortant" }, incoming: { en_US: "Incoming", fr_FR: "Entrant" } } }, duration: { title: { en_US: "Duration", fr_FR: "Durée" } }, call: { en_US: "Call", fr_FR: "Appel" }, filter: { all: { en_US: "All", fr_FR: "Tous" }, incoming: { en_US: "Incomings", fr_FR: "Entrants" }, miss: { en_US: "Miss", fr_FR: "Manqués" }, outgoing: { en_US: "Outgoings", fr_FR: "Sortants" } }, remove: { en_US: "Delete history", fr_FR: "Supprimer l'historique" }, see: { en_US: "See history", fr_FR: "Voir l'historique" }, status: { title: { en_US: "Status", fr_FR: "Status" }, values: { aborted: { en_US: "Aborted", fr_FR: "Annulé" }, declined: { en_US: "Declined", fr_FR: "Refusé" }, missed: { en_US: "Missed", fr_FR: "Manqué" }, success: { en_US: "Success", fr_FR: "Réussi" } } }, time: { title: { en_US: "Date", fr_FR: "Date" } } }, login: { accountAdvanced: { account: { en_US: "Username", fr_FR: "Nom d'utilisateur" }, errors: { account: { en_US: "The 'Linphone account' field is incorrect", fr_FR: "L'entrée 'Compte linphone' est invalide" }, password: { en_US: "The 'password' field is incorrect", fr_FR: "L'entrée 'Mot de passe' est invalide" }, domain: { en_US: "The 'domain' field is incorrect", fr_FR: "L'entrée 'Domaine' est invalide" }, registrationFailed: { en_US: "Authentification failure", fr_FR: "Echec d'authentification" } }, password: { en_US: "Password", fr_FR: "Mot de passe" }, domain: { en_US: "Domain", fr_FR: "Domaine" }, proxy: { en_US: "Proxy (optional)", fr_FR: "Proxy (optionnel)" }, outband_proxy: { en_US: "Outband proxy", fr_FR: "Proxy sortant" }, transport: { en_US: "Transport", fr_FR: "Transport" } }, accountSimple: { account: { en_US: "Linphone username", fr_FR: "Nom d'utilisateur Linphone" }, errors: { account: { en_US: "The 'Linphone account' field is incorrect", fr_FR: "L'entrée 'Compte linphone' est invalide" }, password: { en_US: "The 'password' field is incorrect", fr_FR: "L'entrée 'Mot de passe' est invalide" } }, password: { en_US: "Password", fr_FR: "Mot de passe" } }, advanced: { en_US: "Advanced settings", fr_FR: "Options avancées" }, create: { en_US: "Create Linphone account", fr_FR: "Créer un compte Linphone" }, rememberMe: { en_US: "Remember me", fr_FR: "Se souvenir de moi" }, errors: { registrationFailed: { en_US: "Failed to connect to the server", fr_FR: "Connection au serveur impossible" }, registrationTimeout: { en_US: "Authentification timeout", fr_FR: "Expiration de l'authentification" }, account: { en_US: "Invalid username or password ", fr_FR: "Le nom d'utilisateur ou le mot de passe est invalide" } }, login: { en_US: "Login", fr_FR: "S'enregister" }, simple: { en_US: "Use a Linphone account", fr_FR: "Utiliser un compte Linphone" }, title: { en_US: "Welcome", fr_FR: "Bienvenue" }, wait: { en_US: "Login in progress, please wait...", fr_FR: "Enregistrement en cours, veuillez patienter..." } }, install: { title: { en_US: "How to install", fr_FR: "Installation" }, reload: { en_US: "Reload", fr_FR: "Recharger" }, text: { install_windows: { en_US: 'Run the installer you just downloaded. If you have a warning message, click on "More info" then "Run anyway". Once the installation finishes, click on "Reload" button below.', fr_FR: 'Exécutez le fichier que vous venez de télécharger. Si vous voyez un message d\'avertissement, cliquez sur "Plus d\'informations", puis sur "Exécuter quand même". Une fois l\'installation terminée, cliquez sur le bouton "Recharger" ci-dessous.' }, install_mac: { en_US: 'Run the installer you just downloaded. Once the installation finishes, click on "Reload" button below.', fr_FR: 'Exécutez le fichier que vous venez de télécharger. Une fois l\'installation terminée, cliquez sur le bouton "Recharger" ci-dessous.' }, install_tar_gz: { en_US: 'If it doesn\'t exist yet, create the .mozilla/plugins/ folder in your home directory (~). Then extract the archive you just downloaded inside this folder. Finally, click on the "Refresh" button below.', fr_FR: "S'il n'existe pas déjà, créez le dossier .mozilla/plugins/ dans votre répertoire maison (~). Ensuite décompressez l'archive que vous venez de télécharger à l'intérieur de ce dossier. Pour finir, cliquez sur le bouton \"Recharger\" ci-dessous." } } }, plugin: { download: { en_US: "Download", fr_FR: "Télécharger" }, reload: { en_US: "Reload", fr_FR: "Recharger" }, text: { auto: { en_US: "The plugin is not installed. Please wait and accept the automatic install of the plugin.", fr_FR: "Le plugin n'est pas installé. Veuillez attendre et accepter l'installation automatique du plugin." }, auto_or_update: { en_US: 'The plugin is not installed or updated. Please wait a few seconds and click on the "Install" button of the popup that will appear at the bottom of this window. If you have already updated the plugin and still get this message, restart your browser.', fr_FR: 'Le plugin n\'est pas installé ou pas à jour. Veuillez patienter quelques secondes et cliquez sur le bouton "Installer" de la fenêtre qui va apparaître en bas de votre navigateur. Si vous avez déjà mis le plugin à jour et que vous avez toujours ce message, redémarrez votre navigateur.' }, download: { en_US: "The plugin is not installed. Please download it using the following button.", fr_FR: "Le plugin n'est pas installé. Veuillez le télécharger en utilisant le bouton suivant." }, outdated_download: { en_US: "The plugin is outdated. Please download it using the following button. If you have already updated the plugin and still get this message, restart your browser.", fr_FR: "Le plugin n'est pas à jour. Veuillez accepter l'installation automatique du plugin. Si vous avez déjà mis le plugin à jour et que vous avez toujours ce message, redémarrez votre navigateur." }, outdated_auto: { en_US: "The plugin is outdated. Please wait and accept the automatic install of the plugin. If you have already updated the plugin and still get this message, restart your browser.", fr_FR: "Le plugin n'est pas à jour. Veuillez attendre et accepter l'installation automatique du plugin. Si vous avez déjà mis le plugin à jour et que vous avez toujours ce message, redémarrez votre navigateur." }, mobile_application: { en_US: "Linphone web is not avalaible on this platform, you can download the Linphone mobile application here :", fr_FR: "Linphone web n'est pas disponible sur cette plateforme, vous pouvez télécharger l'application mobile Linphone à l'adresse suivante : " } }, links: { android: { en_US: "Linphone on Google Play", fr_FR: "Linphone sur Google Play" }, iOS: { en_US: "Linphone on AppStore", fr_FR: "Linphone sur l'AppStore" }, windows_phone: { en_US: "Linphone on WindowsPhone Store", fr_FR: "Linphone sur le Store WindowsPhone" } }, title: { en_US: "Welcome", fr_FR: "Bienvenue" } }, settings: { media: { title: { en_US: "Settings", fr_FR: "Options" }, devices: { play: { en_US: "Play", fr_FR: "Lecture" }, record: { en_US: "Record", fr_FR: "Enregistrement" }, ring: { en_US: "Ring", fr_FR: "Sonnerie" }, video: { en_US: "Video", fr_FR: "Vidéo" } } } } } }, errors: { core: { 1: { en_US: "Invalid version of Linphone", fr_FR: "Version invalide de Linphone" } }, exception: { unhandled: { en_US: "Unhandle error", fr_FR: "Erreur inattendue" } } }, global: { cancel: { en_US: "Cancel", fr_FR: "Annuler" }, errors: { call: { request_timeout: { en_US: "Request timeout", fr_FR: "Temps d’attente d'une réponse du serveur écoulé" }, unknown: { en_US: "Unknown error", fr_FR: "Erreur inconnue" }, busy_here: { en_US: 'The user "%1" is busy', fr_FR: 'L\'utilisateur "%1" est occupé' }, not_found: { en_US: 'The user "%1" is not found', fr_FR: "L'utilisateur \"%1\" n'a pas été trouvé" }, not_acceptable_here: { en_US: "Incompatible media parameters", fr_FR: "Paramètres medias incompatibles" } }, uri: { misformatted: { en_US: "The provided address is not a valid SIP URI", fr_FR: "L'adresse fournie n'est pas une URI SIP" } } }, off: { en_US: "Off", fr_FR: "Non" }, ok: { en_US: "Ok", fr_FR: "Ok" }, on: { en_US: "On", fr_FR: "Oui" }, save: { en_US: "Save", fr_FR: "Enregistrer" }, status: { Appointment: { en_US: "Appointment", fr_FR: "En rendez-vous" }, Away: { en_US: "Away", fr_FR: "Absent" }, Breakfast: { en_US: "Breakfast", fr_FR: "" }, Busy: { en_US: "Busy", fr_FR: "Occupé" }, Dinner: { en_US: "Dinner", fr_FR: "" }, Holiday: { en_US: "Holiday", fr_FR: "" }, InTransit: { en_US: "In transit", fr_FR: "" }, LookingForWork: { en_US: "Looking for work", fr_FR: "" }, Lunch: { en_US: "Lunch", fr_FR: "A table" }, Meal: { en_US: "Meal", fr_FR: "" }, Meeting: { en_US: "Meeting", fr_FR: "En réunion" }, Offline: { en_US: "Offline", fr_FR: "Hors ligne" }, Online: { en_US: "Online", fr_FR: "Disponible" }, OnThePhone: { en_US: "On the phone", fr_FR: "Au téléphone" }, Other: { en_US: "Other", fr_FR: "Autre" }, Performance: { en_US: "Performance", fr_FR: "" }, PermanentAbsence: { en_US: "PermanentAbsence", fr_FR: "" }, Playing: { en_US: "Playing", fr_FR: "" }, Presentation: { en_US: "Presentation", fr_FR: "" }, Shopping: { en_US: "Shopping", fr_FR: "" }, Sleeping: { en_US: "Sleeping", fr_FR: "" }, Spectator: { en_US: "Spectator", fr_FR: "" }, Steering: { en_US: "Steering", fr_FR: "" }, Travel: { en_US: "Travel", fr_FR: "" }, TV: { en_US: "TV", fr_FR: "" }, Unknown: { en_US: "Unknown", fr_FR: "" }, Vacation: { en_US: "Vacation", fr_FR: "" }, Working: { en_US: "Working", fr_FR: "" }, Worship: { en_US: "Worship", fr_FR: "" } }, stringFormat: { duration: { en_US: "(HH:)mm:ss", fr_FR: "(HH:)mm:ss" }, time: { en_US: "MM/dd/yyyy HH:mm:ss", fr_FR: "dd/MM/yyyy HH:mm:ss" } }, transports: { tcp: { en_US: "TCP", fr_FR: "TCP" }, tls: { en_US: "TLS", fr_FR: "TLS" }, udp: { en_US: "UDP", fr_FR: "UDP" } }, unknown: { en_US: "Unknown", fr_FR: "Inconnu" } }, header: { navigation: { about: { en_US: "About", fr_FR: "À Propos" }, help: { en_US: "Help", fr_FR: "Aide" }, settings: { en_US: "Settings", fr_FR: "Options" } }, offline: { title: { en_US: "You are not connected to Internet.", fr_FR: "Vous n'êtes pas connecté à Internet." } }, profile: { disconnect: { en_US: "Disconnect", fr_FR: "Déconnexion" } } } }, linphone.ui.locale = { init: function (a) { linphone.ui.locale.uiInit(a) }, uiInit: function (a) { var b = linphone.ui.locale.currentLocale(a, !1); jQuery.i18n.data = linphone.ui.i18n, jQuery.i18n.locale = b }, translate: function () { }, currentLocale: function (a, b) { var c, d = linphone.ui.configuration(a).locales; "undefined" == typeof b && (b = !0), "undefined" != typeof linphone.ui.persistent(a).locale ? (b && linphone.ui.logger.log(a, "Saved locale: " + linphone.ui.persistent(a).locale), c = linphone.ui.persistent(a).locale) : (c = navigator.language ? navigator.language : navigator.userLanguage, c = c.replace("-", "_"), b && linphone.ui.logger.log(a, "Browser language: " + c)); for (var e in d) if (d[e].locale === c) return b && linphone.ui.logger.log(a, "Exact locale: " + d[e].locale), d[e]; for (var f in d) if (0 === d[f].locale.search(c)) return b && linphone.ui.logger.log(a, "Approx locale: " + d[f].locale), d[f]; return d[0] }, update: function (a) { var b = linphone.ui.locale.currentLocale(a); jQuery.i18n.change(b.locale, a), linphone.ui.translate(a) }, change: function (a, b) { linphone.ui.persistent(a).locale = b.locale, linphone.ui.logger.log(a, "Change locale: " + b.locale), jQuery.i18n.change(b.locale, a), linphone.ui.translate(a) } }, linphone.ui.header = { init: function (a) { linphone.ui.header.uiInit(a), a.on("registrationStateChanged", linphone.ui.header.onRegistrationStateChanged), a.on("networkStateChanged", linphone.ui.header.onNetworkStateChanged) }, uiInit: function (a) { var b = linphone.ui.configuration(a), c = a.find("> .header"); if (c.find(".navigation").visible(), c.find(".profile .open").mouseover(function () { linphone.ui.header.menu.open(a), c.find(".profile").mouseleave(function () { linphone.ui.header.menu.close(a) }) }), c.find(".logo").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.isLogged(a) && linphone.ui.view.show(a, "main") })), c.find(".profile .menu .list").empty(), !b.disablePresence) { var d = function (b) { return function () { linphone.ui.logger.log(a, "Change status to " + linphone.getPresenceActivityTypeText(b.value)); var c = linphone.ui.getCore(a), d = c.presenceModel; d.setActivity(b.value, null), c.presenceModel = d, linphone.ui.header.profile.update(a, b), linphone.ui.header.menu.close(a) } }; for (var e in linphone.ui.utils.status) { var f = linphone.ui.utils.status[e], g = jQuery("<li/>").html(linphone.ui.template(a, "header.profile.status", f)); g.click(linphone.ui.exceptionHandler(a, d(f))), c.find(".profile .menu .list").append(g) } } c.find(".profile .menu .logout").click(linphone.ui.exceptionHandler(a, function () { var b = linphone.ui.getCore(a); linphone.ui.core.stop(b), linphone.ui.header.update(a, null), linphone.ui.header.menu.close(a), linphone.ui.logout(a) })), c.find(".navigation .settings").click(linphone.ui.exceptionHandler(a, function () { jQuery(this).hasClass("disabled") || linphone.ui.view.show(a, "settings") })), c.find(".navigation .help").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.show(a, "help") })), c.find(".navigation .about").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.show(a, "about") })), c.find(".language .list").click(linphone.ui.exceptionHandler(a, function (b) { var c = jQuery(b.target ? b.target : b.srcElement); if (c.isOrParent(".linphoneweb > .header .language .list > li")) { var d = c.data("data"); linphone.ui.locale.change(a, d) } })) }, translate: function (a) { linphone.ui.header.reloadLanguageList(a) }, reloadLanguageList: function (a) { var b = a.find("> .header .language .list"); b.empty(); for (var c = linphone.ui.configuration(a).locales, d = 0; d < c.length; ++d) { var e = c[d], f = linphone.ui.template(a, "header.language.list.entry", { name: e.name, title: e.title, current: e.locale === jQuery.i18n.locale }); f.data("data", e), b.append(f) } b.tooltip({ tooltipClass: "linphonewebcls", position: { my: "left top+10", at: "left bottom", collision: "flipfit" } }) }, menu: { open: function (a) { a.find("> .header .profile").addClass("highlight"), a.find("> .header .menu").show() }, close: function (a) { a.find("> .header .menu").hide(), a.find("> .header .profile").removeClass("highlight") } }, onRegistrationStateChanged: function (a, b) { var c = jQuery(this); b.error !== linphone.Reason.IOError || linphone.ui.view.top(c).hasClass("login") ? linphone.ui.header.update(c, b, null) : linphone.ui.header.update(c, b, linphone.ui.networkState.Offline) }, onNetworkStateChanged: function (a, b) { var c = jQuery(this); linphone.ui.header.update(c, null, b) }, update: function (a, b, c) { linphone.ui.logger.log(a, "Header: update"); var d = a.find("> .header"); "undefined" != typeof b && b || (b = linphone.ui.utils.getMainProxyConfig(a)), "undefined" != typeof c && c || (c = linphone.ui.getNetworkState(a)), c === linphone.ui.networkState.Online ? (d.find(".offline").hide(), b && b.state === linphone.RegistrationState.Ok ? (linphone.ui.header.profile.update(a), d.find(".empty").hide(), d.find(".profile").show(), d.find(".settings").removeClass("disabled"), d.find(".profile .identity").text(linphone.ui.utils.getUsername(a, b.identity))) : (d.find(".empty").show(), d.find(".profile").hide(), d.find(".settings").addClass("disabled"))) : (d.find(".offline").show(), d.find(".empty").hide(), d.find(".profile").hide()) }, profile: { findStatus: function (a) { var b = a.presenceModel, c = linphone.getPresenceActivityTypeText(b.activity.type), d = linphone.ui.utils.status.online; for (var e in linphone.ui.utils.status) { var f = linphone.ui.utils.status[e]; if (linphone.getPresenceActivityTypeText(f.value) === c) { d = f; break } } return d }, update: function (a) { var b = linphone.ui.configuration(a); if (linphone.ui.logger.log(a, "Header: update profile"), b.disablePresence) a.find("> .header .profile .status").hide(); else { var c = linphone.ui.getCore(a), d = linphone.ui.header.profile.findStatus(c); a.find("> .header .profile .status").html(linphone.ui.template(a, "header.profile.status", d)) } } } }, linphone.ui.menu = { init: function (a) { linphone.ui.menu.uiInit(a) }, uiInit: function (a) { linphone.ui.menu.hide(a), a.find("> .content .menu ul li").disableSelection(), a.find("> .content .menu .history").click(linphone.ui.exceptionHandler(a, function () { a.find("> .content .menu .history").addClass("active"), a.find("> .content .menu .contacts").removeClass("active"), linphone.ui.view.show(a, "history") })), a.find("> .content .menu .contacts").click(linphone.ui.exceptionHandler(a, function () { a.find("> .content .menu .contacts").addClass("active"), a.find("> .content .menu .history").removeClass("active"), linphone.ui.view.show(a, "contacts") })); var b = a.find("> .content .menu .chat .list"); b.append(linphone.ui.template(a, "menu.chat.list.entry", { name: "Cunégonde", unreadMessage: 0 })), b.append(linphone.ui.template(a, "menu.chat.list.entry", { name: "Roger", unreadMessage: 21 })), a.find("> .content .menu .list .entry").mouseover(linphone.ui.exceptionHandler(a, function () { jQuery(this).append('<span class="closeContact"></span>') })), a.find("> .content .menu .list .entry").mouseleave(linphone.ui.exceptionHandler(a, function () { jQuery(this).find(".closeContact").remove() })), a.find("> .content .menu .chat .entry").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.show(a, "chat") })), linphone.ui.configuration(a).disableChat && a.find("> .content .menu .chat").hide() }, translate: function () { }, show: function (a) { a.on("callStateChanged", linphone.ui.menu.onCallStateChanged), linphone.ui.menu.update(a), a.find("> .content .menu").show(), linphone.ui.view.top(a).hasClass("history") || linphone.ui.view.top(a).hasClass("contacts") || (a.find("> .content .menu .contacts").removeClass("active"), a.find("> .content .menu .history").removeClass("active")), a.find("> .content .menu .scroll-pane").each(function () { linphone.ui.slider(jQuery(this)) }) }, hide: function (a) { a.off("callStateChanged", linphone.ui.menu.onCallStateChanged), a.find("> .content .menu").hide() }, update: function (a) { var b = a.find("> .content .menu .calls .list"), c = linphone.ui.getCore(a); b.empty(); var d = c.calls, e = function (a, b) { return function () { linphone.ui.view.show(a, "call", b) === !1 && linphone.ui.view.call.update(a, b) } }, f = function () { var a = jQuery(this); a.removeClass("highlighted"), a.addClass("hover") }, g = function () { var a = jQuery(this); a.removeClass("hover"), a.addClass("highlighted") }, h = function (b, c) { if (c) { var d = linphone.ui.utils.getContactName(a, c); k.find(".name").text(d) } }; if ("undifined" != typeof d) for (var i = 0; i < d.length; ++i) { var j = d[i], k = linphone.ui.template(a, "menu.calls.list.entry", j); k.click(linphone.ui.exceptionHandler(a, e(a, j))), linphone.ui.utils.getContact(a, j.remoteAddress, h), b.append(k), j === c.currentCall && (k.removeClass("hover"), k.addClass("highlighted"), k.mouseenter(f), k.mouseleave(g)) } b.tooltip({ tooltipClass: "linphonewebcls", position: { my: "middle top+5", at: "middle bottom", collision: "flipfit" } }) }, onCallStateChanged: function () { var a = jQuery(this); linphone.ui.menu.update(a) }, getCallStateClass: function (a, b) { return b === linphone.CallState.Idle || b === linphone.CallState.OutgoingInit || b === linphone.CallState.OutgoingProgress ? "idle" : b === linphone.CallState.PausedByRemote || b === linphone.CallState.Paused ? "pause" : b === linphone.CallState.IncomingReceived || b === linphone.CallState.OutgoingRinging ? "ringing" : "play" } }, linphone.ui.mainbar = {
    init: function (a) { linphone.ui.mainbar.uiInit(a) }, uiInit: function (a) {
        a.find("> .content .mainbar .ringtone .switch .off").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.mainbar.update(a, 0) })), a.find("> .content .mainbar .ringtone .switch .on").click(linphone.ui.exceptionHandler(a, function () {
            linphone.ui.mainbar.update(a, 100)
        })), a.find("> .content .mainbar .ringtone").hide()
    }, translate: function () { }, show: function (a) { linphone.ui.mainbar.update(a), a.find("> .content .mainbar").show() }, hide: function (a) { a.find("> .content .mainbar").hide() }, update: function (a, b) { var c, d = linphone.ui.getCore(a), e = d.ringLevel; c = "undefined" != typeof b ? b : e, c > 0 && 100 > c && (c = 100), c !== e && (d.ringLevel = c), 100 === c ? (a.find("> .content .mainbar .ringtone .switch .off").removeClass("selected"), a.find("> .content .mainbar .ringtone .switch .on").addClass("selected")) : (a.find("> .content .mainbar .ringtone .switch .off").addClass("selected"), a.find("> .content .mainbar .ringtone .switch .on").removeClass("selected")) }
}, linphone.ui.dialer = { init: function (a) { linphone.ui.dialer.uiInit(a) }, uiInit: function (a) { a.find("> .content .dialer .call").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.dialer.call(a) })), a.find("> .content .dialer .address").keyup(linphone.ui.exceptionHandler(a, function (b) { b.which === jQuery.ui.keyCode.ENTER && linphone.ui.dialer.call(a) })), a.find("> .content .dialer .number").click(linphone.ui.exceptionHandler(a, function () { a.find("> .content .dialer .pinpad").toggle() })), a.find("> .content .dialer .pinpad .digit").mousedown(linphone.ui.exceptionHandler(a, function (b) { var c = jQuery(b.target ? b.target : b.srcElement), d = c.data("digit"); if ("undefined" != typeof d && null !== d) { var e = linphone.ui.getCore(a); e.playDtmf(d, 0); var f = e.currentCall; if (f) e.sendDtmf(f, d); else { var g = a.find("> .content .dialer .address"); g.val(g.val() + d), linphone.ui.dialer.moveCaretToEnd(a) } } })).mouseup(linphone.ui.exceptionHandler(a, function (b) { var c = jQuery(b.target ? b.target : b.srcElement), d = c.data("digit"); if ("undefined" != typeof d && null !== d) { var e = linphone.ui.getCore(a); e.stopDtmf(d) } })), a.find("> .content .dialer .pinpad").disableSelection(), linphone.ui.configuration(a).disableChat && a.find("> .content .dialer .actions .chat").hide() }, translate: function (a) { a.find("> .content .dialer .address").watermark(jQuery.i18n.translate("content.dialer.address"), { className: "watermark", useNative: !1 }) }, moveCaretToEnd: function (a) { var b = a.find("> .content .dialer .address"), c = b.get(0); if ("number" == typeof c.selectionStart) c.selectionStart = c.selectionEnd = c.value.length; else if ("undefined" != typeof c.createTextRange) { c.focus(); var d = c.createTextRange(); d.collapse(!1), d.select() } }, call: function (a) { var b = a.find("> .content .dialer .address").val(); "" !== b && linphone.ui.utils.call(a, b, function () { a.find("> .content .dialer .address").val("") }, function () { linphone.ui.popup.error.show(a, "global.errors.uri.misformatted") }) } }, linphone.ui.view = { init: function (a) { linphone.ui.view.uiInit(a), linphone.ui.view.main.init(a), linphone.ui.view.plugin.init(a), linphone.ui.view.install.init(a), linphone.ui.view.login.init(a), linphone.ui.view.contacts.init(a), linphone.ui.view.contact.init(a), linphone.ui.view.history.init(a), linphone.ui.view.call.init(a), linphone.ui.view.conference.init(a), linphone.ui.view.chat.init(a), linphone.ui.view.settings.init(a), linphone.ui.view.about.init(a), linphone.ui.view.help.init(a), linphone.ui.view.error.init(a), linphone.ui.view.updateIndex(a) }, uiInit: function () { }, translate: function (a) { linphone.ui.view.plugin.translate(a), linphone.ui.view.install.translate(a), linphone.ui.view.main.translate(a), linphone.ui.view.login.translate(a), linphone.ui.view.contacts.translate(a), linphone.ui.view.contact.translate(a), linphone.ui.view.history.translate(a), linphone.ui.view.call.translate(a), linphone.ui.view.conference.translate(a), linphone.ui.view.chat.translate(a), linphone.ui.view.settings.translate(a), linphone.ui.view.about.translate(a), linphone.ui.view.help.translate(a), linphone.ui.view.error.translate(a) }, show: function (a, b) { linphone.ui.logger.log(a, "Show view: " + b); var c = a.find("> .content .view > ." + b); return c.zIndex(100), linphone.ui.view.update.apply(this, [a].concat(Array.prototype.slice.call(arguments, 2))) }, hide: function (a, b) { linphone.ui.logger.log(a, "Hide view: " + b); var c; return c = "undefined" != typeof b ? a.find("> .content .view > ." + b) : linphone.ui.view.top(a), c.zIndex(0), linphone.ui.view.update.apply(this, [a].concat(Array.prototype.slice.call(arguments, 2))) }, updateIndex: function (a) { var b = a.find("> .content .view > div"); return b.sort(function (a, b) { return jQuery(a).zIndex() - jQuery(b).zIndex() }), b.each(function (a, b) { var c = jQuery(b); c.zIndex(a) }), b }, update: function (a) { var b, c = !1, d = arguments, e = linphone.ui.view.updateIndex(a); return e.each(function (f, g) { var h = jQuery(g); f === e.length - 1 ? h.is(":visible") || (c = !0, h.show(), b = h.data("linphoneweb-view"), b && b.show && b.show.apply(this, [a].concat(Array.prototype.slice.call(d, 1)))) : h.is(":visible") && (c = !0, h.hide(), b = h.data("linphoneweb-view"), b && b.hide && b.hide.apply(this, [a].concat(Array.prototype.slice.call(d, 1)))) }), c }, top: function (a) { return a.find("> .content .view > div:visible") } }, linphone.ui.view.main = { init: function (a) { linphone.ui.view.main.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .main").data("linphoneweb-view", linphone.ui.view.main) }, translate: function () { }, show: function (a) { linphone.ui.menu.show(a) }, hide: function () { } }, linphone.ui.view.plugin = { init: function (a) { linphone.ui.view.plugin.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .plugin").data("linphoneweb-view", linphone.ui.view.plugin), a.find("> .content .view > .plugin .reload").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.core.reload(a) })), a.find("> .content .view > .plugin .download").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.plugin.download(a), linphone.ui.view.show(a, "install") })) }, translate: function () { }, show: function (a, b) { if (linphone.ui.menu.hide(a), "undefined" != typeof b && null !== b) { var c, d = linphone.ui.configuration(a), e = a.find("> .content .view > .plugin"), f = e.find(".link"); if (e.find(".action .download").hide(), e.find(".action .reload").hide(), navigator.userAgent.match(/Android/i)) return f.empty(), c = linphone.ui.template(a, "view.plugin.link", d.appLinks.android), f.append(c), void jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.mobile_application"); if (/iphone|ipad|ipod/i.test(navigator.userAgent.toLowerCase())) return f.empty(), c = linphone.ui.template(a, "view.plugin.link", d.appLinks.iOS), f.append(c), void jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.mobile_application"); if (navigator.userAgent.match(/Windows Phone/i) || navigator.userAgent.match(/ZuneWP7/i)) return f.empty(), c = linphone.ui.template(a, "view.plugin.link", d.appLinks.windows_phone), f.append(c), void jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.mobile_application"); switch (e.find(".action .reload").show(), b) { case linphone.ui.core.detectionStatus.Outdated: "Explorer" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.outdated_auto") : "Firefox" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.outdated_auto") : "Chrome" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.outdated_auto") : (e.find(".action .download").show(), jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.outdated_download")); break; case linphone.ui.core.detectionStatus.NotInstalled: "Explorer" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.auto_or_update") : "Firefox" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.auto") : "Chrome" === d.file.browser ? jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.auto") : (e.find(".action .download").show(), jQuery.i18n.set(e.find("> .text"), "content.view.plugin.text.download")); break; default: linphone.ui.error(a, "errors.exception.unhandled") } } }, hide: function () { }, download: function (a) { var b = linphone.ui.configuration(a); window.location.href = b.file.description } }, linphone.ui.view.install = { init: function (a) { linphone.ui.view.install.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .install").data("linphoneweb-view", linphone.ui.view.install), a.find("> .content .view > .install .reload").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.core.reload(a) })) }, translate: function () { }, show: function (a) { linphone.ui.menu.hide(a); var b = (linphone.ui.configuration(a), a.find("> .content .view > .install")); "Windows" === jQuery.client.os ? jQuery.i18n.set(b.find("> .text"), "content.view.install.text.install_windows") : "Mac" === jQuery.client.os ? jQuery.i18n.set(b.find("> .text"), "content.view.install.text.install_mac") : "Linux" === jQuery.client.os && jQuery.i18n.set(b.find("> .text"), "content.view.install.text.install_tar_gz") }, hide: function () { } }, linphone.ui.view.login = { simpleDomain: "sip.linphone.org", remoteProvisioningUriBase: window.location.protocol + "//" + window.location.host + window.location.pathname + "conf/", state: { simple: { regex: { account: new RegExp(linphone.ui.utils.regex.sip.username), password: new RegExp("(.*)") } }, advanced: { regex: { account: new RegExp(linphone.ui.utils.regex.sip.username), password: new RegExp("(.*)"), domain: new RegExp(linphone.ui.utils.regex.sip.domain) } } }, init: function (a) { linphone.ui.view.login.uiInit(a) }, uiInit: function (a) { var b = a.find("> .content .view > .login"); b.data("linphoneweb-view", linphone.ui.view.login), b.find(".actions .advanced").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.login.update(a, linphone.ui.view.login.state.advanced) })), b.find(".actions .simple").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.login.update(a, linphone.ui.view.login.state.simple) })), b.find(".actions .login").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.login.login(a) })), b.find(".password").keyup(linphone.ui.exceptionHandler(a, function (b) { b.which === jQuery.ui.keyCode.ENTER && linphone.ui.view.login.login(a) })), b.find(".domain").keyup(linphone.ui.exceptionHandler(a, function (b) { b.which === jQuery.ui.keyCode.ENTER && linphone.ui.view.login.login(a) })), b.find(".proxy").keyup(linphone.ui.exceptionHandler(a, function (b) { b.which === jQuery.ui.keyCode.ENTER && linphone.ui.view.login.login(a) })), b.find(".account").keyup(linphone.ui.exceptionHandler(a, function (b) { b.which === jQuery.ui.keyCode.ENTER && linphone.ui.view.login.login(a) })) }, translate: function (a) { var b = a.find("> .content .view > .login"); b.find(".accountSimple .account").watermark(jQuery.i18n.translate("content.view.login.accountSimple.account"), { className: "watermark", useNative: !1 }), b.find(".accountSimple .password").watermark(jQuery.i18n.translate("content.view.login.accountSimple.password"), { className: "watermark", useNative: !1 }), b.find(".accountAdvanced .account").watermark(jQuery.i18n.translate("content.view.login.accountAdvanced.account"), { className: "watermark", useNative: !1 }), b.find(".accountAdvanced .password").watermark(jQuery.i18n.translate("content.view.login.accountAdvanced.password"), { className: "watermark", useNative: !1 }), b.find(".accountAdvanced .domain").watermark(jQuery.i18n.translate("content.view.login.accountAdvanced.domain"), { className: "watermark", useNative: !1 }), b.find(".accountAdvanced .proxy").watermark(jQuery.i18n.translate("content.view.login.accountAdvanced.proxy"), { className: "watermark", useNative: !1 }) }, show: function (a) { var b = linphone.ui.getCore(a), c = linphone.ui.configuration(a), d = a.find("> .content .view > .login"); a.on("authInfoRequested", linphone.ui.view.login.onAuthInfoRequested), a.on("globalStateChanged", linphone.ui.view.login.onGlobalStateChanged), a.on("registrationStateChanged", linphone.ui.view.login.onRegistrationStateChanged); var e = d.find(".createAccount"); e.empty(); var f = c.linphone_account, g = linphone.ui.template(a, "view.login.createAccount", f); e.append(g); var h = linphone.ui.utils.readCookie("linphone-configfilename"); h && b.fileManager.exists(h, function (b) { if (b) linphone.ui.view.login.update(a, linphone.ui.view.login.state.automaticallyConnect), linphone.ui.view.login.startCore(a, h); else { var c = new Date; c.setTime(c.getTime() - 1), linphone.ui.utils.setCookie("linphone-configfilename", "", c, "/") } }), linphone.ui.menu.hide(a), linphone.ui.view.login.reset(a), linphone.ui.view.login.update(a, linphone.ui.view.login.state.simple) }, hide: function () { }, reset: function (a) { var b = a.find("> .content .view > .login"); b.find(".accountSimple .account").val(""), b.find(".accountSimple .password").val(""), b.find(".accountAdvanced .account").val(""), b.find(".accountAdvanced .password").val(""), b.find(".accountAdvanced .domain").val(""), b.find(".accountAdvanced .proxy").val(""), b.find('input[name=transport][value="udp"]').prop("checked", "checked"), b.find('input[name=outbandProxy][value="off"]').prop("checked", "checked"), b.find(".actions .rememberMe").prop("checked", !1) }, update: function (a, b) { if (!linphone.ui.view.login.isLocked(a)) { var c = a.find("> .content .view > .login"); switch (b) { case linphone.ui.view.login.state.simple: c.find(".accountSimple").show(), c.find(".actions").show(), c.find(".accountAdvanced").hide(), c.find(".actions .advanced").show(), c.find(".actions .simple").hide(); break; case linphone.ui.view.login.state.automaticallyConnect: c.find(".accountSimple").hide(), c.find(".accountAdvanced").hide(), c.find(".actions").hide(); break; case linphone.ui.view.login.state.advanced: c.find(".accountAdvanced").show(), c.find(".actions").show(), c.find(".accountSimple").hide(), c.find(".actions .simple").show(), c.find(".actions .advanced").hide() } } }, lock: function (a) { var b = a.find("> .content .view > .login"); b.find(".wait").show(), b.addClass("disabled"), b.find("form input").prop("disabled", !0), b.find(".actions input").prop("disabled", !0) }, unlock: function (a) { var b = a.find("> .content .view > .login"); b.find(".wait").hide(), b.removeClass("disabled"), b.find("form input").prop("disabled", !1), b.find(".actions input").prop("disabled", !1) }, isLocked: function (a) { var b = a.find("> .content .view > .login"); return b.hasClass("disabled") }, isSimpleState: function (a) { var b = a.find("> .content .view > .login"); return b.find(".accountSimple").is(":visible") }, getAccount: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? b.find(".accountSimple .account").val() : b.find(".accountAdvanced .account").val() }, getPassword: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? b.find(".accountSimple .password").val() : b.find(".accountAdvanced .password").val() }, getDomain: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? linphone.ui.view.login.simpleDomain : b.find(".accountAdvanced .domain").val() }, getTransport: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? null : b.find("input[name=transport]:checked").val() }, getProxy: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? null : b.find(".accountAdvanced .proxy").val() }, getOutbandProxy: function (a) { var b = a.find("> .content .view > .login"); return linphone.ui.view.login.isSimpleState(a) ? !1 : b.find("input[name=outbandProxy]:checked").val() }, getConfigFilename: function (a) { return "local:///.linphonerc_" + linphone.ui.view.login.getAccount(a) + "@" + linphone.ui.view.login.getDomain(a) }, computeHash: function (a) { var b = linphone.ui.view.login.getAccount(a), c = linphone.ui.view.login.getPassword(a), d = linphone.ui.view.login.getDomain(a); return CryptoJS.SHA1(b + "@" + d + ":" + c).toString(CryptoJS.enc.Hex) }, checkLoginInformation: function (a) { var b = linphone.ui.view.login.getAccount(a), c = linphone.ui.view.login.getPassword(a); if (linphone.ui.view.login.isSimpleState(a)) { if (null === linphone.ui.view.login.state.simple.regex.account.exec(b)) return linphone.ui.popup.error.show(a, "content.view.login.accountSimple.errors.account"), !1; if (null === linphone.ui.view.login.state.simple.regex.password.exec(c)) return linphone.ui.popup.error.show(a, "content.view.login.accountSimple.errors.password"), !1 } else { var d = linphone.ui.view.login.getDomain(a); if (null === linphone.ui.view.login.state.advanced.regex.account.exec(b)) return linphone.ui.popup.error.show(a, "content.view.login.accountAdvanced.errors.account"), !1; if (null === linphone.ui.view.login.state.advanced.regex.password.exec(c)) return linphone.ui.popup.error.show(a, "content.view.login.accountAdvanced.errors.password"), !1; if (null === linphone.ui.view.login.state.advanced.regex.domain.exec(d)) return linphone.ui.popup.error.show(a, "content.view.login.accountAdvanced.errors.domain"), !1 } return !0 }, login: function (a) { linphone.ui.view.login.isLocked(a) || linphone.ui.view.login.checkLoginInformation(a) && linphone.ui.view.login.loginRegister(a) }, startCore: function (a, b) { var c = linphone.ui.getCore(a); linphone.ui.view.login.lock(a), linphone.ui.core.start(c, b), c.iterateEnabled = !0 }, loginRegister: function (a) { var b = linphone.ui.getCore(a), c = (linphone.ui.view.login.getAccount(a), linphone.ui.view.login.getDomain(a), linphone.ui.view.login.getConfigFilename(a)); b.fileManager.exists(c, function (d) { var e = b.newLpConfig(c); if (d) { var f = (linphone.ui.view.login.getPassword(a), linphone.ui.view.login.computeHash(a)), g = e.getString("app", "identity_hash", ""); "" === g || f === g ? linphone.ui.view.login.startCore(a, c) : linphone.ui.popup.error.show(a, "content.view.login.accountSimple.errors.password") } else { var h = linphone.ui.view.login.remoteProvisioningUriBase; h += linphone.ui.view.login.isSimpleState(a) ? "simple.xml" : "advanced.xml", e.setString("misc", "config-uri", h), e.sync(), linphone.ui.view.login.startCore(a, c) } }) }, loginConfigure: function (a) { var b = linphone.ui.getCore(a), c = linphone.ui.view.login.getAccount(a), d = (linphone.ui.view.login.getPassword(a), b.createProxyConfig()), e = b.newAddress(d.identity); if (e.username = c, linphone.ui.view.login.isSimpleState(a)) d.identity = e.asString(); else { var f = linphone.ui.view.login.getDomain(a), g = linphone.ui.view.login.getTransport(a), h = linphone.ui.view.login.getProxy(a); e.domain = f, d.identity = e.asString(), d.serverAddr = null !== h && "" !== h ? h : f, e = b.newAddress(d.serverAddr), e.transport = "tcp" === g ? linphone.TransportType.Tcp : "tls" === g ? linphone.TransportType.Tls : linphone.TransportType.Udp, d.serverAddr = e.asString(), linphone.ui.view.login.getOutbandProxy(a) && (d.route = d.serverAddr) } var i = b.addProxyConfig(d); 0 === i ? b.defaultProxy = d : (linphone.ui.view.login.error(a, "content.view.login.errors.registrationFailed"), linphone.ui.core.stop(b)) }, error: function (a, b) { linphone.ui.view.login.unlock(a), linphone.ui.popup.error.show(a, b) }, done: function (a) { var b = a.find("> .content .view > .login"); a.off("authInfoRequested", linphone.ui.view.login.onAuthInfoRequested), a.off("globalStateChanged", linphone.ui.view.login.onGlobalStateChanged), a.off("registrationStateChanged", linphone.ui.view.login.onRegistrationStateChanged), linphone.ui.view.login.unlock(a), linphone.ui.login(a, linphone.ui.view.top(a).is(b)) }, onAuthInfoRequested: function (a, b, c, d) { var e = jQuery(this), f = linphone.ui.getCore(e), g = f.newAuthInfo(c, c, linphone.ui.view.login.getPassword(e), null, b, d); if (0 === f.authInfoList.length) f.addAuthInfo(g); else { var h = linphone.ui.view.login.getConfigFilename(e), i = f.proxyConfigList, j = i[0]; j.error === linphone.Reason.BadCredentials || j.error === linphone.Reason.NotFound ? (linphone.ui.core.stop(f), f.fileManager.remove(h, function () { linphone.ui.view.login.error(e, "content.view.login.errors.account") })) : j.error === linphone.Reason.Unauthorized && (linphone.ui.core.stop(f), f.fileManager.remove(h, function () { linphone.ui.view.login.error(e, "content.view.login.errors.registrationFailed") })) } }, onGlobalStateChanged: function (a, b) { if (b === linphone.GlobalState.On) { var c = jQuery(this), d = linphone.ui.getCore(c); d.staticPicture = "internal:///share/images/nowebcamCIF.jpg", d.ring = "internal:///share/sounds/linphone/rings/oldphone.wav", d.ringback = "internal:///share/sounds/linphone/ringback.wav", d.playFile = "internal:///share/sounds/linphone/rings/toy-mono.wav", d.usePreviewWindow = !1, null === d.defaultProxy && linphone.ui.view.login.loginConfigure(c) } }, onRegistrationStateChanged: function (a, b, c) { var d = jQuery(this), e = d.find("> .content .view > .login"), f = linphone.ui.getCore(d); if (c === linphone.RegistrationState.Ok) { if ("" === f.config.getString("app", "identity_hash", "")) { var g = linphone.ui.view.login.computeHash(d); f.config.setString("app", "identity_hash", g) } if (e.find(".actions .rememberMe").is(":checked")) { var h = new Date; h.setTime(h.getTime() + 31536e6), linphone.ui.utils.setCookie("linphone-configfilename", linphone.ui.view.login.getConfigFilename(d), h, "/") } linphone.ui.view.login.done(d) } else if (c === linphone.RegistrationState.Failed) if (b.error === linphone.Reason.BadCredentials || b.error === linphone.Reason.NotFound) { var i = linphone.ui.view.login.getConfigFilename(d); linphone.ui.core.stop(f), f.fileManager.remove(i, function () { linphone.ui.view.login.error(d, "content.view.login.errors.account") }) } else b.error !== linphone.Reason.Unauthorized && (linphone.ui.core.stop(f), linphone.ui.view.login.error(d, "content.view.login.errors.registrationFailed")) } }, linphone.ui.view.contacts = { init: function (a) { linphone.ui.view.contacts.uiInit(a) }, uiInit: function (a) { var b = a.find("> .content .view > .contacts"); b.data("linphoneweb-view", linphone.ui.view.contacts), b.find(".actions .all").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.contacts.filter.update(a, linphone.ui.view.contacts.filter.all) })), b.find(".actions .online").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.contacts.filter.update(a, linphone.ui.view.contacts.filter.online) })), linphone.ui.view.contacts.filter.update(a, linphone.ui.view.contacts.filter.all), b.find("> .actions .addContact").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.contact.addContact(a) })), b.find(".actions .filters").hide() }, translate: function () { }, filter: { all: 0, online: 1, update: function (a, b) { var c = a.find("> .content .view > .contacts"); switch (c.find(".actions .all").removeClass("selected"), c.find(".actions .online").removeClass("selected"), b) { case linphone.ui.view.contacts.filter.all: c.find(".actions .all").addClass("selected"); break; case linphone.ui.view.contacts.filter.online: c.find(".actions .online").addClass("selected"); break; default: linphone.ui.logger.error(a, "Invalid linphone.ui.view.contacts.filter state") } } }, show: function (a) { var b = a.find("> .content .view > .contacts"); linphone.ui.menu.show(a); var c = (linphone.ui.getCore(a), linphone.ui.configuration(a)); c.models.contacts.list(linphone.ui.view.contacts.filter, function (d, e) { var f = b.find(".list"), g = function (a, b) { return function () { linphone.ui.view.contact.editContact(a, b) } }, h = function (a, b) { return function () { linphone.ui.view.contacts.onCall(a, b) } }, i = function (b, c) { var d = jQuery(c), e = d.find(".number").text(); d.find(".callContact").click(linphone.ui.exceptionHandler(a, h(a, e))) }; f.empty(); for (var j in e) { var k = e[j], l = linphone.ui.template(a, "view.contacts.list.entry", { friend: k, address: k.address.asStringUriOnly(), status: linphone.ui.utils.getStatus(a, k) }); l.find(" .goContact").click(linphone.ui.exceptionHandler(a, g(a, k))), f.append(l), l.find(".address").each(i) } c.disableChat && a.find(".entry .chatContact").hide(), c.disablePresence && f.find(".entry .presence").hide(), a.find("> .content .view > .contacts .scroll-pane").each(function () { linphone.ui.slider(jQuery(this)) }) }) }, hide: function () { }, onCall: function (a, b) { linphone.ui.utils.call(a, b, function () { }, function () { linphone.ui.popup.error.show(a, "global.errors.uri.misformatted") }) } }, linphone.ui.view.contact = { init: function (a) { linphone.ui.view.contact.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .contact").data("linphoneweb-view", linphone.ui.view.contact), a.find("> .content .view > .contact .cancelContact").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.hide(a, "contact") })), a.find("> .content .view > .contact .removeContact").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.contact.remove(a) })), a.find("> .content .view > .contact .saveContact").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.contact.save(a) })), a.find("> .content .view > .contact .uploadPhoto").hide() }, translate: function (a) { var b = a.find("> .content .view > .contact"); b.find(".firstname").watermark(jQuery.i18n.translate("content.view.contact.firstname"), { className: "watermark", useNative: !1 }), b.find(".lastname").watermark(jQuery.i18n.translate("content.view.contact.lastname"), { className: "watermark", useNative: !1 }), b.find(".addressInput").watermark(jQuery.i18n.translate("content.view.contact.addressContact"), { className: "watermark", useNative: !1 }) }, show: function (a) { linphone.ui.menu.show(a); a.find("> .content .view > .contact") }, hide: function () { }, clear: function (a) { var b = a.find("> .content .view > .contact .entry"); b.find(".lastname").val(""), b.find(".firstname").val(""), b.find(".addressInput").val(""), b.find(".showPresence").prop("checked", !1), b.find(".allowPresence").prop("checked", !1) }, addContact: function (a) { linphone.ui.view.contact.onSaveContact(a, null) }, editContact: function (a, b) { linphone.ui.view.contact.onSaveContact(a, b) }, onSaveContact: function (a, b) { var c = a.find("> .content .view > .contact .entry"); linphone.ui.view.contact.clear(a); var d = c.find(".list"); d.empty(), null === b ? (a.find("> .content .view > .contact .removeContact").hide(), c.data("friend", null)) : (a.find("> .content .view > .contact .removeContact").show(), c.find(".firstname").val(b.name), c.find(".addressInput").val(b.address.asStringUriOnly()), c.data("friend", b), c.find(".showPresence").prop("checked", b.subscribesEnabled), b.incSubscribePolicy === linphone.SubscribePolicy.Accept ? c.find(".allowPresence").prop("checked", !0) : c.find(".allowPresence").prop("checked", !1)), c.find(".contactImg").val("style/img/avatar.jpg"), linphone.ui.view.show(a, "contact") }, save: function (a) { var b, c = a.find("> .content .view > .contact .entry"), d = linphone.ui.configuration(a), e = (linphone.ui.getCore(a), c.find(".addressInput").val()), f = c.data("friend"), g = c.find(".firstname").val(), h = !1, i = linphone.SubscribePolicy.Deny; c.find(".showPresence").is(":checked") && (h = !0), c.find(".allowPresence").is(":checked") && (i = linphone.SubscribePolicy.Accept), "" !== e && (b = linphone.ui.utils.formatAddress(a, e), "" === g && (g = b.username), null !== b ? (null !== f ? d.models.contacts.update({ friend: f, address: b, name: g, showPresence: h, allowPresence: i }) : d.models.contacts.create({ address: b, name: g, showPresence: h, allowPresence: i }), linphone.ui.view.hide(a, "contact"), linphone.ui.view.show(a, "contacts")) : linphone.ui.view.contact.onSaveContact(a, f)) }, remove: function (a) { var b = a.find("> .content .view > .contact .entry"), c = linphone.ui.configuration(a), d = linphone.ui.getCore(a), e = b.find(".addressInput").val(), f = linphone.ui.utils.formatAddress(a, e); if ("undefined" != typeof f) { var g = d.getFriendByAddress(f.asString()); c.models.contacts.remove(g) } linphone.ui.view.hide(a, "contact"), linphone.ui.view.show(a, "contacts") } }, linphone.ui.view.history = { init: function (a) { linphone.ui.view.history.uiInit(a) }, uiInit: function (a) { var b = a.find("> .content .view > .history"); b.data("linphoneweb-view", linphone.ui.view.history), b.find("> .actions > .filters > .all").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.history.filter.update(a, linphone.ui.view.history.filter.all), linphone.ui.view.history.update(a) })), b.find("> .actions > .filters > .incoming").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.history.filter.update(a, linphone.ui.view.history.filter.incoming), linphone.ui.view.history.update(a) })), b.find("> .actions > .filters > .outgoing").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.history.filter.update(a, linphone.ui.view.history.filter.outgoing), linphone.ui.view.history.update(a) })), b.find("> .actions > .filters > .miss").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.history.filter.update(a, linphone.ui.view.history.filter.miss), linphone.ui.view.history.update(a) })), b.find("> .actions .delete").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.history.deleteHistory(a) })), b.find("> .actions .delete").show(), linphone.ui.view.history.filter.update(a, linphone.ui.view.history.filter.all) }, translate: function () { }, filter: { all: 0, incoming: 1, outgoing: 2, miss: 3, update: function (a, b) { var c = a.find("> .content .view > .history"); switch (c.find(".actions .all").removeClass("selected"), c.find(".actions .incoming").removeClass("selected"), c.find(".actions .outgoing").removeClass("selected"), c.find(".actions .miss").removeClass("selected"), b) { case linphone.ui.view.history.filter.all: c.find(".actions .all").addClass("selected"); break; case linphone.ui.view.history.filter.incoming: c.find(".actions .incoming").addClass("selected"); break; case linphone.ui.view.history.filter.outgoing: c.find(".actions .outgoing").addClass("selected"); break; case linphone.ui.view.history.filter.miss: c.find(".actions .miss").addClass("selected"); break; default: linphone.ui.logger.error(a, "Invalid linphone.ui.view.history.filter state") } }, getState: function (a) { var b = a.find("> .content .view > .history"); return b.find(".actions .all").hasClass("selected") ? linphone.ui.view.history.filter.all : b.find(".actions .incoming").hasClass("selected") ? linphone.ui.view.history.filter.incoming : b.find(".actions .outgoing").hasClass("selected") ? linphone.ui.view.history.filter.outgoing : b.find(".actions .miss").hasClass("selected") ? linphone.ui.view.history.filter.miss : void 0 }, getFilter: function (a, b) { "undefined" == typeof b && (b = linphone.ui.view.history.filter.getState(a)); var c = ""; switch (b) { case linphone.ui.view.history.filter.all: break; case linphone.ui.view.history.filter.incoming: c = "WHERE (direction = " + linphone.CallDir.Incoming + ")"; break; case linphone.ui.view.history.filter.outgoing: c = "WHERE (direction = " + linphone.CallDir.Outgoing + ")"; break; case linphone.ui.view.history.filter.miss: c = "WHERE (status = " + linphone.CallStatus.Missed + ")"; break; default: linphone.ui.logger.error(a, "Invalid linphone.ui.view.history.filter state") } return c + " ORDER BY date DESC" } }, deleteHistory: function (a) { var b = linphone.ui.getCore(a); b.clearCallLogs(), linphone.ui.view.history.show(a) }, show: function (a) { linphone.ui.menu.show(a), linphone.ui.view.history.update(a); var b = a.find("> .content .view > .history"), c = function () { linphone.ui.view.history.update(a) }; b.data("engineOnUpdate", c); var d = linphone.ui.configuration(a).models.history; d.onUpdate.add(c) }, hide: function (a) { var b = a.find("> .content .view > .history"), c = b.data("engineOnUpdate"); if (c) { var d = linphone.ui.configuration(a).models.history; d.onUpdate.remove(c) } }, update: function (a) { linphone.ui.logger.log(a, "History update"); var b = a.find("> .content .view > .history"), c = linphone.ui.configuration(a), d = linphone.ui.view.history.filter.getFilter(a); c.models.history.list(d, function (d, e) { var f = b.find(".list"); f.empty(); var g = function (b) { return function () { linphone.ui.utils.call(a, b.remote) } }, h = function (a) { return function () { c.models.history.remove(a.id) } }, i = function (b, c) { if (c) { var d = linphone.ui.utils.getContactName(a, c); l.find(".contact .name").text(d) } }; for (var j in e) { var k = e[j], l = linphone.ui.template(a, "view.history.list.entry", k); jQuery.i18n.update(l), l.find(".actions .call").click(linphone.ui.exceptionHandler(a, g(k))), l.find(".actions .remove").click(linphone.ui.exceptionHandler(a, h(k))), linphone.ui.utils.getContact(a, k.remote, i), f.append(l) } a.find("> .content .view > .history .scroll-pane").each(function () { linphone.ui.slider(jQuery(this)) }), linphone.ui.configuration(a).disableChat && a.find("> .content .view > .history .entry .actions .chat").hide() }) }, utils: { getCallDirection: function (a, b) { var c = linphone.getCallDirText(b).toLowerCase(), d = jQuery.i18n.skeleton("global.unknown"); return "?" !== c && (d = jQuery.i18n.skeleton("content.view.history.direction.values." + c)), d }, getCallStatus: function (a, b) { var c = linphone.getCallStatusText(b).toLowerCase(), d = jQuery.i18n.skeleton("global.unknown"); return "?" !== c && (d = jQuery.i18n.skeleton("content.view.history.status.values." + c)), d } } }, linphone.ui.view.call = {
    init: function (a) { linphone.ui.view.call.uiInit(a) }, uiInit: function (a) { var b = a.find("> .content .view > .call"); b.data("linphoneweb-view", linphone.ui.view.call) }, translate: function () { }, show: function (a, b) {
        var c = linphone.ui.getCore(a), d = a.find("> .content .view > .call"), e = d.find(" .actions"); e.empty(), e.append(linphone.ui.template(a, "view.call.actions", c)); var f = a.find("> .content .view > .call .actions .callSignal"); f.addClass("imageSignal3b"), a.on("callStatsUpdated", linphone.ui.view.call.onCallStatsUpdated), linphone.ui.view.call.update(a, b)
    }, update: function (a, b) { var c = linphone.ui.getCore(a), d = a.find("> .content .view > .call"), e = d.find(" .contactView"), f = a.find("> .content .view > .call ").data("currentCall"); "undefined" == typeof b && ("undefined" != typeof f ? b = f : (linphone.ui.view.hide(a, b), linphone.ui.view.show(a, "main"))), d.data("currentCall", b), linphone.ui.menu.show(a), e.empty(), e.append(linphone.ui.template(a, "view.call.contact", b)), linphone.ui.view.call.updateMuteButton(a, c.micEnabled), linphone.ui.view.call.updateVideoButton(a, !1), linphone.ui.view.call.activateVideoButton(a, b, !0), d.find(".actions .muteEnabled .on").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onMuteButton(a, !1) })), d.find(".actions .muteEnabled .off").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onMuteButton(a, !0) })), d.find(".actions .conference").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.show(a, "conference") })), d.find(".actions .pause").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onPauseButton(a, b) })), d.find(".actions .hangup").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onTerminateButton(a, b) })), linphone.ui.configuration(a).disableConference && a.find(".actions .conference").hide() }, hide: function () { }, updateVideoProfile: function (a, b) { var c = a.find("> .content .view > .call"); b ? (c.find(".video .profile .resize .collapse").show(), c.find(".video .profile .resize .expand").hide(), c.find(".video .profile").removeClass("collapsed")) : (c.find(".video .profile .resize .expand").show(), c.find(".video .profile .resize .collapse").hide(), c.find(".video .profile").addClass("collapsed")) }, updateMuteButton: function (a, b) { b === !0 ? (a.find("> .content .view > .call .actions .muteEnabled .on").addClass("selected"), a.find("> .content .view > .call .actions .muteEnabled .off").removeClass("selected")) : (a.find("> .content .view > .call .actions .muteEnabled .off").addClass("selected"), a.find("> .content .view > .call .actions .muteEnabled .on").removeClass("selected")) }, updateVideoButton: function (a, b) { b === !0 ? (a.find("> .content .view > .call .actions .videoEnabled .on").addClass("selected"), a.find("> .content .view > .call .actions .videoEnabled .off").removeClass("selected")) : (a.find("> .content .view > .call .actions .videoEnabled .off").addClass("selected"), a.find("> .content .view > .call .actions .videoEnabled .on").removeClass("selected")) }, onMuteButton: function (a, b) { var c = linphone.ui.getCore(a); c.micEnabled = !b, linphone.ui.view.call.updateMuteButton(a, !b) }, onVideoButton: function (a, b, c) { c && linphone.ui.view.call.activateVideoButton(a, b, !1), linphone.ui.view.call.enableVideo(a, b, c) }, onPauseButton: function (a, b) { var c = linphone.ui.getCore(a); b.state === linphone.CallState.Paused ? c.resumeCall(b) : c.pauseCall(b) }, onTerminateButton: function (a, b) { var c = linphone.ui.getCore(a); c.terminateCall(b) }, enableVideo: function (a, b, c) { var d = linphone.ui.getCore(a), e = b.currentParams; e.videoEnabled = c, d.updateCall(b, e), c === !1 && (linphone.ui.view.call.removeVideo(a, b), linphone.ui.view.call.updateVideoButton(a, c)) }, addVideo: function (a) { linphone.ui.video.addVideoView(a, a.find("> .content .view > .call .video > .content")) }, removeVideo: function (a) { linphone.ui.video.removeView(a, a.find("> .content .view > .call .video > .content")) }, activateVideoButton: function (a, b, c) { var d = a.find("> .content .view > .call"); c ? (d.find(".actions .videoEnabled .on").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onVideoButton(a, b, !0) })), d.find(".actions .videoEnabled .off").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.call.onVideoButton(a, b, !1) })), a.find("> .content .view > .call .actions .videoEnabled .off").removeClass("inactive"), a.find("> .content .view > .call .actions .videoEnabled .on").removeClass("inactive")) : (a.find("> .content .view > .call .actions .videoEnabled .on").unbind("click"), a.find("> .content .view > .call .actions .videoEnabled .off").unbind("click"), a.find("> .content .view > .call .actions .videoEnabled .off").addClass("inactive"), a.find("> .content .view > .call .actions .videoEnabled .on").addClass("inactive")) }, terminateCall: function (a) { var b = linphone.ui.getCore(a); b.micMute = !1, a.off("callStatsUpdated", linphone.ui.view.call.onCallStatsUpdated) }, displayCallQuality: function (a, b) { var c = b.currentQuality, d = a.find("> .content .view > .call .actions .callSignal"); d.removeClass("imageSignal0b"), d.removeClass("imageSignal1b"), d.removeClass("imageSignal2b"), d.removeClass("imageSignal3b"), d.removeClass("imageSignal4b"), d.addClass(c >= 1 && 2 > c ? "imageSignal1b" : c >= 2 && 3 > c ? "imageSignal2b" : c >= 3 && 4 > c ? "imageSignal3b" : c >= 4 && 5 > c ? "imageSignal4b" : "imageSignal0b") }, onCallStatsUpdated: function (a, b) { var c = jQuery(this); linphone.ui.view.call.displayCallQuality(c, b) }
}, linphone.ui.view.conference = { init: function (a) { linphone.ui.view.conference.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .conference").data("linphoneweb-view", linphone.ui.view.conference) }, translate: function () { }, show: function (a) { linphone.ui.menu.show(a) }, hide: function () { } }, linphone.ui.view.chat = { init: function (a) { linphone.ui.view.chat.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .chat").data("linphoneweb-view", linphone.ui.view.chat) }, translate: function () { }, show: function (a) { linphone.ui.menu.show(a), a.find("> .content .view > .chat .scroll-pane").each(function () { linphone.ui.slider(jQuery(this)) }) }, hide: function () { } }, linphone.ui.view.settings = { init: function (a) { linphone.ui.view.settings.uiInit(a), linphone.ui.view.settings.media.init(a) }, uiInit: function (a) { a.find("> .content .view > .settings").data("linphoneweb-view", linphone.ui.view.settings) }, translate: function () { }, show: function (a) { linphone.ui.menu.hide(a), linphone.ui.view.settings.media.show(a) }, hide: function (a) { linphone.ui.view.hide(a, "settings") } }, linphone.ui.view.settings.media = { init: function (a) { linphone.ui.view.settings.media.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .settings > .media .actions .save").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.settings.media.save(a), linphone.ui.view.hide(a, "settings") })), a.find("> .content .view > .settings > .media .actions .cancel").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.hide(a, "settings") })) }, translate: function () { }, show: function (a) { linphone.ui.view.settings.media.updateList(a), a.find("> .content .view > .settings > .media").show() }, unique: function (a) { for (var b = [], c = a.length; c--;) { var d = a[c]; -1 === jQuery.inArray(d, b) && b.unshift(d) } return b }, updateList: function (a) { var b = a.find("> .content .view > .settings > .media"), c = linphone.ui.getCore(a); b.find(".devices .play select").empty(), b.find(".devices .ring select").empty(), b.find(".devices .record select").empty(), b.find(".devices .video select").empty(); var d = c.soundDevices; for (var e in d) { var f = d[e], g = '<option value="' + f + '">' + f + "</option>"; c.soundDeviceCanCapture(f) && b.find(".devices .record select").append(g), c.soundDeviceCanPlayback(f) && (b.find(".devices .play select").append(g), b.find(".devices .ring select").append(g)) } var h = c.ringerDevice, i = c.playbackDevice, j = c.captureDevice; linphone.ui.logger.log(a, "Ringer device: " + h), linphone.ui.logger.log(a, "Playback device: " + i), linphone.ui.logger.log(a, "Capture device: " + j), b.find(".devices .ring select").val(h), b.find(".devices .play select").val(i), b.find(".devices .record select").val(j); var k = linphone.ui.view.settings.media.unique(c.videoDevices); for (var l in k) { var m = k[l], n = '<option value="' + m + '">' + m + "</option>"; b.find(".devices .video select").append(n) } var o = c.videoDevice; linphone.ui.logger.log(a, "Video device: " + o), b.find(".devices .video select").val(o) }, save: function (a) { var b = linphone.ui.getCore(a), c = a.find("> .content .view > .settings > .media"); b.ringerDevice = c.find(".devices .ring select").val(), b.playbackDevice = c.find(".devices .play select").val(), b.captureDevice = c.find(".devices .record select").val(), b.videoDevice = c.find(".devices .video select").val() } }, linphone.ui.view.about = { init: function (a) { linphone.ui.view.about.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .about").data("linphoneweb-view", linphone.ui.view.about), a.find("> .content .view > .about .button").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.hide(a, "about") })) }, translate: function () { }, show: function (a) { linphone.ui.view.about.update(a), linphone.ui.menu.hide(a) }, hide: function (a) { linphone.ui.view.hide(a, "about") }, update: function (a) { var b = a.find("> .content .view > .about"), c = linphone.ui.getCore(a), d = linphone.ui.configuration(a); linphone.core.isValid(c) ? (b.find(".entry .core").show(), b.find(".entry .core .version").text(c.version), b.find(".entry .webapp").show(), b.find(".entry .webapp .version").text(d.webapp_version), b.find(".entry .plugin").show(), b.find(".entry .plugin .version").text(c.pluginVersion)) : (b.find(".entry .core").hide(), b.find(".entry .webapp").hide(), b.find(".entry .plugin").hide()); var e = b.find(".links"); e.empty(); for (var f in d.links) { var g = d.links[f], h = linphone.ui.template(a, "view.about.link", g); e.append(h) } b.find(".copyright").text(d.copyright) } }, linphone.ui.view.help = { init: function (a) { linphone.ui.view.help.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .help").data("linphoneweb-view", linphone.ui.view.help), a.find("> .content .view > .help .button").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.view.hide(a, "help") })) }, translate: function () { }, show: function (a) { linphone.ui.menu.hide(a) }, hide: function (a) { linphone.ui.view.hide(a, "help") } }, linphone.ui.view.error = { init: function (a) { linphone.ui.view.error.uiInit(a) }, uiInit: function (a) { a.find("> .content .view > .error").data("linphoneweb-view", linphone.ui.view.error), a.find("> .content .view > .error .reload").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.core.reload(a) })) }, translate: function () { }, show: function (a, b, c) { if ("undefined" != typeof b && null !== b || "undefined" != typeof c && null !== c) { var d; d = "undefined" == typeof b || null === b ? jQuery("<div />").text(c).html() : jQuery.i18n.get(b), a.find("> .content .view > .error .message").empty(), a.find("> .content .view > .error .message").append(d), linphone.ui.view.show(a, "error") } } }, linphone.ui.popup = { init: function (a) { linphone.ui.popup.uiInit(a), linphone.ui.popup.incall.init(a), linphone.ui.popup.outcall.init(a), linphone.ui.popup.error.init(a), linphone.ui.popup.video.init(a) }, uiInit: function () { }, translate: function (a) { linphone.ui.popup.incall.translate(a), linphone.ui.popup.outcall.translate(a), linphone.ui.popup.error.translate(a), linphone.ui.popup.video.translate(a) }, show: function (a, b) { a.find("> .content .popup > ." + b).show(), linphone.ui.popup.update.apply(this, [a].concat(Array.prototype.slice.call(arguments, 2))) }, hide: function (a, b) { a.find("> .content .popup > ." + b).hide(), linphone.ui.popup.update.apply(this, [a].concat(Array.prototype.slice.call(arguments, 2))) }, update: function (a) { var b = a.find(".content .popup"); b.children().filter(function () { return "none" !== jQuery(this).css("display") }).length > 0 ? b.show() : b.hide() }, clear: function (a) { var b = a.find(".content .popup"); b.children().each(function (a, b) { var c = jQuery(b); "none" !== c.css("display") && c.hide() }), linphone.ui.popup.update(a) } }, linphone.ui.popup.incall = { init: function (a) { linphone.ui.popup.incall.uiInit(a) }, uiInit: function () { }, translate: function () { }, show: function (a, b) { var c = a.find("> .content .popup"), d = linphone.ui.template(a, "popup.incall", b); d.data("incallPopup", b), d.find(".actions .callIn").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.popup.incall.accept(a, b) })), d.find(".actions .callOff").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.popup.incall.decline(a, b) })), c.append(d), linphone.ui.popup.show(a, "incall"), linphone.ui.popup.update(a) }, hide: function (a, b) { var c = linphone.ui.popup.incall.getIncallPopup(a, b); null !== c && c.remove(), linphone.ui.popup.update(a) }, decline: function (a, b) { var c = linphone.ui.getCore(a); c.terminateCall(b), linphone.ui.popup.incall.hide(a, b) }, accept: function (a, b) { var c = linphone.ui.getCore(a), d = c.createDefaultCallParameters(); c.acceptCallWithParams(b, d), linphone.ui.popup.incall.hide(a, b) }, getIncallPopup: function (a, b) { var c = a.find("> .content .popup > .incall").each(function (a, c) { var d = jQuery(c), e = d.data("incallPopup"); return b === e ? d : void 0 }); return c } }, linphone.ui.popup.outcall = { init: function (a) { linphone.ui.popup.outcall.uiInit(a) }, uiInit: function () { }, translate: function () { }, show: function (a, b) { var c = a.find("> .content .popup"), d = linphone.ui.template(a, "popup.outcall", b); d.data("outcallPopup", b), d.find(".actions .callOff").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.popup.outcall.decline(a, b) })), c.append(d), linphone.ui.popup.show(a, "outcall"), linphone.ui.popup.update(a) }, hide: function (a, b) { var c = linphone.ui.popup.outcall.getOutcallPopup(a, b); null !== c && c.remove(), linphone.ui.popup.update(a) }, decline: function (a, b) { var c = linphone.ui.getCore(a); c.terminateCall(b), linphone.ui.popup.outcall.hide(a, b) }, getOutcallPopup: function (a, b) { var c = a.find("> .content .popup > .outcall").each(function (a, c) { var d = jQuery(c), e = d.data("outcallPopup"); return b === e ? d : void 0 }); return c } }, linphone.ui.popup.error = { init: function (a) { linphone.ui.popup.error.uiInit(a) }, uiInit: function () { }, translate: function () { }, show: function (a, b, c) { var d; d = "undefined" == typeof b || null === b ? jQuery("<div />").text(c).html() : jQuery.i18n.skeleton(b, c); var e = linphone.ui.popup.error.getErrorPopup(a, d); null !== e && e.remove(); var f = a.find("> .content .popup"), g = linphone.ui.template(a, "popup.error", { content: d }); g.data("errorPopup", d), g.find(".button").click(linphone.ui.exceptionHandler(a, function (b) { jQuery(b.target ? b.target : b.srcElement); linphone.ui.popup.error.hide(a, g) })), f.append(g), g.show(), linphone.ui.popup.update(a) }, hide: function (a, b) { b.remove(), linphone.ui.popup.update(a) }, getErrorPopup: function (a, b) { var c = a.find("> .content .popup > .error").each(function (a, c) { var d = jQuery(c), e = d.data("errorPopup"); return b === e ? d : void 0 }); return c } }, linphone.ui.popup.video = { init: function (a) { linphone.ui.popup.video.uiInit(a) }, uiInit: function () { }, translate: function () { }, show: function (a, b) { var c = a.find("> .content .popup"), d = linphone.ui.template(a, "popup.video", b); d.data("videoPopup", b), d.find(".actions .videoIn").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.popup.video.accept(a, b) })), d.find(".actions .videoOff").click(linphone.ui.exceptionHandler(a, function () { linphone.ui.popup.video.decline(a, b) })), c.append(d), linphone.ui.popup.show(a, "video"), linphone.ui.popup.update(a) }, hide: function (a, b, c) { var d = linphone.ui.popup.video.getVideoPopup(a, b); null !== d && 0 !== d.length && (linphone.ui.utils.acceptUpdate(a, b, c), d.remove()), linphone.ui.popup.update(a) }, decline: function (a, b) { linphone.ui.popup.video.hide(a, b, !1), linphone.ui.view.call.updateVideoButton(a, !1) }, accept: function (a, b) { linphone.ui.popup.video.hide(a, b, !0), linphone.ui.view.call.updateVideoButton(a, !0) }, getVideoPopup: function (a, b) { var c = a.find("> .content .popup > .video"), d = null; return d = c.each(function (a, c) { var d = jQuery(c), e = d.data("videoPopup"); return b === e ? d : null }) } }, linphone.SubscriptionDir = { Incoming: 0, Outgoing: 1, InvalidDir: 2 }, linphone.getSubscriptionDirText = function (a) { switch (a) { case linphone.SubscriptionDir.Incoming: return "Incoming"; case linphone.SubscriptionDir.Outgoing: return "Outgoing"; case linphone.SubscriptionDir.InvalidDir: return "InvalidDir"; default: return "?" } }, linphone.RegistrationState = { None: 0, Progress: 1, Ok: 2, Cleared: 3, Failed: 4 }, linphone.getRegistrationStateText = function (a) { switch (a) { case linphone.RegistrationState.None: return "None"; case linphone.RegistrationState.Progress: return "Progress"; case linphone.RegistrationState.Ok: return "Ok"; case linphone.RegistrationState.Cleared: return "Cleared"; case linphone.RegistrationState.Failed: return "Failed"; default: return "?" } }, linphone.IceState = { NotActivated: 0, Failed: 1, InProgress: 2, HostConnection: 3, ReflexiveConnection: 4, RelayConnection: 5 }, linphone.getIceStateText = function (a) { switch (a) { case linphone.IceState.NotActivated: return "NotActivated"; case linphone.IceState.Failed: return "Failed"; case linphone.IceState.InProgress: return "InProgress"; case linphone.IceState.HostConnection: return "HostConnection"; case linphone.IceState.ReflexiveConnection: return "ReflexiveConnection"; case linphone.IceState.RelayConnection: return "RelayConnection"; default: return "?" } }, linphone.SubscriptionState = { None: 0, OutgoingInit: 1, IncomingReceived: 2, Pending: 3, Active: 4, Terminated: 5, Error: 6, Expiring: 7 }, linphone.getSubscriptionStateText = function (a) { switch (a) { case linphone.SubscriptionState.None: return "None"; case linphone.SubscriptionState.OutgoingInit: return "OutgoingInit"; case linphone.SubscriptionState.IncomingReceived: return "IncomingReceived"; case linphone.SubscriptionState.Pending: return "Pending"; case linphone.SubscriptionState.Active: return "Active"; case linphone.SubscriptionState.Terminated: return "Terminated"; case linphone.SubscriptionState.Error: return "Error"; case linphone.SubscriptionState.Expiring: return "Expiring"; default: return "?" } }, linphone.ConfiguringState = { Successful: 0, Failed: 1, Skipped: 2 }, linphone.getConfiguringStateText = function (a) { switch (a) { case linphone.ConfiguringState.Successful: return "Successful"; case linphone.ConfiguringState.Failed: return "Failed"; case linphone.ConfiguringState.Skipped: return "Skipped"; default: return "?" } }, linphone.CallDir = { Outgoing: 0, Incoming: 1 }, linphone.getCallDirText = function (a) { switch (a) { case linphone.CallDir.Outgoing: return "Outgoing"; case linphone.CallDir.Incoming: return "Incoming"; default: return "?" } }, linphone.FirewallPolicy = { NoFirewall: 0, UseNatAddress: 1, UseStun: 2, UseIce: 3, UseUpnp: 4 }, linphone.getFirewallPolicyText = function (a) { switch (a) { case linphone.FirewallPolicy.NoFirewall: return "NoFirewall"; case linphone.FirewallPolicy.UseNatAddress: return "UseNatAddress"; case linphone.FirewallPolicy.UseStun: return "UseStun"; case linphone.FirewallPolicy.UseIce: return "UseIce"; case linphone.FirewallPolicy.UseUpnp: return "UseUpnp"; default: return "?" } }, linphone.Privacy = { None: 0, User: 1, Header: 2, Session: 3, Id: 4, Critical: 5, Default: 6 }, linphone.getPrivacyText = function (a) { switch (a) { case linphone.Privacy.None: return "None"; case linphone.Privacy.User: return "User"; case linphone.Privacy.Header: return "Header"; case linphone.Privacy.Session: return "Session"; case linphone.Privacy.Id: return "Id"; case linphone.Privacy.Critical: return "Critical"; case linphone.Privacy.Default: return "Default"; default: return "?" } }, linphone.MediaEncryption = { None: 0, SRTP: 1, ZRTP: 2 }, linphone.getMediaEncryptionText = function (a) { switch (a) { case linphone.MediaEncryption.None: return "None"; case linphone.MediaEncryption.SRTP: return "SRTP"; case linphone.MediaEncryption.ZRTP: return "ZRTP"; default: return "?" } }, linphone.PresenceBasicStatus = { Open: 0, Closed: 1 }, linphone.getPresenceBasicStatusText = function (a) { switch (a) { case linphone.PresenceBasicStatus.Open: return "Open"; case linphone.PresenceBasicStatus.Closed: return "Closed"; default: return "?" } }, linphone.Reason = { None: 0, NoResponse: 1, Forbidden: 2, Declined: 3, NotFound: 4, NotAnswered: 5, Busy: 6, UnsupportedContent: 7, IOError: 8, DoNotDisturb: 9, Unauthorized: 10, NotAcceptable: 11, NoMatch: 12, MovedPermanently: 13, Gone: 14, TemporarilyUnavailable: 15, AddressIncomplete: 16, NotImplemented: 17, BadGateway: 18, ServerTimeout: 19, Unknown: 20 }, linphone.getReasonText = function (a) { switch (a) { case linphone.Reason.None: return "None"; case linphone.Reason.NoResponse: return "NoResponse"; case linphone.Reason.Forbidden: return "Forbidden"; case linphone.Reason.Declined: return "Declined"; case linphone.Reason.NotFound: return "NotFound"; case linphone.Reason.NotAnswered: return "NotAnswered"; case linphone.Reason.Busy: return "Busy"; case linphone.Reason.UnsupportedContent: return "UnsupportedContent"; case linphone.Reason.IOError: return "IOError"; case linphone.Reason.DoNotDisturb: return "DoNotDisturb"; case linphone.Reason.Unauthorized: return "Unauthorized"; case linphone.Reason.NotAcceptable: return "NotAcceptable"; case linphone.Reason.NoMatch: return "NoMatch"; case linphone.Reason.MovedPermanently: return "MovedPermanently"; case linphone.Reason.Gone: return "Gone"; case linphone.Reason.TemporarilyUnavailable: return "TemporarilyUnavailable"; case linphone.Reason.AddressIncomplete: return "AddressIncomplete"; case linphone.Reason.NotImplemented: return "NotImplemented"; case linphone.Reason.BadGateway: return "BadGateway"; case linphone.Reason.ServerTimeout: return "ServerTimeout"; case linphone.Reason.Unknown: return "Unknown"; default: return "?" } }, linphone.CallStatus = { Success: 0, Aborted: 1, Missed: 2, Declined: 3 }, linphone.getCallStatusText = function (a) { switch (a) { case linphone.CallStatus.Success: return "Success"; case linphone.CallStatus.Aborted: return "Aborted"; case linphone.CallStatus.Missed: return "Missed"; case linphone.CallStatus.Declined: return "Declined"; default: return "?" } }, linphone.GlobalState = { Off: 0, Startup: 1, On: 2, Shutdown: 3, Configuring: 4 }, linphone.getGlobalStateText = function (a) { switch (a) { case linphone.GlobalState.Off: return "Off"; case linphone.GlobalState.Startup: return "Startup"; case linphone.GlobalState.On: return "On"; case linphone.GlobalState.Shutdown: return "Shutdown"; case linphone.GlobalState.Configuring: return "Configuring"; default: return "?" } }, linphone.PublishState = { None: 0, Progress: 1, Ok: 2, Error: 3, Expiring: 4, Cleared: 5 }, linphone.getPublishStateText = function (a) { switch (a) { case linphone.PublishState.None: return "None"; case linphone.PublishState.Progress: return "Progress"; case linphone.PublishState.Ok: return "Ok"; case linphone.PublishState.Error: return "Error"; case linphone.PublishState.Expiring: return "Expiring"; case linphone.PublishState.Cleared: return "Cleared"; default: return "?" } }, linphone.TransportType = { Udp: 0, Tcp: 1, Tls: 2, Dtls: 3 }, linphone.getTransportTypeText = function (a) { switch (a) { case linphone.TransportType.Udp: return "Udp"; case linphone.TransportType.Tcp: return "Tcp"; case linphone.TransportType.Tls: return "Tls"; case linphone.TransportType.Dtls: return "Dtls"; default: return "?" } }, linphone.UpnpState = { Idle: 0, Pending: 1, Adding: 2, Removing: 3, NotAvailable: 4, Ok: 5, Ko: 6, Blacklisted: 7 }, linphone.getUpnpStateText = function (a) { switch (a) { case linphone.UpnpState.Idle: return "Idle"; case linphone.UpnpState.Pending: return "Pending"; case linphone.UpnpState.Adding: return "Adding"; case linphone.UpnpState.Removing: return "Removing"; case linphone.UpnpState.NotAvailable: return "NotAvailable"; case linphone.UpnpState.Ok: return "Ok"; case linphone.UpnpState.Ko: return "Ko"; case linphone.UpnpState.Blacklisted: return "Blacklisted"; default: return "?" } }, linphone.CallState = { Idle: 0, IncomingReceived: 1, OutgoingInit: 2, OutgoingProgress: 3, OutgoingRinging: 4, OutgoingEarlyMedia: 5, Connected: 6, StreamsRunning: 7, Pausing: 8, Paused: 9, Resuming: 10, Refered: 11, Error: 12, End: 13, PausedByRemote: 14, UpdatedByRemote: 15, IncomingEarlyMedia: 16, Updating: 17, Released: 18 }, linphone.getCallStateText = function (a) { switch (a) { case linphone.CallState.Idle: return "Idle"; case linphone.CallState.IncomingReceived: return "IncomingReceived"; case linphone.CallState.OutgoingInit: return "OutgoingInit"; case linphone.CallState.OutgoingProgress: return "OutgoingProgress"; case linphone.CallState.OutgoingRinging: return "OutgoingRinging"; case linphone.CallState.OutgoingEarlyMedia: return "OutgoingEarlyMedia"; case linphone.CallState.Connected: return "Connected"; case linphone.CallState.StreamsRunning: return "StreamsRunning"; case linphone.CallState.Pausing: return "Pausing"; case linphone.CallState.Paused: return "Paused"; case linphone.CallState.Resuming: return "Resuming"; case linphone.CallState.Refered: return "Refered"; case linphone.CallState.Error: return "Error"; case linphone.CallState.End: return "End"; case linphone.CallState.PausedByRemote: return "PausedByRemote"; case linphone.CallState.UpdatedByRemote: return "UpdatedByRemote"; case linphone.CallState.IncomingEarlyMedia: return "IncomingEarlyMedia"; case linphone.CallState.Updating: return "Updating"; case linphone.CallState.Released: return "Released"; default: return "?" } }, linphone.PresenceActivityType = { Offline: 0, Online: 1, Appointment: 2, Away: 3, Breakfast: 4, Busy: 5, Dinner: 6, Holiday: 7, InTransit: 8, LookingForWork: 9, Lunch: 10, Meal: 11, Meeting: 12, OnThePhone: 13, Other: 14, Performance: 15, PermanentAbsence: 16, Playing: 17, Presentation: 18, Shopping: 19, Sleeping: 20, Spectator: 21, Steering: 22, Travel: 23, TV: 24, Unknown: 25, Vacation: 26, Working: 27, Worship: 28 }, linphone.getPresenceActivityTypeText = function (a) { switch (a) { case linphone.PresenceActivityType.Offline: return "Offline"; case linphone.PresenceActivityType.Online: return "Online"; case linphone.PresenceActivityType.Appointment: return "Appointment"; case linphone.PresenceActivityType.Away: return "Away"; case linphone.PresenceActivityType.Breakfast: return "Breakfast"; case linphone.PresenceActivityType.Busy: return "Busy"; case linphone.PresenceActivityType.Dinner: return "Dinner"; case linphone.PresenceActivityType.Holiday: return "Holiday"; case linphone.PresenceActivityType.InTransit: return "InTransit"; case linphone.PresenceActivityType.LookingForWork: return "LookingForWork"; case linphone.PresenceActivityType.Lunch: return "Lunch"; case linphone.PresenceActivityType.Meal: return "Meal"; case linphone.PresenceActivityType.Meeting: return "Meeting"; case linphone.PresenceActivityType.OnThePhone: return "OnThePhone"; case linphone.PresenceActivityType.Other: return "Other"; case linphone.PresenceActivityType.Performance: return "Performance"; case linphone.PresenceActivityType.PermanentAbsence: return "PermanentAbsence"; case linphone.PresenceActivityType.Playing: return "Playing"; case linphone.PresenceActivityType.Presentation: return "Presentation"; case linphone.PresenceActivityType.Shopping: return "Shopping"; case linphone.PresenceActivityType.Sleeping: return "Sleeping"; case linphone.PresenceActivityType.Spectator: return "Spectator"; case linphone.PresenceActivityType.Steering: return "Steering"; case linphone.PresenceActivityType.Travel: return "Travel"; case linphone.PresenceActivityType.TV: return "TV"; case linphone.PresenceActivityType.Unknown: return "Unknown"; case linphone.PresenceActivityType.Vacation: return "Vacation"; case linphone.PresenceActivityType.Working: return "Working"; case linphone.PresenceActivityType.Worship: return "Worship"; default: return "?" } }, linphone.CallStatsRTCPUpdate = { ReceivedRTCPUpdate: 0, SentRTCPUpdate: 1 }, linphone.getCallStatsRTCPUpdateText = function (a) { switch (a) { case linphone.CallStatsRTCPUpdate.ReceivedRTCPUpdate: return "ReceivedRTCPUpdate"; case linphone.CallStatsRTCPUpdate.SentRTCPUpdate: return "SentRTCPUpdate"; default: return "?" } }, linphone.SubscribePolicy = { Wait: 0, Deny: 1, Accept: 2 }, linphone.getSubscribePolicyText = function (a) { switch (a) { case linphone.SubscribePolicy.Wait: return "Wait"; case linphone.SubscribePolicy.Deny: return "Deny"; case linphone.SubscribePolicy.Accept: return "Accept"; default: return "?" } }, linphone.ChatMessageState = { Idle: 0, InProgress: 1, Delivered: 2, NotDelivered: 3 }, linphone.getChatMessageStateText = function (a) { switch (a) { case linphone.ChatMessageState.Idle: return "Idle"; case linphone.ChatMessageState.InProgress: return "InProgress"; case linphone.ChatMessageState.Delivered: return "Delivered"; case linphone.ChatMessageState.NotDelivered: return "NotDelivered"; default: return "?" } }, this.linphone = this.linphone || {}, this.linphone.ui = this.linphone.ui || {}, this.linphone.ui.templates = this.linphone.ui.templates || {}, this.linphone.ui.templates["header.language.list.entry"] = Handlebars.template(function (a, b, c, d, e) { function f() { return "selected" } function g(a) { var b, c = ""; return c += 'title="' + l((b = a.context, b = null == b || b === !1 ? b : b.title, typeof b === k ? b.apply(a) : b)) + '"' } this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var h, i, j = "", k = "function", l = this.escapeExpression, m = this; return j += '\n			<li class="', i = c["if"].call(b, (h = b.context, null == h || h === !1 ? h : h.current), { hash: {}, inverse: m.noop, fn: m.program(1, f, e), data: e }), (i || 0 === i) && (j += i), j += '" ', i = c["if"].call(b, (h = b.context, null == h || h === !1 ? h : h.title), { hash: {}, inverse: m.noop, fn: m.program(3, g, e), data: e }), (i || 0 === i) && (j += i), j += ">" + l((h = b.context, h = null == h || h === !1 ? h : h.name, typeof h === k ? h.apply(b) : h)) + "</li>\n		" }), this.linphone.ui.templates["header.profile.status"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="image ' + i((f = b.context, f = null == f || f === !1 ? f : f.cls, typeof f === h ? f.apply(b) : f)) + '"></div><div class="text" data-i18n="global.status.' + i((f = b.context, f = null == f || f === !1 ? f : f.i18n, typeof f === h ? f.apply(b) : f)) + '"></div>\n	' }), this.linphone.ui.templates["menu.calls.list.entry"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h = "", i = c.helperMissing, j = this.escapeExpression; return h += '\n		<li class="entry" title="', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), !1, g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), !1, g))) + '"><span class="state ', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.menu, null == f || f === !1 ? f : f.getCallStateClass), (f = b.context, null == f || f === !1 ? f : f.state), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.menu, null == f || f === !1 ? f : f.getCallStateClass), (f = b.context, null == f || f === !1 ? f : f.state), g))) + '"></span><span class="name">', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + "</span></li>\n	" }), this.linphone.ui.templates["menu.chat.list.entry"] = Handlebars.template(function (a, b, c, d, e) { function f(a) { var b, c = ""; return c += '\n				<span class="numberMessage">' + k((b = a.context, b = null == b || b === !1 ? b : b.unreadMessage, typeof b === j ? b.apply(a) : b)) + "</span>\n				" } this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var g, h, i = "", j = "function", k = this.escapeExpression, l = this; return i += '\n		<li class="entry">\n			<a>' + k((g = b.context, g = null == g || g === !1 ? g : g.name, typeof g === j ? g.apply(b) : g)) + "\n				", h = c["if"].call(b, (g = b.context, null == g || g === !1 ? g : g.unreadMessage), { hash: {}, inverse: l.noop, fn: l.program(1, f, e), data: e }), (h || 0 === h) && (i += h), i += "\n			</a>\n		</li>\n	" }), this.linphone.ui.templates["object.core"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n	<object class="core" type="application/x-linphone-web" width="0" height="0" codebase="' + i((f = b.context, f = null == f || f === !1 ? f : f.codebase, typeof f === h ? f.apply(b) : f)) + '">\n	 	<param name="onload" value="' + i((f = b.context, f = null == f || f === !1 ? f : f.fct, typeof f === h ? f.apply(b) : f)) + '" />\n		<param name="magic" value="' + i((f = b.context, f = null == f || f === !1 ? f : f.magic, typeof f === h ? f.apply(b) : f)) + '" />\n	</object>\n' }), this.linphone.ui.templates["object.video"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n	<object class="video" type="application/x-linphone-web-video">\n		<param name="onload" value="' + i((f = b.context, f = null == f || f === !1 ? f : f.fct, typeof f === h ? f.apply(b) : f)) + '" />\n		<param name="magic" value="' + i((f = b.context, f = null == f || f === !1 ? f : f.magic, typeof f === h ? f.apply(b) : f)) + '" />\n	</object>\n' }), this.linphone.ui.templates["popup.error"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h = "", i = "function"; return h += '\n	<div class="error">\n		<span class="title" data-i18n="content.popup.error.title"></span>\n		<div class="imgError"></div>\n		<div class="message">', f = b.context, f = null == f || f === !1 ? f : f.content, g = typeof f === i ? f.apply(b) : f, (g || 0 === g) && (h += g), h += '</div>\n		<div class="button"><div class="text" data-i18n="global.ok"></div></div>\n	</div>\n' }), this.linphone.ui.templates["popup.incall"] = Handlebars.template(function (a, b, c, d, e) {
    this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {};
    var f, g, h = "", i = c.helperMissing, j = this.escapeExpression; return h += '\n	<div class="incall">\n 		<span class="title" data-i18n="content.popup.incall.title"></span>\n		<img src="', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '" alt="" class="contactImg">\n		<span class="contactName">', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '</span>\n 		<div class="actions">\n 			<div class="callIn"><div class="image imageCall"></div></div>\n 			<div class="callOff"><div class="image imageCallOff"></div></div>\n 		</div>\n 	</div>	\n '
}), this.linphone.ui.templates["popup.outcall"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h = "", i = c.helperMissing, j = this.escapeExpression; return h += '\n	<div class="outcall">\n 		<span class="title" data-i18n="content.popup.outcall.title"></span>\n		<img src="', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '" alt="" class="contactImg">\n		<span class="contactName">', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '</span>\n 		<div class="actions">\n 			<div class="callOff"><div class="image imageCallOff"></div></div>\n 		</div>\n 	</div>	\n ' }), this.linphone.ui.templates["popup.video"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h = "", i = c.helperMissing, j = this.escapeExpression; return h += '\n	<div class="video">\n 		<span class="title" data-i18n="content.popup.video.title"></span>\n 		<img src="', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '" alt="" class="contactImg">\n		<div class="contactName">\n			', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '\n			<div class="message" data-i18n="content.popup.video.message"></div>\n		</div>\n 		<div class="actions">\n 			<div class="videoIn"><div class="image imageCall"></div></div>\n 			<div class="videoOff"><div class="image imageCallOff"></div></div>\n 		</div>\n 	</div>	\n ' }), this.linphone.ui.templates["view.about.link"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="link"><a class="' + i((f = b.context, f = null == f || f === !1 ? f : f.cls, typeof f === h ? f.apply(b) : f)) + '" href="' + i((f = b.context, f = null == f || f === !1 ? f : f.link, typeof f === h ? f.apply(b) : f)) + '" data-i18n="content.view.about.links.' + i((f = b.context, f = null == f || f === !1 ? f : f.text, typeof f === h ? f.apply(b) : f)) + '" target="_blank"></a></div>\n	' }), this.linphone.ui.templates["view.call.actions"] = Handlebars.template(function (a, b, c, d, e) { return this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}, '\n		<div class="floatLeft"><div class="callSignal"></div></div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="buttonSelectDescription floatLeft"><div class="image imageVideo"></div><div class="text" data-i18n="content.view.call.video"></div></div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="videoEnabled button-group floatLeft">\n			<div class="on button buttonSelect"><div class="text" data-i18n="global.on"></div></div><!--\n			Avoid issue with inline block in dev mode\n			--><div class="off button buttonSelect"><div class="text" data-i18n="global.off"></div></div>\n		</div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="buttonSelectDescription floatLeft"><div class="image imageMicro"></div><div class="text" data-i18n="content.view.call.micro"></div></div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="muteEnabled button-group floatLeft">\n			<div class="on button buttonSelect"><div class="text" data-i18n="global.on"></div></div><!--\n			Avoid issue with inline block in dev mode\n			--><div class="off button buttonSelect"><div class="text" data-i18n="global.off"></div></div>\n		</div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="button pause buttonPause"><div class="image imagePause"></div></div><!--\n		Avoid issue with inline block in dev mode\n		--><div class="button conference"><div class="image imageConfAdd"></div></div>\n		<!--\n		Avoid issue with inline block in dev mode\n		--><div class="floatRight"><div class="button hangup"><div class="image imageCallEnd"></div><div class="text" data-i18n="content.view.call.hangup"></div></div></div>\n	' }), this.linphone.ui.templates["view.call.contact"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h = "", i = c.helperMissing, j = this.escapeExpression; return h += '\n		<div>\n			<img src="', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + '" alt="" class="avatar" />\n			<div class="address">', g = { hash: {}, data: e }, h += j((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g) : i.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), g))) + "</div>\n		</div>\n	" }), this.linphone.ui.templates["view.chat.list.entry.received"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="entryReceive">\n			<img src="' + i((f = b.context, f = null == f || f === !1 ? f : f.img, typeof f === h ? f.apply(b) : f)) + '" alt="" class="contactImg">\n			<div class="infos">\n				<div class="date">' + i((f = b.context, f = null == f || f === !1 ? f : f.date, typeof f === h ? f.apply(b) : f)) + '</div>\n				<div class="contactName">' + i((f = b.context, f = null == f || f === !1 ? f : f.name, typeof f === h ? f.apply(b) : f)) + '</div>\n				<div class="message">' + i((f = b.context, f = null == f || f === !1 ? f : f.message, typeof f === h ? f.apply(b) : f)) + "</div>\n			</div>\n			<hr>\n		</div>\n	" }), this.linphone.ui.templates["view.chat.list.entry.sent"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="entrySend">\n			<img src="' + i((f = b.context, f = null == f || f === !1 ? f : f.img, typeof f === h ? f.apply(b) : f)) + '" alt="" class="contactImg">\n			<div class="infos">\n				<div class="date">' + i((f = b.context, f = null == f || f === !1 ? f : f.date, typeof f === h ? f.apply(b) : f)) + '</div>\n				<div class="contactName">' + i((f = b.context, f = null == f || f === !1 ? f : f.name, typeof f === h ? f.apply(b) : f)) + '</div>\n				<div class="message">' + i((f = b.context, f = null == f || f === !1 ? f : f.message, typeof f === h ? f.apply(b) : f)) + "</div>\n			</div>\n			<hr>\n		</div>\n	" }), this.linphone.ui.templates["view.contacts.list.entry"] = Handlebars.template(function (a, b, c, d, e) { function f() { return "-->\n					<!--" } this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var g, h, i, j = "", k = "function", l = this.escapeExpression, m = c.helperMissing, n = this; return j += '\n		<div class="entry">\n			<img src="' + l((g = b.helpers, g = null == g || g === !1 ? g : g.utils, g = null == g || g === !1 ? g : g.getAvatar, typeof g === k ? g.apply(b) : g)) + '" alt="" class="avatar" />\n			<div class="details">\n				<div class="name">', i = { hash: {}, data: e }, j += l((g = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], g ? g.call(b, (g = b.helpers, g = null == g || g === !1 ? g : g.utils, null == g || g === !1 ? g : g.getContactName), (g = b.context, null == g || g === !1 ? g : g.friend), i) : m.call(b, "LinphoneWeb-Call", (g = b.helpers, g = null == g || g === !1 ? g : g.utils, null == g || g === !1 ? g : g.getContactName), (g = b.context, null == g || g === !1 ? g : g.friend), i))) + '</div>\n				<div class="button buttonAction goContact floatRight"><div class="image imageModify"></div></div>\n				<div class="presence">\n					<div class="image ' + l((g = b.context, g = null == g || g === !1 ? g : g.status, g = null == g || g === !1 ? g : g.cls, typeof g === k ? g.apply(b) : g)) + '"></div>\n					<span class="status" data-i18n="global.status.' + l((g = b.context, g = null == g || g === !1 ? g : g.status, g = null == g || g === !1 ? g : g.i18n, typeof g === k ? g.apply(b) : g)) + '"></span>\n				</div>\n			\n				<div class="addresses floatLeft">\n					\n					<div class="address">\n						<div class="number">', g = b.context, g = null == g || g === !1 ? g : g.address, h = typeof g === k ? g.apply(b) : g, (h || 0 === h) && (j += h), j += '</div>\n						<div class="chatContact button"><div class="image imageChat"></div></div>\n						<div class="callContact button"><div class="image imageCall"></div></div>\n					</div>\n					<!--', h = c.each.call(b, (g = b.context, null == g || g === !1 ? g : g.addressList), { hash: {}, inverse: n.noop, fn: n.program(1, f, e), data: e }), (h || 0 === h) && (j += h), j += " -->	\n				</div>\n			</div>\n			<hr />\n		</div>\n	" }), this.linphone.ui.templates["view.history.list.entry"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g, h, i = "", j = c.helperMissing, k = this.escapeExpression, l = "function"; return i += '\n		<div class="entry">\n			<div class="contact">\n				<img src="', h = { hash: {}, data: e }, i += k((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAvatar), (f = b.context, null == f || f === !1 ? f : f.remoteAddress), h))) + '" alt="" class="avatar">\n				<span class="name">', h = { hash: {}, data: e }, i += k((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remote), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getUsername), (f = b.context, null == f || f === !1 ? f : f.remote), h))) + '</span><br><!--\n				<span class="imageStatusOnline"></span>\n				<span class="status">' + k((f = b.context, f = null == f || f === !1 ? f : f.status, typeof f === l ? f.apply(b) : f)) + '</span><br>-->\n				<span class="number">', h = { hash: {}, data: e }, i += k((f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remote), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getAddress), (f = b.context, null == f || f === !1 ? f : f.remote), h))) + '</span>\n			</div>\n			<div class="infos">\n				<span class="time"><span class="title" data-i18n="content.view.history.time.title"></span>: ', h = { hash: {}, data: e }, f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], g = f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getTime), (f = b.context, null == f || f === !1 ? f : f.date), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getTime), (f = b.context, null == f || f === !1 ? f : f.date), h), (g || 0 === g) && (i += g), i += '</span>\n				<span class="duration"><span class="title" data-i18n="content.view.history.duration.title"></span>: ', h = { hash: {}, data: e }, f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], g = f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getDuration), (f = b.context, null == f || f === !1 ? f : f.duration), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getDuration), (f = b.context, null == f || f === !1 ? f : f.duration), h), (g || 0 === g) && (i += g), i += '</span>\n				<span class="direction"><span class="title" data-i18n="content.view.history.direction.title"></span>: ', h = { hash: {}, data: e }, f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], g = f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.view, f = null == f || f === !1 ? f : f.history, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getCallDirection), (f = b.context, null == f || f === !1 ? f : f.direction), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.view, f = null == f || f === !1 ? f : f.history, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getCallDirection), (f = b.context, null == f || f === !1 ? f : f.direction), h), (g || 0 === g) && (i += g), i += '</span>\n				<span class="status"><span class="title" data-i18n="content.view.history.status.title"></span>: ', h = { hash: {}, data: e }, f = c["LinphoneWeb-Call"] || b["LinphoneWeb-Call"], g = f ? f.call(b, (f = b.helpers, f = null == f || f === !1 ? f : f.view, f = null == f || f === !1 ? f : f.history, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getCallStatus), (f = b.context, null == f || f === !1 ? f : f.status), h) : j.call(b, "LinphoneWeb-Call", (f = b.helpers, f = null == f || f === !1 ? f : f.view, f = null == f || f === !1 ? f : f.history, f = null == f || f === !1 ? f : f.utils, null == f || f === !1 ? f : f.getCallStatus), (f = b.context, null == f || f === !1 ? f : f.status), h), (g || 0 === g) && (i += g), i += '</span>\n			</div>\n	\n			<div class="actions">\n				<div class="button call floatLeft"><div class="image imageCall"></div><div class="text" data-i18n="content.view.history.call"></div></div><!--\n				Avoid issue with inline block in dev mode\n		 		--><div class="button chat"><div class="image imageChat"></div></div><!--\n				Avoid issue with inline block in dev mode\n		 		--><div class="button remove buttonAction"><div class="image imageDelete"></div></div>\n			</div>\n			<hr>\n		</div>\n	' }), this.linphone.ui.templates["view.login.createAccount"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="link"><a class="' + i((f = b.context, f = null == f || f === !1 ? f : f.cls, typeof f === h ? f.apply(b) : f)) + '" href="' + i((f = b.context, f = null == f || f === !1 ? f : f.link, typeof f === h ? f.apply(b) : f)) + '" data-i18n="content.view.login.create" target="_blank"></a></div>\n	' }), this.linphone.ui.templates["view.plugin.link"] = Handlebars.template(function (a, b, c, d, e) { this.compilerInfo = [4, ">= 1.0.0"], c = this.merge(c, a.helpers), e = e || {}; var f, g = "", h = "function", i = this.escapeExpression; return g += '\n		<div class="link"><a class="' + i((f = b.context, f = null == f || f === !1 ? f : f.cls, typeof f === h ? f.apply(b) : f)) + '" href="' + i((f = b.context, f = null == f || f === !1 ? f : f.appLink, typeof f === h ? f.apply(b) : f)) + '" data-i18n="content.view.plugin.links.' + i((f = b.context, f = null == f || f === !1 ? f : f.text, typeof f === h ? f.apply(b) : f)) + '" target="_blank"></a></div>\n	' });